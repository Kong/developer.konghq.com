openapi: 3.0.3
info:
  title: Kong Native Event Proxy API (KNEP)
  description: Kong Native Event Proxy API (KNEP).
  version: 0.0.1
  contact:
    name: Kong
    url: https://konghq.com
servers: []
paths: {}
components:
  schemas:
    Config:
      type: object
      properties:
        key_sources:
          type: array
          description: "Key sources for configuring encryption or decryption"
          minItems: 1
          items:
            $ref: "#/components/schemas/KeySource"
        schema_registries:
          type: array
          description: "Schema registries configurations that can be referred in a schema_validation policy."
          minItems: 1
          items:
            $ref: "#/components/schemas/SchemaRegistry"
        policies:
          type: array
          description: "Policy configurations that can be referred to in a virtual cluster configuration."
          minItems: 1
          items:
            $ref: "#/components/schemas/Policy"
        virtual_clusters:
          type: array
          description: "A list of virtual clusters."
          minItems: 1
          items:
            $ref: "#/components/schemas/VirtualCluster"
        backend_clusters:
          type: array
          minItems: 1
          description: "A list of backend clusters."
          items:
            $ref: "#/components/schemas/BackendCluster"
        listeners:
          type: object
          description: |
            Listener configuration on which port proxy serves the traffic.
            VirtualCluster is then configured to use either all port listeners or all SNI listeners.
          properties:
            port:
              type: array
              items:
                $ref: "#/components/schemas/PortListener"
            sni:
              type: array
              items:
                $ref: "#/components/schemas/SNIListener"
      required: [ virtual_clusters, backend_clusters ]
    PortListener:
      type: object
      required: [ listen_address, listen_port_start ]
      description: "Listeners based on opening port for each virtual broker of virtual clusters configured with port routing"
      properties:
        listen_address:
          type: string
          description: "IP address virtual brokers listen on."
          example: "127.0.0.1"
        advertised_host:
          type: string
          description: |
            Virtual brokers configured with port routing are advertised to clients using this host. Any kind of host supported by kafka can be used.
            If not defined, it's listen_address. If listen_address is 0.0.0.0 it's the destination IP of the TCP connection.
          pattern: ""
        listen_port_start:
          type: integer
          format: int32
          description: |
            Starting port from which the proxy will start virtual brokers for virtual clusters configured with port routing.
            Proxy takes into account offset, min_broker_id configured on virtual cluster to start listening on specific port.
            Specific port is computed by listen_port_start + offset + id - min_broker_id
          minimum: 1024
          maximum: 65535
    SNIListener:
      type: object
      description: "Listeners based on TLS SNI routing that expose virtual clusters configured with SNI routing"
      required: [ listen_address, listen_port, cert, key ]
      properties:
        listen_address:
          type: string
          description: "IP address virtual brokers listen on."
          example: "127.0.0.1"
        listen_port:
          type: integer
          format: int32
          description: "Port on which virtual brokers listen on."
          minimum: 1024
          maximum: 65535
        cert:
          $ref: "#/components/schemas/DataSource"
        key:
          $ref: "#/components/schemas/Secret"
        advertised_port:
          type: integer
          format: int32
          description: |
            Virtual brokers are advertised to clients with this port instead of listen_port.
            Useful when proxy is behind loadbalancer listening on different port
          minimum: 1024
          maximum: 65535
        sni_suffix:
          type: string
          description: |
            Optional suffix for TLS SNI validation.
            This suffix will be concatenated with the virtual cluster name to form the base name for the SNI.
            If not provided, the virtual cluster name will be used as the base name for the SNI.
            For example with sni_suffix: `.example.com` and virtual cluster name: `my-cluster`, the SNI will be `my-cluster.example.com`.
            A bootstrap host will be `bootstrap.my-cluster.example.com` and then each brokers will be `broker0.my-cluster.example.com`, `broker1.my-cluster.example.com`, etc.
            This means that your deployment will need to have a wildcard certificate for the domain and a DNS resolver that routes `*.my-cluster.example.com` to the proxy.
    Policy:
      type: object
      description: "Policies are functionality used to alter traffic between clients and KNEP or KNEP and backend brokers."
      oneOf:
        - $ref: "#/components/schemas/ModifyHeadersPolicy"
        - $ref: "#/components/schemas/EncryptPolicy"
        - $ref: "#/components/schemas/DecryptPolicy"
        - $ref: "#/components/schemas/SchemaValidationPolicy"
    EntityName:
      type: string
      description: "A valid entity name following DNS label constraints."
      minLength: 1
      maxLength: 63
      pattern: "^[a-z0-9]([a-z0-9\\-]{0,61}[a-z0-9])?$" # DNS label
    VirtualCluster:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/EntityName"
        backend_cluster_name:
          type: string
          description: "The name of the BackendCluster."
        route_by:
          type: object
          required: [type]
          properties:
            type:
              type: string
              description: "The type of routing. SNI is a recommended setup for production."
              enum: [port, sni]
            port:
              type: object
              description: |
                In this mode, every broker gets a canonical port at the config that depends on the broker node ID.
                The port is calculated as listeners.port.listen_port_start + offset + id - min_broker_id.
                For example, if there are 3 brokers (id=0, id=1, id=2) and we picked 9092 as listeners.port.listen_port_start and offset 100
                then we open 3 ports: 9192, 9193, 9194.
                This is less flexible when it comes to configuring load balancers, but it does not require TLS, so it might be easier to start.
              properties:
                offset:
                  type: integer
                  description: "The proxy opens as many ports as there are brokers, starting from offset + listener port in PortListener"
                min_broker_id:
                  type: integer
                  description: "The lowest broker node ID in the cluster."
                bootstrap_port:
                  type: string
                  enum: [none, at_offset]
                  description: |
                    If set to at_offset, it opens an additional bootstrap port at listener_port_start + offset.
                    It provides a stable endpoint to use as bootstrap_server for clients, regardless of broker IDs in the cluster.
                    Additionally, it offsets all ports by one, so for example, if there are 3 brokers (id=0, id=1, id=2) and we picked 9092 as listeners.port.listen_port_start and offset 100
                    then we open 4 ports: 9192 (bootstrap), 9193 (id=0), 9294 (id=1), 9295 (id=2)
              required: [ min_broker_id ]
        rewrite_ids:
          type: object
          description: How to handle transaction and consumer group ids
          required: [type]
          properties:
            type:
              type: string
              enum: [disabled, prefix]
              default: disabled
        topic_rewrite:
          $ref: "#/components/schemas/TopicRewrite"
        limits:
          $ref: "#/components/schemas/VirtualClusterLimits"
        consume_policies:
          type: array
          description: "KNEP applies these policies when forwarding Fetch messages to clients. Entries are checked in sequential order and every entry where match evaluates to true is applied."
          minItems: 1
          items:
            $ref: "#/components/schemas/VirtualClusterConsumePolicyMatch"
        produce_policies:
          type: array
          description: "KNEP applies these policies when forwarding Produce messages to brokers. Entries are checked in sequential order and every entry where match evaluates to true is applied."
          minItems: 1
          items:
            $ref: "#/components/schemas/VirtualClusterProducePolicyMatch"
        authentication:
          type: array
          description: |
            How to handle authentication from clients to KNEP.
            It tries to authenticate with every rule sequentially one by one.
            It succeeds on the first match, but fails if no rule matches.
          minItems: 1
          items:
            $ref: "#/components/schemas/VirtualClusterAuthentication"
      required: [name, backend_cluster_name, route_by]
    VirtualClusterConsumePolicyMatch:
      type: object
      description: "If match evaluates to true, all policies are applied."
      required: [policies]
      properties:
        match:
          description: "An ATC expression compatible with KNEP. See https://docs.konghq.com/gateway/latest/reference/expressions-language/language-references for more information about ATC."
          type: string
          format: kong-atc@1.7
        policies:
          description: "Policies are applied in sequential order."
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/VirtualClusterConsumePolicy"
    VirtualClusterConsumePolicy:
      type: object
      description: "A policy that is applied to Fetch messages."
      required: [type]
      oneOf:
        - type: object
          description: "Defines a policy inline where it's being applied"
          required: [type, policy]
          properties:
            type:
              type: string
              enum: [policy]
            policy:
              $ref: "#/components/schemas/ConsumePolicy"
        - type: object
          description: "Refer to a previously defined top-level policy"
          required: [type, ref_name]
          properties:
            type:
              type: string
              enum: [ref_name]
            ref_name:
              $ref: "#/components/schemas/EntityName"
    VirtualClusterProducePolicyMatch:
      type: object
      description: "If match evaluates to true, all policies are applied."
      required: [policies]
      properties:
        match:
          description: "An ATC expression compatible with KNEP. See https://docs.konghq.com/gateway/latest/reference/expressions-language/language-references for more information about ATC."
          type: string
          format: kong-atc@1.7
        policies:
          description: "Policies are applied in sequential order."
          type: array
          minItems: 1
          items:
           $ref: "#/components/schemas/VirtualClusterProducePolicy"
    VirtualClusterProducePolicy:
      type: object
      description: "A policy that is applied to Produce messages."
      required: [type]
      oneOf:
        - type: object
          description: "Defines a policy inline where it's being applied"
          required: [type, policy]
          properties:
            type:
              type: string
              enum: [policy]
            policy:
              $ref: "#/components/schemas/ProducePolicy"
        - type: object
          description: "Refer to a previously defined top-level policy"
          required: [type, ref_name]
          properties:
            type:
              type: string
              enum: [ref_name]
            ref_name:
              $ref: "#/components/schemas/EntityName"
    ConsumePolicy:
      type: object
      description: "A policy that is applied to Fetch messages."
      oneOf:
        - $ref: "#/components/schemas/ModifyHeadersPolicy"
        - $ref: "#/components/schemas/DecryptPolicy"
        - $ref: "#/components/schemas/SchemaValidationPolicy"
    ProducePolicy:
      type: object
      description: "A policy that is applied to Produce messages."
      oneOf:
        - $ref: "#/components/schemas/ModifyHeadersPolicy"
        - $ref: "#/components/schemas/EncryptPolicy"
        - $ref: "#/components/schemas/SchemaValidationPolicy"
    ModifyHeadersPolicy:
      type: object
      description: "Set or remove record headers"
      required: [name, type, spec]
      properties:
        name:
          $ref: "#/components/schemas/EntityName"
        type:
          type: string
          enum: [modify_headers]
        spec:
          required: [actions]
          type: object
          properties:
            actions:
              description: "Actions are run in sequential order."
              type: array
              minItems: 1
              items:
                type: object
                required: [type]
                properties:
                  type:
                    type: string
                    enum: [remove, set]
                  remove:
                    type: array
                    items:
                      type: object
                      description: "Headers to remove by key."
                      properties:
                        key:
                          type: string
                      required: [key]
                  set:
                    type: array
                    description: "Add key and value to headers or overwrite if the key exists."
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                      required: [key, value]
    KeySource:
      type: object
      description: "Describes how to find a symmetric key for encryption or decryption."
      oneOf:
        - type: object
          description: "Use a static, user-provided key."
          required: [name, type, static]
          properties:
            name:
              $ref: "#/components/schemas/EntityName"
            type:
              type: string
              enum: [static]
            static:
              type: array
              description: "A list of keys"
              minItems: 1
              items:
                type: object
                required: [id, key]
                properties:
                  id:
                    type: string
                  key:
                    $ref: "#/components/schemas/ByteSecret"
        - type: object
          description: "Configuration for using the AWS KMS API."
          required: [name, type, aws]
          properties:
            name:
              $ref: "#/components/schemas/EntityName"
            type:
              type: string
              enum: [aws]
            aws:
              type: object
              required: [credentials]
              properties:
                credentials:
                  type: object
                  description: "AWS API credentials"
                  oneOf:
                    - type: object
                      description: "Load credentials from the environment. See https://docs.aws.amazon.com/sdk-for-rust/latest/dg/credproviders.html#credproviders-default-credentials-provider-chain for more information about how credential retrieval."
                      required: [type]
                      properties:
                        type:
                          type: string
                          enum: [env]
    VirtualClusterKeySource:
      type: object
      description: "Describes how to find a symmetric key for encryption or decryption."
      oneOf:
        - type: object
          description: "Refers to a top-level configured key source."
          required: [type, ref_name]
          properties:
            type:
              type: string
              enum: [ref_name]
            ref_name:
              $ref: "#/components/schemas/EntityName"
        - $ref: "#/components/schemas/KeySource"
    EncryptionRecordSelector:
      type: object
      description: "Defines how to select part of a record for encryption as well as what key to encrypt it with."
      oneOf:
        - type: object
          description: "Encrypt the record key"
          required: [type, id]
          properties:
            type:
              type: string
              enum: [key]
            id:
              type: string
              format: uri
        - type: object
          description: "Encrypt the record value"
          required: [type, id]
          properties:
            type:
              type: string
              enum: [value]
            id:
              type: string
              format: uri
    DecryptionRecordSelector:
      type: object
      description: "Defines how to select part of a record for decryption."
      oneOf:
        - type: object
          description: "Decrypt the record key"
          required: [type]
          properties:
            type:
              type: string
              enum: [key]
        - type: object
          description: "Decrypt the record value"
          required: [type]
          properties:
            type:
              type: string
              enum: [value]
    EncryptDecryptFailure:
      type: object
      description: "Describes how to handle failing encryption or decryption."
      required: [mode]
      properties:
        mode:
          type: string
          description: |
            Use `error` if the record should be rejected if encryption or decryption fails.
            Use `passthrough` to ignore encryption or decryption failure and continue proxying the record.
          enum: [error, passthrough]
    EncryptPolicy:
      type: object
      description: "This policy can be used to encrypt portions of Kafka records"
      required: [name, type, spec]
      properties:
        name:
          $ref: "#/components/schemas/EntityName"
        type:
          type: string
          enum: [encrypt]
        spec:
          required: [failure, key_sources, encrypt]
          type: object
          properties:
            failure:
              $ref: "#/components/schemas/EncryptDecryptFailure"
            key_sources:
              type: array
              description: "Sources for finding keys to encrypt records."
              minItems: 1
              items:
                $ref: "#/components/schemas/VirtualClusterKeySource"
            encrypt:
              type: array
              description: "Describes what parts of a record to encrypt."
              minItems: 1
              items:
                $ref: "#/components/schemas/EncryptionRecordSelector"
    DecryptPolicy:
      type: object
      description: "This policy can be used to decrypt portions of Kafka records"
      required: [name, type, spec]
      properties:
        name:
          $ref: "#/components/schemas/EntityName"
        type:
          type: string
          enum: [decrypt]
        spec:
          required: [failure, key_sources, decrypt]
          type: object
          properties:
            failure:
              $ref: "#/components/schemas/EncryptDecryptFailure"
            key_sources:
              type: array
              description: "Sources for finding keys to decrypt records."
              minItems: 1
              items:
                $ref: "#/components/schemas/VirtualClusterKeySource"
            decrypt:
              type: array
              description: "Describes what parts of a record to decrypt."
              minItems: 1
              items:
                $ref: "#/components/schemas/DecryptionRecordSelector"
    SchemaRegistry:
      type: object
      description: Configuration of schema registry that can be then referenced in schema_validation policy.
      required: [name, type]
      properties:
        name:
          $ref: "#/components/schemas/EntityName"
        type:
          type: string
          enum: [confluent, json]
          description: |
            * confluent - validates against confluent schema registry.
            * json - simple JSON parsing without the schema.
        confluent:
          $ref: "#/components/schemas/ConfluentSchemaRegistry"
    ConfluentSchemaRegistry:
      description: Configuration of [Confluent Schema Registry](https://github.com/confluentinc/schema-registry).
      required: [endpoint, schema_type]
      properties:
        schema_type:
          type: string
          enum: [avro, json]
          default: avro
          description: Type of schema to use.
        endpoint:
          type: string
          format: uri
          description: URL for schema registry endpoint.
          minLength: 1
        timeout:
          type: string
          format: duration
          default: "10s"
          description: Total time from establishing connection to receive a response from schema registry.
        authentication:
          description: How to authenticate to the schema registry.
          required: [type]
          properties:
            type:
              type: string
              enum: [basic_auth]
            basic_auth:
              type: object
              description: |
                Connections are authenticated using basic authentication.
                https://docs.confluent.io/platform/current/security/authentication/http-basic-auth/overview.html#schema-registry
                In case of Confluent Cloud a username is API key and a password is API secret.
              required: [username, password]
              properties:
                username:
                  $ref: "#/components/schemas/DataSource"
                password:
                  $ref: "#/components/schemas/Secret"
    SchemaValidationPolicy:
      type: object
      description: This policy can be used to validate record using schema.
      required: [name, type, spec]
      properties:
        name:
          $ref: "#/components/schemas/EntityName"
        type:
          type: string
          enum: [schema_validation]
        spec:
          type: object
          properties:
            record_key:
              $ref: "#/components/schemas/SchemaValidationAction"
            record_value:
              $ref: "#/components/schemas/SchemaValidationAction"
    SchemaValidationAction:
      type: object
      description: Configuration of validation of part of the record.
      required: [schema_registry_name, failure_action]
      properties:
        schema_registry_name:
          $ref: "#/components/schemas/EntityName"
        failure_action:
          type: string
          enum: [reject, mark, skip]
    VirtualClusterLimits:
      type: object
      description: "Limits on a virtual cluster. The limits are not shared between multiple instances of KNEP."
      properties:
        connections:
          type: integer
          default: 1000
          minimum: 1
          description: "The number of connections that a virtual cluster can accept."
    TopicRewrite:
      type: object
      description: Defines a strategy for rewriting names virtual topics.
      required: [type]
      properties:
        type:
          type: string
          enum: [prefix, cel]
          description: Type of renaming rule.
        prefix:
          type: object
          required: [value]
          properties:
            value:
              type: string
              minLength: 1
              description: |
                A prefix that is added to a backend topic name.
                If a response contains a topic without a prefix, it's omitted from the response.
        cel:
          type: object
          required: [virtual_to_backend_expression, backend_to_virtual_expression]
          description: |
            Common Expression Language expression for topic rewriting.
            See docs for more https://github.com/google/cel-spec
            The playground is available here https://playcel.undistro.io/
            backend_to_virtual_expression has to be a reverse function to virtual_to_backend_expression.
            Failure to implement it may result in undefined behaviour.
          properties:
            virtual_to_backend_expression:
              type: string
              minLength: 1
              example: 'topic.name + "-suffix"'
              description: |
                The provided variable is topic object with name field that indicates virtual topic name.
                It's expected that the expression evaluates to a string - a backend topic name.
                If expression fails or evaluates to empty string, the request fails.
            backend_to_virtual_expression:
              type: string
              minLength: 1
              example: 'topic.name.endsWith("-suffix") ? topic.name.substring(0, size(topic.name) - size("-suffix")) : ""'
              description: |
                The provided variable is topic object with name field that indicates backend topic name.
                It's expected that the expression evaluates to a string - a virtual topic name.
                If expression evaluates to empty string, it's omitted from the response.
    VirtualClusterAuthentication:
      type: object
      description: Configuration of authentication expected from clients that connects to a virtual cluster.
      oneOf:
        - $ref: "#/components/schemas/VirtualClusterAuthenticationAnonymous"
        - $ref: "#/components/schemas/VirtualClusterAuthenticationSaslPlain"
        - $ref: "#/components/schemas/VirtualClusterAuthenticationSaslScramSha256"
        - $ref: "#/components/schemas/VirtualClusterAuthenticationSaslScramSha512"
        - $ref: "#/components/schemas/VirtualClusterAuthenticationSaslOauthBearer"
    VirtualClusterAuthenticationMediation:
      type: object
      required: [ type ]
      description: Mediates authentication to the backend cluster
      properties:
        type:
          type: string
          description: |
            Methods to mediate authentication:
            * forward - pass authentication from the client through proxy to the backend cluster
            * anonymous - terminate authentication at the proxy level and do not authenticate connection to the backend cluster
            * use_backend_cluster - terminate authentication at the proxy level and originate authentication to the backend cluster
              using the configuration defined at backend_cluster#authentication
          enum: [ forward, anonymous, use_backend_cluster ]
    VirtualClusterAuthenticationAnonymous:
      type: object
      description: |
        Requires clients to not provide any authentication when connecting to the proxy.
        You cannot use "forward" mediation type because there is nothing to forward.
      required: [ type, mediation ]
      properties:
        type:
          type: string
          enum: [ anonymous ]
        mediation:
          $ref: "#/components/schemas/VirtualClusterAuthenticationMediation"
    VirtualClusterAuthenticationSaslPlain:
      type: object
      description: |
        Requires SASL PLAIN authentication from the clients connecting to the proxy.
        You can only use "forward" mediation type because proxy on its own cannot terminate this authentication method.
      required: [ type, mediation ]
      properties:
        type:
          type: string
          enum: [ sasl_plain ]
        mediation:
          $ref: "#/components/schemas/VirtualClusterAuthenticationMediation"
        sasl_plain:
          type: object
          description: |
            List of principals to be able to authenticate with. When defined gateway will terminate authentication.
            You can only use it with "anonymous" or "use_backend_cluster" mediation.
          required: [ principals ]
          properties:
            principals:
              type: array
              items:
                type: object
                minLength: 1
                required: [ username, password ]
                properties:
                  username:
                    $ref: "#/components/schemas/DataSource"
                  password:
                    $ref: "#/components/schemas/Secret"
    VirtualClusterAuthenticationSaslScramSha256:
      type: object
      description: |
        Requires SASL SCRAM-SHA-256 authentication from the clients connecting to the proxy.
        You can only use "forward" mediation type because proxy on its own cannot terminate this authentication method.
      required: [ type, mediation ]
      properties:
        type:
          type: string
          enum: [ sasl_scram_sha256 ]
        mediation:
          $ref: "#/components/schemas/VirtualClusterAuthenticationMediation"
    VirtualClusterAuthenticationSaslScramSha512:
      type: object
      description: |
        Requires SASL SCRAM-SHA-512 authentication from the clients connecting to the proxy.
        You can only use "forward" mediation type because proxy on its own cannot terminate this authentication method.
      required: [ type, mediation ]
      properties:
        type:
          type: string
          enum: [ sasl_scram_sha512 ]
        mediation:
          $ref: "#/components/schemas/VirtualClusterAuthenticationMediation"
    VirtualClusterAuthenticationSaslOauthBearer:
      type: object
      description: |
        Requires SASL OAUTHBEARER authentication from the clients connecting to the proxy.
        "sasl_oauth_bearer" is required depending on mediation type:
        * forward - not required, but if provided then proxy will validate token before forwarding it to the backend cluster
        * anonymous - required, because proxy terminates the authentication
        * use_backend_cluster - required, because proxy terminates the authentication
      required: [ type, mediation ]
      properties:
        type:
          type: string
          enum: [ sasl_oauth_bearer ]
        sasl_oauth_bearer:
          type: object
          description: Configuration for OAUTHBEARER authentication.
          required: [ jwks ]
          properties:
            claims_mapping:
              type: object
              description: Maps JWT claims in the case when sub and scope are presented as different claims in your JWT token.
              properties:
                sub:
                  type: string
                  description: Maps the subject claim.
                  minLength: 1
                scope:
                  type: string
                  description: Maps the scope claim.
                  minLength: 1
            jwks:
              type: object
              description: JSON Web Key Set configuration for verifying token signatures.
              required: [ endpoint ]
              properties:
                endpoint:
                  type: string
                  format: uri
                  description: URL for JWKS endpoint.
                  minLength: 1
                timeout:
                  type: string
                  default: "10s"
                  description: Total time from establishing connection to receive a response from JWKS endpoint.
                cache_expiration:
                  type: string
                  default: "1h"
                  description: Duration after which the gateway will fetch and cache JWKS.
            validate:
              type: object
              description: Validation rules.
              properties:
                audiences:
                  type: array
                  minLength: 1
                  items:
                    type: object
                    required: [ name ]
                    properties:
                      name:
                        type: string
                        minLength: 1
                  description: List of expected audience values. One of them has to match the audience claim in the token.
                issuer:
                  type: string
                  description: Expected token issuer in the token.
                  minLength: 1
        mediation:
          $ref: "#/components/schemas/VirtualClusterAuthenticationMediation"
    BackendCluster:
      type: object
      required: [name, bootstrap_servers]
      properties:
        name:
          $ref: "#/components/schemas/EntityName"
        bootstrap_servers:
          type: array
          description: "A list of cluster bootstrap servers in the format address:port."
          minItems: 1
          items:
            type: string
            description: "Endpoint in address:port format."
            pattern: "^(([a-zA-Z0-9\\.\\-]+)|\\[([a-fA-F0-9:]+)\\]):\\d+$"
            minLength: 1
        authentication:
          type: object
          description: |
            Configuration of authentication of proxy connecting to the backend cluster.
            It is used in two cases:
            * Proxy automatically discovering brokers by sending Metadata request to backend cluster
            * Virtual cluster authentication mediation configured to use_backend_cluster
          required: [ type ]
          properties:
            type:
              type: string
              enum: [ sasl_plain, sasl_scram_sha256, sasl_scram_sha512 ]
            sasl_plain:
              $ref: "#/components/schemas/BackendClusterAuthenticationSaslPlain"
            sasl_scram_sha256:
              $ref: "#/components/schemas/BackendClusterAuthenticationSaslScramSha256"
            sasl_scram_sha512:
              $ref: "#/components/schemas/BackendClusterAuthenticationSaslScramSha512"
        tls:
          type: object
          properties:
            insecure_skip_verify:
              type: boolean
              description: "If true, skip certificate verification. It's not secure to use for production."
              default: false
            ca_bundle:
              $ref: "#/components/schemas/DataSource"
            tls_versions:
              type: array
              description: "List of supported TLS versions."
              items:
                type: string
                enum: [tls12, tls13]
              default: [tls12, tls13]
          required: [insecure_skip_verify]
        metadata_update_interval:
          type: string
          description: "Interval for updating metadata. At least 1s."
          default: "60s"
    BackendClusterAuthenticationSaslPlain:
      description: "Configuration of SASL with PLAIN mechanism"
      required: [ username, password ]
      properties:
        username:
          $ref: "#/components/schemas/DataSource"
        password:
          $ref: "#/components/schemas/Secret"
    BackendClusterAuthenticationSaslScramSha256:
      description: "Configuration of SASL with SCRAM-SHA-256 mechanism"
      required: [ username, password ]
      properties:
        username:
          $ref: "#/components/schemas/DataSource"
        password:
          $ref: "#/components/schemas/Secret"
    BackendClusterAuthenticationSaslScramSha512:
      description: "Configuration of SASL with SCRAM-SHA-512 mechanism"
      required: [ username, password ]
      properties:
        username:
          $ref: "#/components/schemas/DataSource"
        password:
          $ref: "#/components/schemas/Secret"
    Secret:
      type: object
      required: [type]
      properties:
        type:
          type: string
          description: "The type of the secret."
          enum: [string, file]
        file:
          type: object
          required: [ "path" ]
          properties:
            path:
              type: string
              description: "The path to the file containing the secret."
              minLength: 1
        string:
          type: object
          required: [ "value" ]
          properties:
            value:
              type: string
              description: "The secret in a form of plaintext."
              minLength: 1
    ByteSecret:
      type: object
      description: "Holds raw bytes and is treated as a secret."
      required: [type]
      properties:
        type:
          type: string
          description: "Use bytes for inline data and file to read bytes from disk."
          enum: [bytes, file]
        file:
          type: object
          required: [path]
          properties:
            path:
              type: string
              description: "The path to the file containing the data."
              minLength: 1
        bytes:
          type: object
          required: [value]
          properties:
            value:
              type: string
              format: byte
    DataSource:
      type: object
      required: [type]
      properties:
        type:
          type: string
          description: "The type of the data source."
          enum: [string, file]
        file:
          type: object
          required: [ "path" ]
          properties:
            path:
              type: string
              description: "The path to the file containing the data."
              minLength: 1
        string:
          type: object
          required: [ "value" ]
          properties:
            value:
              type: string
              description: "The data in a form of plaintext."
              minLength: 1

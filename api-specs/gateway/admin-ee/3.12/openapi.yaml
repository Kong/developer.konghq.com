components:
    parameters:
        ACLId:
            description: ID of the ACL to lookup
            example: f28acbfa-c866-4587-b688-0208ac24df21
            in: path
            name: ACLId
            required: true
            schema:
                type: string
        AdminId:
            description: ID of the Admin to lookup
            example: ""
            in: path
            name: AdminId
            required: true
            schema:
                type: string
        AdminNameOrId:
            description: The admin's name or ID.
            in: path
            name: adminNameOrId
            required: true
            schema:
                example: 665b4070-541f-48bf-82c1-53030babaa81
                type: string
        BasicAuthId:
            description: ID of the Basic-auth credential to lookup
            example: 80db1b58-ca7c-4d21-b92a-64eb07725872
            in: path
            name: BasicAuthId
            required: true
            schema:
                type: string
        CACertificateId:
            description: ID of the CA Certificate to lookup
            example: 3c31f18a-f27a-4f9b-8cd4-bf841554612f
            in: path
            name: CACertificateId
            required: true
            schema:
                type: string
        CertificateId:
            description: ID of the Certificate to lookup
            example: ddf3cdaa-3329-4961-822a-ce6dbd38eff7
            in: path
            name: CertificateId
            required: true
            schema:
                type: string
        ConsumerGroupId:
            description: ID of the Consumer Group to lookup
            example: ""
            in: path
            name: ConsumerGroupId
            required: true
            schema:
                type: string
        ConsumerGroupIdManageConsumers:
            description: The UUID or name of the consumer group
            in: path
            name: ConsumerGroupId
            required: true
            schema:
                example: cf4c7e60-11db-49dd-b300-7c7e5f0f7e6b
                type: string
            x-speakeasy-name-override: consumer_group_id
        ConsumerIdForNestedEntities:
            description: Consumer ID for nested entities
            example: f28acbfa-c866-4587-b688-0208ac24df21
            in: path
            name: ConsumerIdForNestedEntities
            required: true
            schema:
                type: string
        ConsumerIdOrUsername:
            description: ID or username of the Consumer to lookup
            example: c1059869-6fa7-4329-a5f5-5946d14ca2c5
            in: path
            name: ConsumerIdOrUsername
            required: true
            schema:
                type: string
        CustomPluginIdOrName:
            description: ID or name of the CustomPlugin to lookup
            example: ""
            in: path
            name: CustomPluginIdOrName
            required: true
            schema:
                type: string
        Degraphql_routeIdOrName:
            description: ID or name of the Degraphql_route to lookup
            example: ""
            in: path
            name: Degraphql_routeIdOrName
            required: true
            schema:
                type: string
        Endpoint:
            description: Any available endpoint
            in: path
            name: endpoint
            required: true
            schema:
                example: key
                type: string
        GroupId:
            description: ID of the Group to lookup
            example: ""
            in: path
            name: GroupId
            required: true
            schema:
                type: string
        GroupIdOrName:
            description: The group's name or ID.
            in: path
            name: GroupIdOrName
            required: true
            schema:
                type: string
        HMACAuthId:
            description: ID of the HMAC-auth credential to lookup
            example: 70e7b00b-72f2-471b-a5ce-9c4171775360
            in: path
            name: HMACAuthId
            required: true
            schema:
                type: string
        JWTId:
            description: ID of the JWT to lookup
            example: 4a7f5faa-8c96-46d6-8214-c87573ef2ac4
            in: path
            name: JWTId
            required: true
            schema:
                type: string
        Key:
            description: The cache key to retrieve.
            in: path
            name: key
            required: true
            schema:
                example: my-key
                type: string
        KeyAuthId:
            description: ID of the API-key to lookup
            example: ""
            in: path
            name: KeyAuthId
            required: true
            schema:
                type: string
        KeyIdOrName:
            description: ID or name of the Key to lookup
            example: bba22c06-a632-42be-a018-1b9ff357b5b9
            in: path
            name: KeyIdOrName
            required: true
            schema:
                type: string
        KeySetIdOrName:
            description: ID or name of the KeySet to lookup
            example: 6cc34248-50b4-4a81-9201-3bdf7a83f712
            in: path
            name: KeySetIdOrName
            required: true
            schema:
                type: string
        MTLSAuthId:
            description: ID of the MTLS-auth credential to lookup
            example: ""
            in: path
            name: MTLSAuthId
            required: true
            schema:
                type: string
        OidcJwkId:
            description: ID of the OIDC JWK to lookup
            example: ""
            in: path
            name: OidcJwkId
            required: true
            schema:
                type: string
        PaginationOffset:
            allowEmptyValue: true
            description: Offset from which to return the next set of resources. Use the value of the 'offset' field from the response of a list operation as input here to paginate through all the resources
            in: query
            name: offset
            schema:
                type: string
        PaginationSize:
            description: Number of resources to be returned.
            in: query
            name: size
            schema:
                default: 100
                maximum: 1000
                minimum: 1
                type: integer
        PaginationTagsFilter:
            allowEmptyValue: true
            description: A list of tags to filter the list of resources on. Multiple tags can be concatenated using ',' to mean AND or using '/' to mean OR.
            example: tag1,tag2
            in: query
            name: tags
            schema:
                type: string
        PartialId:
            description: ID of the Partial to lookup
            example: ""
            in: path
            name: PartialId
            required: true
            schema:
                type: string
        PluginId:
            description: ID of the Plugin to lookup
            example: 3473c251-5b6c-4f45-b1ff-7ede735a366d
            in: path
            name: PluginId
            required: true
            schema:
                type: string
        RbacNameOrId:
            description: The RBAC role name or UUID.
            in: path
            name: rbacNameOrId
            required: true
            schema:
                example: cf4c7e60-11db-49dd-b300-7c7e5f0f7e6b
                type: string
        RouteIdOrName:
            description: ID or name of the Route to lookup
            example: a4326a41-aa12-44e3-93e4-6b6e58bfb9d7
            in: path
            name: RouteIdOrName
            required: true
            schema:
                type: string
        SNIIdOrName:
            description: ID or name of the SNI to lookup
            example: 64c17a1a-b7d7-4a65-a5a4-42e4a7016e7f
            in: path
            name: SNIIdOrName
            required: true
            schema:
                type: string
        ServiceIdOrName:
            description: ID or name of the Service to lookup
            example: 7fca84d6-7d37-4a74-a7b0-93e576089a41
            in: path
            name: ServiceIdOrName
            required: true
            schema:
                type: string
        Tag:
            description: The name of the tag.
            in: path
            name: tag
            required: true
            schema:
                type: string
        TargetIdOrTarget:
            description: ID or target of the Target to lookup
            example: 5a078780-5d4c-4aae-984a-bdc6f52113d8
            in: path
            name: TargetIdOrTarget
            required: true
            schema:
                type: string
        UpstreamIdForTarget:
            description: ID or target of the Target to lookup
            example: 5a078780-5d4c-4aae-984a-bdc6f52113d8
            in: path
            name: UpstreamIdForTarget
            required: true
            schema:
                type: string
        UpstreamIdOrName:
            description: ID or name of the Upstream to lookup
            example: 426d620c-7058-4ae6-aacc-f85a3204a2c5
            in: path
            name: UpstreamIdOrName
            required: true
            schema:
                type: string
        VaultIdOrPrefix:
            description: ID or prefix of the Vault to lookup
            example: 9d4d6d19-77c6-428e-a965-9bc9647633e9
            in: path
            name: VaultIdOrPrefix
            required: true
            schema:
                type: string
        Workspace:
            description: The name or UUID of the workspace
            in: path
            name: workspace
            required: true
            schema:
                example: 747d1e5-8246-4f65-a939-b392f1ee17f8
                format: uuid
                type: string
        WorkspaceIdOrName:
            description: ID or name of the Workspace to lookup
            example: ""
            in: path
            name: WorkspaceIdOrName
            required: true
            schema:
                type: string
        WorkspaceNameOrId:
            in: path
            name: workspaceNameOrId
            required: true
            schema:
                description: The workspace name or UUID.
                example: cf4c7e60-11db-49dd-b300-7c7e5f0f7e6b
                type: string
        afterAuditLogFilter:
            description: Filter logs after a specific timestamp.
            in: query
            name: after
            schema:
                format: date-time
                type: string
        beforeAuditLogFilter:
            description: Filter logs before a specific timestamp.
            in: query
            name: before
            schema:
                format: date-time
                type: string
        licenseId:
            description: The ID of the license
            in: path
            name: licenseId
            required: true
            schema:
                type: string
        pagination-offset:
            description: Offset for pagination.
            in: query
            name: offset
            schema:
                type: integer
        pagination-size:
            description: Number of items to return per page.
            in: query
            name: size
            schema:
                type: integer
        pagination-tags-filter:
            description: Filter Plugins by tags.
            in: query
            name: tags
            schema:
                type: string
    requestBodies:
        AddWebhook:
            content:
                application/json:
                    examples:
                        Example 2:
                            value:
                                config.headers:
                                    headers: string
                                config.secret: string
                                config.ssl_verify: string
                                config.url: https://webhook.site/a1b2c3-d4e5-g6h7-i8j9-k1l2m3n4o5p6
                                event: consumers
                                handler: webhook
                                on_change: true
                                snooze: 0
                                source: crud
                    schema:
                        properties:
                            config.headers:
                                description: |
                                    An object defining additional HTTP headers to send in the webhook request. For example `{"X-Custom-Header": "My Value"}`.
                                properties:
                                    headers:
                                        description: |
                                            Optional configuration header
                                        type: string
                                type: object
                            config.secret:
                                description: |
                                    An optional string used to sign the remote webhook for remote verification. When set, Kong signs the body of the event hook with HMAC-SHA1 and includes it in a header, `x-kong-signature`, sent to the remote endpoint.
                                type: string
                            config.ssl_verify:
                                description: |
                                    A boolean indicating whether to verify the SSL certificate of the remote HTTPS server where the event hook will be sent. The default is false.
                                type: string
                            config.url:
                                description: |
                                    The URL the JSON POST request is made to with the event data as the payload.
                                example: https://webhook.site/a1b2c3-d4e5-g6h7-i8j9-k1l2m3n4o5p6
                                type: string
                            event:
                                description: |
                                    A string describing the Kong entity the event hook listens to for events.
                                example: consumers
                                type: string
                            handler:
                                description: |
                                    A string describing one of four handler options: webhook, webhook-custom, log, or lambda.
                                example: webhook
                                type: string
                            on_change:
                                description: |
                                    An optional boolean indicating whether to trigger an event when key parts of a payload have changed.
                                type: boolean
                            snooze:
                                default: 0
                                description: |
                                    An optional integer describing the time in seconds to delay an event trigger to avoid spamming an integration.
                                example: 0
                                type: integer
                            source:
                                description: |
                                    A string describing the action that triggers the event hook.
                                example: crud
                                type: string
                        required:
                            - handler
                            - source
                            - config.url
                        type: object
            description: Request body for adding a webhook
        AdminCreationRequest:
            content:
                application/json:
                    schema:
                        properties:
                            custom_id:
                                description: The admin's custom ID
                                type: string
                            email:
                                description: The admin's email address.
                                example: email@example.com
                                type: string
                            rbac_token_enabled:
                                default: true
                                description: Allows the admin to use and reset their RBAC token.
                                type: boolean
                            username:
                                description: The admin's username
                                example: myusername
                                type: string
                        type: object
            description: Request body schema for creating an admin.
        AdminCredentialRegistrationRequest:
            content:
                application/json:
                    schema:
                        properties:
                            email:
                                format: email
                                type: string
                            password:
                                format: password
                                type: string
                            token:
                                type: string
                            username:
                                type: string
                        type: object
            description: Request body schema for registering an admin's credentials.
        AdminPasswordResetConfirmationRequest:
            content:
                application/json:
                    schema:
                        properties:
                            email:
                                type: string
                            password:
                                type: string
                            token:
                                type: string
                        type: object
            description: Request body schema for resetting an admin's password.
        AdminPasswordResetRequest:
            content:
                application/json:
                    schema:
                        properties:
                            email:
                                description: The registered admin's email.
                                example: admin@example.com
                                type: string
                        type: object
            description: Request body schema for issuing a password reset email to a registered admin.
        AdminRoleUpdateRequest:
            content:
                application/json:
                    schema:
                        properties:
                            roles:
                                type: string
                        type: object
            description: Request body schema for creating or updating roles for an admin.
        CreateDeclarativeConfigRequest:
            content:
                application/json:
                    schema:
                        type: object
                application/yaml:
                    schema:
                        type: object
                multipart/form-data:
                    schema:
                        properties:
                            config:
                                description: Configuration file in JSON or YAML.
                                example: /path/to/<config-file>
                                format: binary
                                type: string
                        type: object
            description: Declarative configuration upload in JSON, YAML, or multipart format. This overwrites existing configuration.
        CreateKeyringImportRequest:
            content:
                application/json:
                    examples:
                        Example 1:
                            value: {}
                    schema:
                        properties:
                            id:
                                example: 8zgITLQh
                                type: string
                            key:
                                example: t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44=
                                type: string
                        type: object
            description: Import Keyring
        CreateKeyringRecoverRequest:
            content:
                multipart/form-data:
                    schema:
                        properties:
                            recovery_private_key:
                                description: Private key in PEM format used for recovery.
                                format: binary
                                type: string
                        type: object
            description: Recover lost encryption keys using a previously stored recovery key.
        CreateRoleEndpointPermissionRequest:
            content:
                application/json:
                    schema:
                        properties:
                            actions:
                                description: Actions permitted for this endpoint.
                                items:
                                    type: string
                                type: array
                            comment:
                                description: A comment describing the RBAC permission object.
                                type: string
                            endpoint:
                                description: The endpoint associated with this permission.
                                type: string
                            negative:
                                description: If true, explicitly disallows actions tied to this endpoint.
                                type: boolean
                            workspace:
                                description: The workspace associated with this permission.
                                type: string
                        type: object
            description: Add a role endpoint permission for the specified endpoint.
        CreateRoleEntityPermissionRequest:
            content:
                application/json:
                    schema:
                        description: If true, explicitly disallow the actions associated with the permissions tied to this resource. By default this value is false.
                        properties:
                            actions:
                                description: One or more actions associated with this permission.
                                type: string
                            comment:
                                description: A string describing the RBAC permission object
                                type: string
                            entity_id:
                                description: Type of the entity of a given `entity_id`.
                                type: string
                            entity_type:
                                description: One or more actions associated with this permission.
                                type: string
                            negative:
                                description: ID of the entity associated with this permission.
                                type: string
                        type: object
            description: The `entity_id` must be the ID of an entity in Kong. Use `*` to represent all entities in the system.
        CreateUserRoleAssignmentRequest:
            content:
                application/json:
                    schema:
                        properties:
                            roles:
                                description: Comma-separated list of role names to assign to the user.
                                type: string
                        type: object
            description: Assign one or more roles to a user.
        GroupRoleRequest:
            content:
                application/json:
                    schema:
                        properties:
                            rbac_role_id:
                                description: The ID of the RBAC role to assign.
                                example: 12773c9a-7f7c-45f2-bcea-5285eb18fd2f
                                type: string
                        required:
                            - rbac_role_id
                        type: object
            description: Request body schema for assigning or updating roles for a group.
        KeyringRequest:
            content:
                application/json:
                    schema:
                        properties:
                            id:
                                description: Unique key identifier.
                                example: 8zgITLQh
                                type: string
                            key:
                                description: Key material.
                                example: t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44=
                                type: string
                        type: object
            description: Request body schema for keyring operations.
        LicenseRequest:
            content:
                application/json:
                    schema:
                        properties:
                            id:
                                description: The unique ID of the license
                                type: string
                            key:
                                description: The license key
                                type: string
                        type: object
            description: The request body for license operations
            required: true
        PluginRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/PluginSchema'
            description: Request body schema for creating or updating a Plugin.
        RBACRequest:
            content:
                application/json:
                    schema:
                        properties:
                            comment:
                                description: |
                                    A string describing the RBAC user object.
                                type: string
                            enabled:
                                description: |
                                    A flag to enable or disable the user. By default, users are enabled.
                                type: string
                            name:
                                description: |
                                    The RBAC user name.
                                type: string
                            user_token:
                                description: The authentication token to be presented to the Admin API. The value will be hashed and cannot be fetched in plaintext.
                                type: string
                        type: object
        UpdateAdminRequest:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                email: string
                                name_or_id: string
                                rbac_token_enabled: true
                                username: string
                    schema:
                        properties:
                            email:
                                type: string
                            name_or_id:
                                type: string
                            rbac_token_enabled:
                                type: boolean
                            username:
                                type: string
                        type: object
                        x-examples:
                            Example 1:
                                email: test@test.com
                                name_or_id: 665b4070-541f-48bf-82c1-53030babaa81
                                rbac_token_enabled: true
                                username: test-renamed
            description: Update information about an admin.
        UpdateGroupRequest:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                comment: comment1
                                name: test-group
                    schema:
                        properties:
                            comment:
                                type: string
                            name:
                                type: string
                        type: object
            description: Update a group.
        UpdateGroupsRequest:
            content:
                application/json:
                    schema:
                        properties:
                            name:
                                type: string
                        type: object
        UpdateKeyringVaultSyncRequest:
            content:
                application/json:
                    schema:
                        properties:
                            token:
                                description: Optional Vault authentication token.
                                example: example-token
                                type: string
                        type: object
            description: Sync the keyring with Vault storage.
        UpdateRoleEntityPermissionRequest:
            content:
                application/json:
                    schema:
                        properties:
                            actions:
                                description: One or more actions associated with this permission.
                                type: string
                            negative:
                                description: |
                                    If true, explicitly disallow the actions associated with the permissions tied to this resource. By default this value is false.
                                type: boolean
                        type: object
            description: Update the actions and flags for an existing entity permission.
        ValidateEntitySchemaRequest:
            content:
                application/json:
                    schema:
                        additionalProperties: true
                        type: object
            description: Request body of a Koko entity to validate against its schema
        consumerGroupsConfigResponse:
            content:
                application/json:
                    schema:
                        properties:
                            config.limit:
                                description: |
                                    An array of one or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.
                                type: string
                            config.retry_after_jitter_max:
                                description: The upper bound of a jitter (random delay) in seconds to be added to the Retry-After header of denied requests (status = 429) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is 0; in this case, the Retry-After header is equal to the RateLimit-Reset header.
                                type: string
                            config.window_size:
                                description: |
                                    An array of one or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.
                                example: ' 10'
                                type: string
                            config.window_type:
                                default: sliding
                                description: |
                                    Set the time window type to either sliding (default) or fixed.
                                enum:
                                    - sliding
                                    - fixed
                                type: string
                        required:
                            - config.limit
                            - config.window_size
                        type: object
    responses:
        AdminRolesCreated:
            content:
                application/json:
                    schema:
                        properties:
                            roles:
                                items:
                                    properties:
                                        comment:
                                            type: string
                                        created_at:
                                            type: integer
                                        id:
                                            type: string
                                        is_default:
                                            type: boolean
                                        name:
                                            type: string
                                    type: object
                                type: array
                        type: object
            description: Created
        CacheEntryFoundResponse:
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                description: Cached value or a message.
                                type: string
                            ttl:
                                description: Time-to-live (TTL) of the cached entry.
                                type: integer
                        type: object
            description: Cached value found.
        CheckEndpointExistsResponse:
            description: No Content
            headers:
                Access-Control-Allow-Origin:
                    description: Indicates whether the resource can be accessed by any origin
                    example: '*'
                    schema:
                        type: string
                Connection:
                    description: Indicates whether the connection will be closed after the message is completed
                    example: keep-alive
                    schema:
                        enum:
                            - keep-alive
                            - close
                        type: string
                Content-Type:
                    description: The media type of the message content
                    example: text/html; charset=UTF-8
                    schema:
                        type: string
                Date:
                    description: The date and time at which the message was originated
                    example: Fri, 14 Apr 2023 17:38:29 GMT
                    schema:
                        type: string
                Server:
                    description: The software used by the origin server to handle the request
                    example: kong/3.2.2.0-enterprise-edition
                    schema:
                        type: string
                X-Kong-Admin-Latency:
                    description: The time taken to process the request on the server, in milliseconds
                    example: 5
                    schema:
                        type: integer
                X-Kong-Admin-Request-ID:
                    description: A unique identifier for the request, generated by Kong
                    example: aqETeVmkeiGnAMzdUT2JRWroB2myY1lB
                    schema:
                        type: string
        CreateDeclarativeConfigResponse:
            content:
                application/json:
                    schema:
                        type: object
            description: Created
        CreateGroupRolesResponse:
            content:
                application/json:
                    schema:
                        example:
                            group:
                                comment: Read access to all endpoints, across all workspaces
                                id: 7574eb1d-c9fa-46a9-bd3a-3f1b4b196287
                                name: read-only
                                updated_at: "2024-04-23T18:25:43Z"
                            rbac_role:
                                id: 7fdea5c8-2bfa-4aa9-9c21-7bb9e607186d
                                name: admin
                            workspace:
                                id: 99bd8d18-f5b6-410e-aefe-d75f4252f13c
                        properties:
                            group:
                                properties:
                                    comment:
                                        type: string
                                    id:
                                        type: string
                                    name:
                                        type: string
                                    updated_at:
                                        format: date-time
                                        type: string
                                type: object
                            rbac_role:
                                properties:
                                    id:
                                        type: string
                                    name:
                                        type: string
                                type: object
                            workspace:
                                properties:
                                    id:
                                        type: string
                                type: object
                        type: object
            description: Successfully created or updated roles.
        CreateGroupsResponse:
            content:
                application/json:
                    schema:
                        properties:
                            created_at:
                                format: date-time
                                type: string
                            id:
                                type: string
                            name:
                                type: string
                        type: object
            description: Successfully created the group
        CreateKeyringImportResponse:
            content:
                application/json:
                    schema:
                        properties:
                            consumer:
                                description: The consumer object.
                                properties:
                                    id:
                                        description: ID of the consumer object.
                                        example: 6375b5fd-9c95-4822-b2dd-80ffbccb7ec9
                                        type: string
                                type: object
                            created_at:
                                description: Datetime representation of the keyring creation date.
                                type: integer
                            id:
                                description: UUID of the keyring
                                example: 6375b5fd-9c95-4822-b2dd-80ffbccb7ec9
                                type: string
                            password:
                                description: Password associated with the keyring.
                                example: da61c0083b6d19ef3db2490d0da96a71572da0fa
                                type: string
                            username:
                                description: Username associated with the keyring
                                example: user
                                type: string
                        type: object
            description: OK
        CreateRoleEndpointPermissionResponse:
            content:
                application/json:
                    schema:
                        properties:
                            actions:
                                items:
                                    type: string
                                type: array
                            created_at:
                                type: integer
                            endpoint:
                                type: string
                            negative:
                                type: boolean
                            role:
                                properties:
                                    id:
                                        type: string
                                type: object
                            workspace:
                                type: string
                        type: object
            description: Created
        CreateRoleEntityPermissionResponse:
            content:
                application/json:
                    examples:
                        example-response:
                            value:
                                actions:
                                    - delete
                                    - create
                                    - read
                                created_at: 1.557771505e+09
                                entity_id: '*'
                                entity_type: wildcard
                                negative: false
                                role:
                                    id: bba049fa-bf7e-40ef-8e89-553dda292e99
                    schema:
                        properties:
                            actions:
                                items:
                                    type: string
                                type: array
                            created_at:
                                type: integer
                            entity_id:
                                type: string
                            entity_type:
                                type: string
                            negative:
                                type: boolean
                            role:
                                properties:
                                    id:
                                        type: string
                                type: object
                        type: object
            description: Created
        DatabaseAuditLogResponse:
            content:
                application/json:
                    schema:
                        items:
                            properties:
                                changes:
                                    description: Details of the database changes.
                                    type: object
                                id:
                                    description: Unique identifier for the database audit log.
                                    type: string
                                timestamp:
                                    description: Timestamp of the database log.
                                    format: date-time
                                    type: string
                            type: object
                        type: array
            description: A list of database audit logs.
        DuplicateApiKeyError:
            content:
                application/json:
                    example:
                        message: Duplicate API key found
                        status: 401
                    schema:
                        $ref: '#/components/schemas/UnauthorizedError'
            description: Duplicate API key found
        EventHooksResponse:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                data:
                                    - config:
                                        body: null
                                        body_format: true
                                        headers:
                                            content-type: application/json
                                        headers_format: false
                                        method: POST
                                        payload:
                                            text: payload_text
                                        payload_format: true
                                        secret: null
                                        ssl_verify: false
                                        url: https://hooks.slack.com/services/foo/bar/baz
                                      created_at: 1.627588552e+09
                                      event: admins
                                      handler: webhook-custom
                                      id: 937df175-3db2-4e6d-8aa1-d95c94a76089
                                      on_change: null
                                      snooze: null
                                      source: crud
                                    - config:
                                        headers: {}
                                        secret: null
                                        ssl_verify: false
                                        url: https://webhook.site/a1b2c3-d4e5-g6h7-i8j9-k1l2m3n4o5p6
                                      created_at: 1.627581575e+09
                                      event: consumers
                                      handler: webhook
                                      id: c57340ab-9fed-40fd-bb7e-1cef8d37c2df
                                      on_change: null
                                      snooze: null
                                      source: crud
                                    - config:
                                        functions:
                                            - |
                                              return function (data, event, source, pid)
                                                local user = data.entity.username
                                                error("Event hook on consumer " .. user .. "")
                                              end
                                      created_at: 1.627595513e+09
                                      event: consumers
                                      handler: lambda
                                      id: c9fdd58d-5416-4d3a-9467-51e5cfe4ca0e
                                      on_change: null
                                      snooze: null
                                      source: crud
                                next: null
                    schema:
                        properties:
                            data:
                                items:
                                    properties:
                                        config:
                                            properties:
                                                body:
                                                    type: string
                                                body_format:
                                                    type: boolean
                                                functions:
                                                    items:
                                                        type: string
                                                    type: array
                                                headers:
                                                    properties:
                                                        content-type:
                                                            type: string
                                                    type: object
                                                headers_format:
                                                    type: boolean
                                                method:
                                                    type: string
                                                payload:
                                                    properties:
                                                        text:
                                                            type: string
                                                    type: object
                                                payload_format:
                                                    type: boolean
                                                secret:
                                                    type: string
                                                ssl_verify:
                                                    type: boolean
                                                url:
                                                    type: string
                                            type: object
                                        created_at:
                                            type: integer
                                        event:
                                            type: string
                                        handler:
                                            type: string
                                        id:
                                            type: string
                                        on_change:
                                            type: string
                                        snooze:
                                            type: integer
                                        source:
                                            type: string
                                    type: object
                                type: array
                            next:
                                type: string
                        type: object
            description: Example event hooks response
        FIPS-response:
            content:
                application/json:
                    examples:
                        fips_disabled:
                            summary: FIPS mode is disabled or not supported. This may be the default state or result from a license configuration that does not enable FIPS mode.
                            value:
                                active: false
                                version: unknown
                        fips_enabled:
                            summary: FIPS mode is enabled. This may occur after a license configuration change that enables FIPS mode.
                            value:
                                active: true
                                version: 2.0.16
                    schema:
                        properties:
                            active:
                                description: Indicates if FIPS mode is currently active (true) or inactive (false).
                                type: boolean
                            version:
                                description: The version of the FIPS module, or 'unknown' if the version cannot be determined.
                                type: string
                        type: object
            description: FIPS mode status retrieved successfully.
        GetAdminResponse:
            content:
                application/json:
                    examples:
                        Example response body:
                            value:
                                created_at: 1.556638385e+09
                                email: test@test.com
                                id: 665b4070-541f-48bf-82c1-53030babaa81
                                rbac_token_enabled: true
                                status: 4
                                updated_at: 1.556638385e+09
                                username: test-admin
                    schema:
                        properties:
                            created_at:
                                type: integer
                            email:
                                type: string
                            id:
                                type: string
                            rbac_token_enabled:
                                type: boolean
                            status:
                                type: integer
                            updated_at:
                                type: integer
                            username:
                                type: string
                        type: object
                        x-examples:
                            Example 1:
                                created_at: 1.556638385e+09
                                email: test@test.com
                                id: 665b4070-541f-48bf-82c1-53030babaa81
                                rbac_token_enabled: true
                                status: 4
                                updated_at: 1.556638385e+09
                                username: test-admin
            description: OK
        GetConnectedDataPlaneStatusResponse:
            content:
                application/json:
                    schema:
                        additionalProperties:
                            properties:
                                config_hash:
                                    description: Hash of the configuration running on the data plane.
                                    type: string
                                hostname:
                                    description: Hostname of the data plane.
                                    type: string
                                ip:
                                    description: The IP address of the data plane.
                                    type: string
                                last_seen:
                                    description: Unix timestamp of the last interaction between the data plane and control plane.
                                    type: integer
                            type: object
                        type: object
            description: The status of all connected data planes.
            headers:
                Deprecation:
                    description: |
                        Indicates that the endpoint may be deprecated in the future.
                    schema:
                        type: string
        GetConnectedDataPlanesListResponse:
            content:
                application/json:
                    schema:
                        properties:
                            data:
                                items:
                                    properties:
                                        cert_details:
                                            properties:
                                                expiry_timestamp:
                                                    description: Timestamp for when the certificate expires.
                                                    type: integer
                                            type: object
                                        config_hash:
                                            description: The hash of the current configuration on the data plane.
                                            type: string
                                        hostname:
                                            description: The hostname of the data plane.
                                            type: string
                                        id:
                                            description: Unique identifier of the data plane.
                                            type: string
                                        ip:
                                            description: The IP address of the data plane.
                                            type: string
                                        labels:
                                            description: Metadata labels attached to the data plane.
                                            properties:
                                                deployment:
                                                    description: The deployment name.
                                                    type: string
                                                region:
                                                    description: The region of the data plane.
                                                    type: string
                                            type: object
                                        last_seen:
                                            description: Unix timestamp when the data plane was last seen by the control plane.
                                            type: integer
                                        sync_status:
                                            description: The sync status of the data plane.
                                            type: string
                                        ttl:
                                            description: Time-to-live for the connection.
                                            type: integer
                                        updated_at:
                                            description: Unix timestamp of the last update.
                                            type: integer
                                        version:
                                            description: The version of Kong running on the data plane.
                                            type: string
                                    type: object
                                type: array
                        type: object
            description: A list of connected data planes.
        GetDNSStatusResponse:
            content:
                application/json:
                    schema:
                        properties:
                            worker:
                                description: Worker details.
                                properties:
                                    count:
                                        description: Total number of workers.
                                        type: integer
                                    id:
                                        description: The worker ID.
                                        type: integer
                                type: object
                        type: object
            description: DNS worker and stats information
        GetDeclarativeConfigResponse:
            content:
                application/json:
                    schema:
                        properties:
                            config:
                                type: string
                        type: object
            description: OK
        GetEndpoints:
            content:
                application/json:
                    examples:
                        Get all endpoints:
                            value:
                                data:
                                    - /
                                    - /acls
                                    - /acls/{acls}
                                    - /acls/{acls}/consumer
                                    - /acme
                                    - /acme/certificates
                                    - /acme/certificates/{certificates}
                                    - /acme_storage
                                    - /acme_storage/{acme_storage}
                                    - /admins
                                    - /admins/password_resets
                                    - /admins/register
                                    - /admins/self/password
                                    - /admins/self/token
                                    - /admins/{admins}
                                    - /admins/{admins}/consumer
                                    - /admins/{admins}/rbac_user
                                    - /admins/{admin}/roles
                                    - /admins/{admin}/workspaces
                                    - /applications
                                    - /applications/{applications}
                                    - /applications/{applications}/application_instances
                                    - /applications/{applications}/application_instances/{application_instances}
                                    - /applications/{applications}/consumer
                                    - /applications/{applications}/credentials/{plugin}
                                    - /applications/{applications}/credentials/{plugin}/{credential_id}
                                    - /applications/{applications}/developer
                                    - /auth
                                    - /basic-auths
                                    - /basic-auths/{basicauth_credentials}
                                    - /basic-auths/{basicauth_credentials}/consumer
                                    - /ca_certificates
                                    - /ca_certificates/{ca_certificates}
                                    - /ca_certificates/{ca_certificates}/mtls_auth_credentials
                                    - /ca_certificates/{ca_certificates}/mtls_auth_credentials/{mtls_auth_credentials}
                                    - /cache
                                    - /cache/{key}
                                    - /certificates
                                    - /certificates/{certificates}
                                    - /certificates/{certificates}/services
                                    - /certificates/{certificates}/services/{services}
                                    - /certificates/{certificates}/snis
                                    - /certificates/{certificates}/snis/{snis}
                                    - /certificates/{certificates}/upstreams
                                    - /certificates/{certificates}/upstreams/{upstreams}
                                    - /clustering/data-planes
                                    - /clustering/status
                                    - /config
                                    - /consumer_groups
                                    - /consumer_groups/{consumer_groups}
                                    - /consumer_groups/{consumer_groups}/consumers
                                    - /consumer_groups/{consumer_groups}/consumers/{consumers}
                                    - /consumer_groups/{consumer_groups}/overrides/plugins/rate-limiting-advanced
                                    - /consumer_groups/{consumer_groups}/plugins
                                    - /consumer_groups/{consumer_groups}/plugins/{plugins}
                                    - /consumers
                                    - /consumers/{consumers}
                                    - /consumers/{consumers}/acls
                                    - /consumers/{consumers}/acls/{acls}
                                    - /consumers/{consumers}/admins
                                    - /consumers/{consumers}/admins/{admins}
                                    - /consumers/{consumers}/applications
                                    - /consumers/{consumers}/applications/{applications}
                                    - /consumers/{consumers}/basic-auth
                                    - /consumers/{consumers}/basic-auth/{basicauth_credentials}
                                    - /consumers/{consumers}/consumer_groups
                                    - /consumers/{consumers}/consumer_groups/{consumer_groups}
                                    - /consumers/{consumers}/developers
                                    - /consumers/{consumers}/developers/{developers}
                                    - /consumers/{consumers}/hmac-auth
                                    - /consumers/{consumers}/hmac-auth/{hmacauth_credentials}
                                    - /consumers/{consumers}/jwt
                                    - /consumers/{consumers}/jwt/{jwt_secrets}
                                    - /consumers/{consumers}/key-auth
                                    - /consumers/{consumers}/key-auth/{keyauth_credentials}
                                    - /consumers/{consumers}/key-auth-enc
                                    - /consumers/{consumers}/key-auth-enc/{keyauth_enc_credentials}
                                    - /consumers/{consumers}/login_attempts
                                    - /consumers/{consumers}/login_attempts/{login_attempts}
                                    - /consumers/{consumers}/mtls-auth
                                    - /consumers/{consumers}/mtls-auth/{mtls_auth_credentials}
                                    - /consumers/{consumers}/mtls_auth_credentials
                                    - /consumers/{consumers}/mtls_auth_credentials/{mtls_auth_credentials}
                                    - /consumers/{consumers}/oauth2
                                    - /consumers/{consumers}/oauth2/{oauth2_credentials}
                                    - /consumers/{consumers}/plugins
                                    - /consumers/{consumers}/plugins/{plugins}
                                    - /debug/cluster/log-level/{log_level}
                                    - /debug/node/log-level
                                    - /debug/node/log-level/{log_level}
                                    - /debug/profiling/cpu
                                    - /debug/profiling/gc-snapshot
                                    - /debug/profiling/memory
                                    - /degraphql_routes
                                    - /degraphql_routes/{degraphql_routes}
                                    - /degraphql_routes/{degraphql_routes}/service
                                    - /developers
                                    - /developers/export
                                    - /developers/invite
                                    - /developers/roles
                                    - /developers/roles/{rbac_roles}
                                    - /developers/{developers}
                                    - /developers/{developers}/applications
                                    - /developers/{developers}/applications/{applications}
                                    - /developers/{developers}/applications/{applications}/application_instances
                                    - /developers/{developers}/applications/{applications}/application_instances/{application_instances}
                                    - /developers/{developers}/applications/{applications}/credentials/{plugin}
                                    - /developers/{developers}/applications/{applications}/credentials/{plugin}/{credential_id}
                                    - /developers/{developers}/consumer
                                    - /developers/{developers}/credentials/{plugin}
                                    - /developers/{developers}/credentials/{plugin}/{credential_id}
                                    - /developers/{developers}/rbac_user
                                    - /developers/{emailOrId}/plugins/
                                    - /developers/{emailOrId}/plugins/{id}
                                    - /document_objects
                                    - /document_objects/{document_objects}
                                    - /document_objects/{document_objects}/service
                                    - /endpoints
                                    - /entities/migrate
                                    - /event-hooks
                                    - /event-hooks/sources
                                    - /event-hooks/sources/{source}
                                    - /event-hooks/sources/{source}/{event}
                                    - /event-hooks/{event_hooks}
                                    - /event-hooks/{event_hooks}/ping
                                    - /event-hooks/{event_hooks}/test
                                    - /files
                                    - /files/*
                                    - /files/partials/*
                                    - /files/{files}
                                    - /filter-chains
                                    - /filter-chains/{filter_chains}
                                    - /filter-chains/{filter_chains}/route
                                    - /filter-chains/{filter_chains}/service
                                    - /graphql-proxy-cache-advanced
                                    - /graphql-proxy-cache-advanced/{cache_key}
                                    - /graphql-proxy-cache-advanced/{plugin_id}/caches/{cache_key}
                                    - /graphql-rate-limiting-advanced/costs
                                    - /graphql-rate-limiting-advanced/costs/{graphql_ratelimiting_advanced_cost_decoration}
                                    - /graphql_ratelimiting_advanced_cost_decoration
                                    - /graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}
                                    - /graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}/service
                                    - /groups
                                    - /groups/{groups}
                                    - /groups/{groups}/roles
                                    - /hmac-auths
                                    - /hmac-auths/{hmacauth_credentials}
                                    - /hmac-auths/{hmacauth_credentials}/consumer
                                    - /jwt-signer/jwks
                                    - /jwt-signer/jwks/{jwt_signer_jwks}
                                    - /jwt-signer/jwks/{jwt_signer_jwks}/rotate
                                    - /jwts
                                    - /jwts/{jwt_secrets}
                                    - /jwts/{jwt_secrets}/consumer
                                    - /key-auths
                                    - /key-auths/{keyauth_credentials}
                                    - /key-auths/{keyauth_credentials}/consumer
                                    - /key-auths-enc
                                    - /key-auths-enc/{keyauth_enc_credentials}
                                    - /key-auths-enc/{keyauth_enc_credentials}/consumer
                                    - /key-sets
                                    - /key-sets/{key_sets}
                                    - /key-sets/{key_sets}/keys
                                    - /key-sets/{key_sets}/keys/{keys}
                                    - /keyring
                                    - /keyring/activate
                                    - /keyring/active
                                    - /keyring/export
                                    - /keyring/generate
                                    - /keyring/import
                                    - /keyring/import/raw
                                    - /keyring/recover
                                    - /keyring/remove
                                    - /keyring/vault/sync
                                    - /keys
                                    - /keys/{keys}
                                    - /keys/{keys}/set
                                    - /konnect_applications
                                    - /konnect_applications/{konnect_applications}
                                    - /license/report
                                    - /licenses
                                    - /licenses/{licenses}
                                    - /login_attempts
                                    - /login_attempts/{login_attempts}
                                    - /login_attempts/{login_attempts}/consumer
                                    - /metrics
                                    - /mtls-auths
                                    - /mtls-auths/{mtls_auth_credentials}/consumer
                                    - /mtls_auth_credentials
                                    - /mtls_auth_credentials/{mtls_auth_credentials}
                                    - /mtls_auth_credentials/{mtls_auth_credentials}/ca_certificate
                                    - /mtls_auth_credentials/{mtls_auth_credentials}/consumer
                                    - /oauth2
                                    - /oauth2/{oauth2_credentials}
                                    - /oauth2/{oauth2_credentials}/consumer
                                    - /oauth2/{oauth2_credentials}/oauth2_tokens
                                    - /oauth2/{oauth2_credentials}/oauth2_tokens/{oauth2_tokens}
                                    - /oauth2_tokens
                                    - /oauth2_tokens/{oauth2_tokens}
                                    - /oauth2_tokens/{oauth2_tokens}/credential
                                    - /oauth2_tokens/{oauth2_tokens}/service
                                    - /openid-connect/issuers
                                    - /openid-connect/issuers/{oic_issuers}
                                    - /openid-connect/jwks
                                    - /plugins
                                    - /plugins/enabled
                                    - /plugins/schema/{name}
                                    - /plugins/{plugins}
                                    - /plugins/{plugins}/consumer
                                    - /plugins/{plugins}/consumer_group
                                    - /plugins/{plugins}/route
                                    - /plugins/{plugins}/service
                                    - /proxy-cache
                                    - /proxy-cache/{cache_key}
                                    - /proxy-cache/{plugin_id}/caches/{cache_key}
                                    - /proxy-cache-advanced
                                    - /proxy-cache-advanced/{cache_key}
                                    - /proxy-cache-advanced/{plugin_id}/caches/{cache_key}
                                    - /rbac/roles
                                    - /rbac/roles/{rbac_roles}
                                    - /rbac/roles/{rbac_roles}/endpoints
                                    - /rbac/roles/{rbac_roles}/endpoints/permissions
                                    - /rbac/roles/{rbac_roles}/endpoints/{workspace}/*
                                    - /rbac/roles/{rbac_roles}/entities
                                    - /rbac/roles/{rbac_roles}/entities/permissions
                                    - /rbac/roles/{rbac_roles}/entities/{entity_id}
                                    - /rbac/roles/{rbac_roles}/permissions
                                    - /rbac/users
                                    - /rbac/users/{rbac_users}
                                    - /rbac/users/{rbac_users}/admins
                                    - /rbac/users/{rbac_users}/admins/{admins}
                                    - /rbac/users/{rbac_users}/developers
                                    - /rbac/users/{rbac_users}/developers/{developers}
                                    - /rbac/users/{rbac_users}/permissions
                                    - /rbac/users/{rbac_users}/roles
                                    - /routes
                                    - /routes/{routes}
                                    - /routes/{routes}/filter-chains
                                    - /routes/{routes}/filter-chains/{filter_chains}
                                    - /routes/{routes}/filters/all
                                    - /routes/{routes}/filters/disabled
                                    - /routes/{routes}/filters/enabled
                                    - /routes/{routes}/plugins
                                    - /routes/{routes}/plugins/{plugins}
                                    - /routes/{routes}/service
                                    - /schemas/plugins/validate
                                    - /schemas/plugins/{name}
                                    - /schemas/{db_entity_name}/validate
                                    - /schemas/{name}
                                    - /services
                                    - /services/{services}
                                    - /services/{services}/application_instances
                                    - /services/{services}/application_instances/{application_instances}
                                    - /services/{services}/applications
                                    - /services/{services}/client_certificate
                                    - /services/{services}/degraphql/routes
                                    - /services/{services}/degraphql/routes/{degraphql_routes}
                                    - /services/{services}/degraphql_routes
                                    - /services/{services}/degraphql_routes/{degraphql_routes}
                                    - /services/{services}/document_objects
                                    - /services/{services}/document_objects/{document_objects}
                                    - /services/{services}/filter-chains
                                    - /services/{services}/filter-chains/{filter_chains}
                                    - /services/{services}/graphql-rate-limiting-advanced/costs
                                    - /services/{services}/graphql_ratelimiting_advanced_cost_decoration
                                    - /services/{services}/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}
                                    - /services/{services}/oauth2_tokens
                                    - /services/{services}/oauth2_tokens/{oauth2_tokens}
                                    - /services/{services}/plugins
                                    - /services/{services}/plugins/{plugins}
                                    - /services/{services}/routes
                                    - /services/{services}/routes/{routes}
                                    - /sessions
                                    - /sessions/{sessions}
                                    - /snis
                                    - /snis/{snis}
                                    - /snis/{snis}/certificate
                                    - /status
                                    - /tags
                                    - /tags/{tags}
                                    - /targets
                                    - /targets/{targets}
                                    - /targets/{targets}/upstream
                                    - /timers
                                    - /upstreams
                                    - /upstreams/{upstreams}
                                    - /upstreams/{upstreams}/client_certificate
                                    - /upstreams/{upstreams}/health
                                    - /upstreams/{upstreams}/targets
                                    - /upstreams/{upstreams}/targets/all
                                    - /upstreams/{upstreams}/targets/{targets}
                                    - /upstreams/{upstreams}/targets/{targets}/healthy
                                    - /upstreams/{upstreams}/targets/{targets}/unhealthy
                                    - /upstreams/{upstreams}/targets/{targets}/{address}/healthy
                                    - /upstreams/{upstreams}/targets/{targets}/{address}/unhealthy
                                    - /userinfo
                                    - /vault-auth
                                    - /vault-auth/{vault_auth_vaults}
                                    - /vault-auth/{vault}/credentials
                                    - /vault-auth/{vault}/credentials/token/{access_token}
                                    - /vault-auth/{vault}/credentials/{consumer}
                                    - /vaults
                                    - /vaults/{vaults}
                                    - /vitals/
                                    - /vitals/cluster
                                    - /vitals/cluster/status_codes
                                    - /vitals/consumers/{consumer_id}/cluster
                                    - /vitals/nodes/
                                    - /vitals/nodes/{node_id}
                                    - /vitals/reports/{entity_type}
                                    - /vitals/status_code_classes
                                    - /vitals/status_codes/by_consumer
                                    - /vitals/status_codes/by_consumer_and_route
                                    - /vitals/status_codes/by_route
                                    - /vitals/status_codes/by_service
                                    - /workspaces
                                    - /workspaces/{workspaces}
                                    - /workspaces/{workspaces}/meta
                                    - /{workspace_name}/kong
                                    - workspace_/acls
                                    - workspace_/acls/{acls}
                                    - workspace_/acls/{acls}/consumer
                                    - workspace_/acme
                                    - workspace_/acme/certificates
                                    - workspace_/acme/certificates/{certificates}
                                    - workspace_/acme_storage
                                    - workspace_/acme_storage/{acme_storage}
                                    - workspace_/admins
                                    - workspace_/admins/password_resets
                                    - workspace_/admins/register
                                    - workspace_/admins/self/password
                                    - workspace_/admins/self/token
                                    - workspace_/admins/{admins}
                                    - workspace_/admins/{admins}/consumer
                                    - workspace_/admins/{admins}/rbac_user
                                    - workspace_/admins/{admin}/roles
                                    - workspace_/admins/{admin}/workspaces
                                    - workspace_/applications
                                    - workspace_/applications/{applications}
                                    - workspace_/applications/{applications}/application_instances
                                    - workspace_/applications/{applications}/application_instances/{application_instances}
                                    - workspace_/applications/{applications}/consumer
                                    - workspace_/applications/{applications}/credentials/{plugin}
                                    - workspace_/applications/{applications}/credentials/{plugin}/{credential_id}
                                    - workspace_/applications/{applications}/developer
                                    - workspace_/auth
                                    - workspace_/basic-auths
                                    - workspace_/basic-auths/{basicauth_credentials}
                                    - workspace_/basic-auths/{basicauth_credentials}/consumer
                                    - workspace_/ca_certificates
                                    - workspace_/ca_certificates/{ca_certificates}
                                    - workspace_/ca_certificates/{ca_certificates}/mtls_auth_credentials
                                    - workspace_/ca_certificates/{ca_certificates}/mtls_auth_credentials/{mtls_auth_credentials}
                                    - workspace_/cache
                                    - workspace_/cache/{key}
                                    - workspace_/certificates
                                    - workspace_/certificates/{certificates}
                                    - workspace_/certificates/{certificates}/services
                                    - workspace_/certificates/{certificates}/services/{services}
                                    - workspace_/certificates/{certificates}/snis
                                    - workspace_/certificates/{certificates}/snis/{snis}
                                    - workspace_/certificates/{certificates}/upstreams
                                    - workspace_/certificates/{certificates}/upstreams/{upstreams}
                                    - workspace_/clustering/data-planes
                                    - workspace_/clustering/status
                                    - workspace_/config
                                    - workspace_/consumer_groups
                                    - workspace_/consumer_groups/{consumer_groups}
                                    - workspace_/consumer_groups/{consumer_groups}/consumers
                                    - workspace_/consumer_groups/{consumer_groups}/consumers/{consumers}
                                    - workspace_/consumer_groups/{consumer_groups}/overrides/plugins/rate-limiting-advanced
                                    - workspace_/consumer_groups/{consumer_groups}/plugins
                                    - workspace_/consumer_groups/{consumer_groups}/plugins/{plugins}
                                    - workspace_/consumers
                                    - workspace_/consumers/{consumers}
                                    - workspace_/consumers/{consumers}/acls
                                    - workspace_/consumers/{consumers}/acls/{acls}
                                    - workspace_/consumers/{consumers}/admins
                                    - workspace_/consumers/{consumers}/admins/{admins}
                                    - workspace_/consumers/{consumers}/applications
                                    - workspace_/consumers/{consumers}/applications/{applications}
                                    - workspace_/consumers/{consumers}/basic-auth
                                    - workspace_/consumers/{consumers}/basic-auth/{basicauth_credentials}
                                    - workspace_/consumers/{consumers}/consumer_groups
                                    - workspace_/consumers/{consumers}/consumer_groups/{consumer_groups}
                                    - workspace_/consumers/{consumers}/developers
                                    - workspace_/consumers/{consumers}/developers/{developers}
                                    - workspace_/consumers/{consumers}/hmac-auth
                                    - workspace_/consumers/{consumers}/hmac-auth/{hmacauth_credentials}
                                    - workspace_/consumers/{consumers}/jwt
                                    - workspace_/consumers/{consumers}/jwt/{jwt_secrets}
                                    - workspace_/consumers/{consumers}/key-auth
                                    - workspace_/consumers/{consumers}/key-auth/{keyauth_credentials}
                                    - workspace_/consumers/{consumers}/key-auth-enc
                                    - workspace_/consumers/{consumers}/key-auth-enc/{keyauth_enc_credentials}
                                    - workspace_/consumers/{consumers}/login_attempts
                                    - workspace_/consumers/{consumers}/login_attempts/{login_attempts}
                                    - workspace_/consumers/{consumers}/mtls-auth
                                    - workspace_/consumers/{consumers}/mtls-auth/{mtls_auth_credentials}
                                    - workspace_/consumers/{consumers}/mtls_auth_credentials
                                    - workspace_/consumers/{consumers}/mtls_auth_credentials/{mtls_auth_credentials}
                                    - workspace_/consumers/{consumers}/oauth2
                                    - workspace_/consumers/{consumers}/oauth2/{oauth2_credentials}
                                    - workspace_/consumers/{consumers}/plugins
                                    - workspace_/consumers/{consumers}/plugins/{plugins}
                                    - workspace_/debug/cluster/log-level/{log_level}
                                    - workspace_/debug/node/log-level
                                    - workspace_/debug/node/log-level/{log_level}
                                    - workspace_/debug/profiling/cpu
                                    - workspace_/debug/profiling/gc-snapshot
                                    - workspace_/debug/profiling/memory
                                    - workspace_/degraphql_routes
                                    - workspace_/degraphql_routes/{degraphql_routes}
                                    - workspace_/degraphql_routes/{degraphql_routes}/service
                                    - workspace_/developers
                                    - workspace_/developers/export
                                    - workspace_/developers/invite
                                    - workspace_/developers/roles
                                    - workspace_/developers/roles/{rbac_roles}
                                    - workspace_/developers/{developers}
                                    - workspace_/developers/{developers}/applications
                                    - workspace_/developers/{developers}/applications/{applications}
                                    - workspace_/developers/{developers}/applications/{applications}/application_instances
                                    - workspace_/developers/{developers}/applications/{applications}/application_instances/{application_instances}
                                    - workspace_/developers/{developers}/applications/{applications}/credentials/{plugin}
                                    - workspace_/developers/{developers}/applications/{applications}/credentials/{plugin}/{credential_id}
                                    - workspace_/developers/{developers}/consumer
                                    - workspace_/developers/{developers}/credentials/{plugin}
                                    - workspace_/developers/{developers}/credentials/{plugin}/{credential_id}
                                    - workspace_/developers/{developers}/rbac_user
                                    - workspace_/developers/{emailOrId}/plugins/
                                    - workspace_/developers/{emailOrId}/plugins/{id}
                                    - workspace_/document_objects
                                    - workspace_/document_objects/{document_objects}
                                    - workspace_/document_objects/{document_objects}/service
                                    - workspace_/endpoints
                                    - workspace_/entities/migrate
                                    - workspace_/event-hooks
                                    - workspace_/event-hooks/sources
                                    - workspace_/event-hooks/sources/{source}
                                    - workspace_/event-hooks/sources/{source}/{event}
                                    - workspace_/event-hooks/{event_hooks}
                                    - workspace_/event-hooks/{event_hooks}/ping
                                    - workspace_/event-hooks/{event_hooks}/test
                                    - workspace_/files
                                    - workspace_/files/*
                                    - workspace_/files/partials/*
                                    - workspace_/files/{files}
                                    - workspace_/filter-chains
                                    - workspace_/filter-chains/{filter_chains}
                                    - workspace_/filter-chains/{filter_chains}/route
                                    - workspace_/filter-chains/{filter_chains}/service
                                    - workspace_/graphql-proxy-cache-advanced
                                    - workspace_/graphql-proxy-cache-advanced/{cache_key}
                                    - workspace_/graphql-proxy-cache-advanced/{plugin_id}/caches/{cache_key}
                                    - workspace_/graphql-rate-limiting-advanced/costs
                                    - workspace_/graphql-rate-limiting-advanced/costs/{graphql_ratelimiting_advanced_cost_decoration}
                                    - workspace_/graphql_ratelimiting_advanced_cost_decoration
                                    - workspace_/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}
                                    - workspace_/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}/service
                                    - workspace_/groups
                                    - workspace_/groups/{groups}
                                    - workspace_/groups/{groups}/roles
                                    - workspace_/hmac-auths
                                    - workspace_/hmac-auths/{hmacauth_credentials}
                                    - workspace_/hmac-auths/{hmacauth_credentials}/consumer
                                    - workspace_/jwt-signer/jwks
                                    - workspace_/jwt-signer/jwks/{jwt_signer_jwks}
                                    - workspace_/jwt-signer/jwks/{jwt_signer_jwks}/rotate
                                    - workspace_/jwts
                                    - workspace_/jwts/{jwt_secrets}
                                    - workspace_/jwts/{jwt_secrets}/consumer
                                    - workspace_/key-auths
                                    - workspace_/key-auths/{keyauth_credentials}
                                    - workspace_/key-auths/{keyauth_credentials}/consumer
                                    - workspace_/key-auths-enc
                                    - workspace_/key-auths-enc/{keyauth_enc_credentials}
                                    - workspace_/key-auths-enc/{keyauth_enc_credentials}/consumer
                                    - workspace_/key-sets
                                    - workspace_/key-sets/{key_sets}
                                    - workspace_/key-sets/{key_sets}/keys
                                    - workspace_/key-sets/{key_sets}/keys/{keys}
                                    - workspace_/keyring
                                    - workspace_/keyring/activate
                                    - workspace_/keyring/active
                                    - workspace_/keyring/export
                                    - workspace_/keyring/generate
                                    - workspace_/keyring/import
                                    - workspace_/keyring/import/raw
                                    - workspace_/keyring/recover
                                    - workspace_/keyring/remove
                                    - workspace_/keyring/vault/sync
                                    - workspace_/keys
                                    - workspace_/keys/{keys}
                                    - workspace_/keys/{keys}/set
                                    - workspace_/konnect_applications
                                    - workspace_/konnect_applications/{konnect_applications}
                                    - workspace_/license/report
                                    - workspace_/licenses
                                    - workspace_/licenses/{licenses}
                                    - workspace_/login_attempts
                                    - workspace_/login_attempts/{login_attempts}
                                    - workspace_/login_attempts/{login_attempts}/consumer
                                    - workspace_/metrics
                                    - workspace_/mtls-auths
                                    - workspace_/mtls-auths/{mtls_auth_credentials}/consumer
                                    - workspace_/mtls_auth_credentials
                                    - workspace_/mtls_auth_credentials/{mtls_auth_credentials}
                                    - workspace_/mtls_auth_credentials/{mtls_auth_credentials}/ca_certificate
                                    - workspace_/mtls_auth_credentials/{mtls_auth_credentials}/consumer
                                    - workspace_/oauth2
                                    - workspace_/oauth2/{oauth2_credentials}
                                    - workspace_/oauth2/{oauth2_credentials}/consumer
                                    - workspace_/oauth2/{oauth2_credentials}/oauth2_tokens
                                    - workspace_/oauth2/{oauth2_credentials}/oauth2_tokens/{oauth2_tokens}
                                    - workspace_/oauth2_tokens
                                    - workspace_/oauth2_tokens/{oauth2_tokens}
                                    - workspace_/oauth2_tokens/{oauth2_tokens}/credential
                                    - workspace_/oauth2_tokens/{oauth2_tokens}/service
                                    - workspace_/openid-connect/issuers
                                    - workspace_/openid-connect/issuers/{oic_issuers}
                                    - workspace_/openid-connect/jwks
                                    - workspace_/plugins
                                    - workspace_/plugins/enabled
                                    - workspace_/plugins/schema/{name}
                                    - workspace_/plugins/{plugins}
                                    - workspace_/plugins/{plugins}/consumer
                                    - workspace_/plugins/{plugins}/consumer_group
                                    - workspace_/plugins/{plugins}/route
                                    - workspace_/plugins/{plugins}/service
                                    - workspace_/proxy-cache
                                    - workspace_/proxy-cache/{cache_key}
                                    - workspace_/proxy-cache/{plugin_id}/caches/{cache_key}
                                    - workspace_/proxy-cache-advanced
                                    - workspace_/proxy-cache-advanced/{cache_key}
                                    - workspace_/proxy-cache-advanced/{plugin_id}/caches/{cache_key}
                                    - workspace_/rbac/roles
                                    - workspace_/rbac/roles/{rbac_roles}
                                    - workspace_/rbac/roles/{rbac_roles}/endpoints
                                    - workspace_/rbac/roles/{rbac_roles}/endpoints/permissions
                                    - workspace_/rbac/roles/{rbac_roles}/endpoints/{workspace}/*
                                    - workspace_/rbac/roles/{rbac_roles}/entities
                                    - workspace_/rbac/roles/{rbac_roles}/entities/permissions
                                    - workspace_/rbac/roles/{rbac_roles}/entities/{entity_id}
                                    - workspace_/rbac/roles/{rbac_roles}/permissions
                                    - workspace_/rbac/users
                                    - workspace_/rbac/users/{rbac_users}
                                    - workspace_/rbac/users/{rbac_users}/admins
                                    - workspace_/rbac/users/{rbac_users}/admins/{admins}
                                    - workspace_/rbac/users/{rbac_users}/developers
                                    - workspace_/rbac/users/{rbac_users}/developers/{developers}
                                    - workspace_/rbac/users/{rbac_users}/permissions
                                    - workspace_/rbac/users/{rbac_users}/roles
                                    - workspace_/routes
                                    - workspace_/routes/{routes}
                                    - workspace_/routes/{routes}/filter-chains
                                    - workspace_/routes/{routes}/filter-chains/{filter_chains}
                                    - workspace_/routes/{routes}/filters/all
                                    - workspace_/routes/{routes}/filters/disabled
                                    - workspace_/routes/{routes}/filters/enabled
                                    - workspace_/routes/{routes}/plugins
                                    - workspace_/routes/{routes}/plugins/{plugins}
                                    - workspace_/routes/{routes}/service
                                    - workspace_/schemas/plugins/validate
                                    - workspace_/schemas/plugins/{name}
                                    - workspace_/schemas/{db_entity_name}/validate
                                    - workspace_/schemas/{name}
                                    - workspace_/services
                                    - workspace_/services/{services}
                                    - workspace_/services/{services}/application_instances
                                    - workspace_/services/{services}/application_instances/{application_instances}
                                    - workspace_/services/{services}/applications
                                    - workspace_/services/{services}/client_certificate
                                    - workspace_/services/{services}/degraphql/routes
                                    - workspace_/services/{services}/degraphql/routes/{degraphql_routes}
                                    - workspace_/services/{services}/degraphql_routes
                                    - workspace_/services/{services}/degraphql_routes/{degraphql_routes}
                                    - workspace_/services/{services}/document_objects
                                    - workspace_/services/{services}/document_objects/{document_objects}
                                    - workspace_/services/{services}/filter-chains
                                    - workspace_/services/{services}/filter-chains/{filter_chains}
                                    - workspace_/services/{services}/graphql-rate-limiting-advanced/costs
                                    - workspace_/services/{services}/graphql_ratelimiting_advanced_cost_decoration
                                    - workspace_/services/{services}/graphql_ratelimiting_advanced_cost_decoration/{graphql_ratelimiting_advanced_cost_decoration}
                                    - workspace_/services/{services}/oauth2_tokens
                                    - workspace_/services/{services}/oauth2_tokens/{oauth2_tokens}
                                    - workspace_/services/{services}/plugins
                                    - workspace_/services/{services}/plugins/{plugins}
                                    - workspace_/services/{services}/routes
                                    - workspace_/services/{services}/routes/{routes}
                                    - workspace_/sessions
                                    - workspace_/sessions/{sessions}
                                    - workspace_/snis
                                    - workspace_/snis/{snis}
                                    - workspace_/snis/{snis}/certificate
                                    - workspace_/status
                                    - workspace_/tags
                                    - workspace_/tags/{tags}
                                    - workspace_/targets
                                    - workspace_/targets/{targets}
                                    - workspace_/targets/{targets}/upstream
                                    - workspace_/timers
                                    - workspace_/upstreams
                                    - workspace_/upstreams/{upstreams}
                                    - workspace_/upstreams/{upstreams}/client_certificate
                                    - workspace_/upstreams/{upstreams}/health
                                    - workspace_/upstreams/{upstreams}/targets
                                    - workspace_/upstreams/{upstreams}/targets/all
                                    - workspace_/upstreams/{upstreams}/targets/{targets}
                                    - workspace_/upstreams/{upstreams}/targets/{targets}/healthy
                                    - workspace_/upstreams/{upstreams}/targets/{targets}/unhealthy
                                    - workspace_/upstreams/{upstreams}/targets/{targets}/{address}/healthy
                                    - workspace_/upstreams/{upstreams}/targets/{targets}/{address}/unhealthy
                                    - workspace_/userinfo
                                    - workspace_/vault-auth
                                    - workspace_/vault-auth/{vault_auth_vaults}
                                    - workspace_/vault-auth/{vault}/credentials
                                    - workspace_/vault-auth/{vault}/credentials/token/{access_token}
                                    - workspace_/vault-auth/{vault}/credentials/{consumer}
                                    - workspace_/vaults
                                    - workspace_/vaults/{vaults}
                                    - workspace_/vitals/
                                    - workspace_/vitals/cluster
                                    - workspace_/vitals/cluster/status_codes
                                    - workspace_/vitals/consumers/{consumer_id}/cluster
                                    - workspace_/vitals/nodes/
                                    - workspace_/vitals/nodes/{node_id}
                                    - workspace_/vitals/reports/{entity_type}
                                    - workspace_/vitals/status_code_classes
                                    - workspace_/vitals/status_codes/by_consumer
                                    - workspace_/vitals/status_codes/by_consumer_and_route
                                    - workspace_/vitals/status_codes/by_route
                                    - workspace_/vitals/status_codes/by_service
                                    - workspace_/workspaces
                                    - workspace_/workspaces/{workspaces}
                                    - workspace_/workspaces/{workspaces}/meta
                    schema:
                        properties:
                            data:
                                items:
                                    type: string
                                type: array
                        type: object
            description: Example response
        GetGroupResponse:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                comment: comment1
                                created_at: 1.556638385e+09
                                id: 665b4070-541f-48bf-82c1-53030babaa81
                                name: test-group
                                updated_at: 1.556638385e+09
                    schema:
                        properties:
                            comment:
                                type: string
                            created_at:
                                type: integer
                            id:
                                type: string
                            name:
                                type: string
                            updated_at:
                                type: integer
                        type: object
            description: OK
        GetGroupRolesListResponse:
            content:
                application/json:
                    schema:
                        example:
                            data:
                                - group:
                                    comment: comment1
                                    id: 7574eb1d-c9fa-46a9-bd3a-3f1b4b196287
                                    name: demo-group
                                    updated_at: "2024-04-23T18:25:43Z"
                                  rbac_role:
                                    id: 7fdea5c8-2bfa-4aa9-9c21-7bb9e607186d
                                    name: admin
                                  workspace:
                                    id: 99bd8d18-f5b6-410e-aefe-d75f4252f13c
                        properties:
                            data:
                                items:
                                    properties:
                                        group:
                                            properties:
                                                comment:
                                                    type: string
                                                id:
                                                    type: string
                                                name:
                                                    type: string
                                                updated_at:
                                                    format: date-time
                                                    type: string
                                            type: object
                                        rbac_role:
                                            properties:
                                                id:
                                                    type: string
                                                name:
                                                    type: string
                                            type: object
                                        workspace:
                                            properties:
                                                id:
                                                    type: string
                                            type: object
                                    type: object
                                type: array
                        type: object
            description: Successfully retrieved roles.
        GetKongInfoResponse:
            content:
                application/json:
                    examples:
                        fullExample:
                            summary: Example response
                            value:
                                configuration:
                                    _debug_pg_ttl_cleanup_interval: 300
                                    admin_acc_logs: /usr/local/kong/logs/admin_access.log
                                    admin_access_log: /dev/stdout
                                    admin_approved_email: "true"
                                    admin_emails_from: '""'
                                    admin_error_log: /dev/stderr
                                    admin_gui_access_log: logs/admin_gui_access.log
                                    admin_gui_auth_header: '******'
                                    admin_gui_auth_login_attempts: 0
                                    admin_gui_error_log: logs/admin_gui_error.log
                                    admin_gui_flags: '{}'
                                    admin_gui_listen:
                                        - 0.0.0.0:8002
                                        - 0.0.0.0:8445 ssl
                                    admin_gui_origin: http://localhost:8002
                                edition: enterprise
                                hostname: 8a487998603b
                                lua_version: LuaJIT 2.1.0-20231117
                                node_id: 1f257156-5e44-46e2-a618-767f5c7529e3
                                pids:
                                    master: 1
                                    workers:
                                        - 2382
                                        - 2383
                                plugins:
                                    available_on_server:
                                        acl: true
                                        acme: true
                                    disabled_on_server:
                                        application-registration: true
                                    enabled_in_cluster: []
                                tagline: Welcome to kong
                                timers:
                                    pending: 1
                                    running: 1128
                                version: 3.6.0.0
                    schema:
                        properties:
                            configuration:
                                additionalProperties: true
                                description: A sanitized version of the Kong configuration, excluding sensitive values.
                                type: object
                            edition:
                                description: Indicates whether the Kong instance is the Community or Enterprise edition.
                                example: enterprise
                                type: string
                            hostname:
                                description: The hostname of the Kong node.
                                example: kong-node.example.com
                                type: string
                            lua_version:
                                description: The version of Lua used by the Kong instance.
                                example: LuaJIT 2.1.0-beta3
                                type: string
                            node_id:
                                description: A unique identifier for the node, in UUID format.
                                example: a74d7c4f-ef83-4bbe-a5e7-3f5409f4a0b9
                                format: uuid
                                type: string
                            pids:
                                description: Process IDs for the master process and worker processes.
                                properties:
                                    master:
                                        description: The PID of the master process.
                                        example: 4321
                                        type: integer
                                    workers:
                                        description: An array of worker process PIDs.
                                        example:
                                            - 1234
                                            - 5678
                                        items:
                                            type: integer
                                        type: array
                                type: object
                            plugins:
                                description: Information about plugins.
                                properties:
                                    available_on_server:
                                        additionalProperties:
                                            oneOf:
                                                - type: boolean
                                                - properties:
                                                    priority:
                                                        description: The priority of the plugin.
                                                        type: integer
                                                    version:
                                                        description: The version of the plugin.
                                                        type: string
                                                  type: object
                                        type: object
                                    enabled_in_cluster:
                                        description: A list of distinct plugin names enabled in the cluster.
                                        example:
                                            - jwt
                                            - acl
                                        items:
                                            type: string
                                        type: array
                                type: object
                            tagline:
                                description: A tagline or slogan for the Kong instance.
                                example: Welcome to Kong
                                type: string
                            timers:
                                description: Information about running and pending timers.
                                properties:
                                    pending:
                                        description: The number of pending timers.
                                        example: 2
                                        type: integer
                                    running:
                                        description: The number of running timers.
                                        example: 5
                                        type: integer
                                type: object
                            version:
                                description: The version number of the Kong instance.
                                example: 2.3.3
                                type: string
                        type: object
            description: Success
        GetNodeLogLevelResponse:
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                type: string
                        type: object
            description: OK
        GetNodeStatusResponse:
            content:
                application/json:
                    schema:
                        properties:
                            memory:
                                description: Metrics about the memory usage.
                                properties:
                                    lua_shared_dicts:
                                        description: Memory details for shared Lua dictionaries.
                                        type: object
                                    workers_lua_vms:
                                        description: Metrics for Lua VMs for each worker.
                                        items:
                                            properties:
                                                http_allocated_gc:
                                                    description: Memory allocated to HTTP garbage collection.
                                                    type: string
                                                pid:
                                                    description: Worker process ID.
                                                    type: integer
                                            type: object
                                        type: array
                                type: object
                        type: object
            description: OK
        GetPartialSchemaResponse:
            content:
                application/json:
                    schema:
                        properties:
                            fields:
                                items:
                                    additionalProperties: true
                                    type: object
                                type: array
                        type: object
            description: The schema for a partial
        GetPluginSchemaResponse:
            content:
                application/json:
                    schema:
                        properties:
                            fields:
                                items:
                                    additionalProperties: true
                                    type: object
                                type: array
                        type: object
            description: The schema for the plugin
        GetRBACUserResponse:
            content:
                application/json:
                    examples:
                        Returned user:
                            value:
                                data:
                                    - comment: null
                                      created_at: 1.557512629e+09
                                      enabled: true
                                      id: f035f120-a95e-4327-b2ae-8fa264601d75
                                      name: doc_lord
                                      user_token: $2b$09$TIMneYcTosdG9WbzRsqcweAS2zote8g6I8HqXAtbFHR1pds2ymsh6
                                      user_token_ident: 88ea3
                                    - comment: null
                                      created_at: 1.55752265e+09
                                      enabled: true
                                      id: fa6881b2-f49f-4007-9475-577cd21d34f4
                                      name: doc_knight
                                      user_token: $2b$09$Za30VKGetRbacResponsemyoB9zF2PNEF.9hgKcN2BdKkptPMCubPK/Ps08lzZjYG
                                      user_token_ident: 4d870
                                next: null
                    schema:
                        properties:
                            data:
                                items:
                                    properties:
                                        comment:
                                            type: string
                                        created_at:
                                            type: integer
                                        enabled:
                                            type: boolean
                                        id:
                                            type: string
                                        name:
                                            type: string
                                        user_token:
                                            type: string
                                        user_token_ident:
                                            type: string
                                    type: object
                                type: array
                            next:
                                type: string
                        type: object
            description: RBAC User Response
        GetRbacResponse:
            content:
                application/json:
                    examples:
                        New role response body:
                            value:
                                comment: null
                                created_at: 1.557532241e+09
                                id: b5c5cfd4-3330-4796-9b7b-6026e91e3ad6
                                is_default: false
                                name: service_reader
                    schema:
                        properties:
                            comment:
                                type: string
                            created_at:
                                type: integer
                            id:
                                type: string
                            is_default:
                                type: boolean
                            name:
                                type: string
                        type: object
            description: Add a role.
        GetRoleEndpointPermissionResponse:
            content:
                application/json:
                    examples:
                        GetRoleEndpointPermissionResponse:
                            value:
                                actions:
                                    - delete
                                    - create
                                    - update
                                    - read
                                created_at: 1.557764505e+09
                                endpoint: /consumers
                                negative: false
                                role:
                                    id: 23df9f20-e7cc-4da4-bc89-d3a08f976e50
                                workspace: default
                    schema:
                        properties:
                            actions:
                                items:
                                    type: string
                                type: array
                            created_at:
                                type: integer
                            endpoint:
                                type: string
                            negative:
                                type: boolean
                            role:
                                properties:
                                    id:
                                        type: string
                                type: object
                            role_source:
                                default: local
                                description: The origin of the RBAC user role. Specifies where the user role is defined, either locally or through an identity provider (IdP).
                                enum:
                                    - local
                                    - idp
                                type: string
                            workspace:
                                type: string
                        type: object
            description: OK
        GetRoleEndpointPermissionsResponse:
            content:
                application/json:
                    schema:
                        properties:
                            data:
                                items:
                                    properties:
                                        actions:
                                            items:
                                                type: string
                                            type: array
                                        created_at:
                                            type: integer
                                        endpoint:
                                            type: string
                                        negative:
                                            type: boolean
                                        role:
                                            properties:
                                                id:
                                                    type: string
                                            type: object
                                        role_source:
                                            default: local
                                            description: The origin of the RBAC user role.
                                            enum:
                                                - local
                                                - idp
                                            type: string
                                        workspace:
                                            type: string
                                    type: object
                                type: array
                        type: object
            description: OK
        GetRoleEntityPermissionResponse:
            content:
                application/json:
                    examples:
                        example-response:
                            value:
                                actions:
                                    - delete
                                    - create
                                    - read
                                created_at: 1.557771505e+09
                                entity_id: '*'
                                entity_type: wildcard
                                negative: false
                                role:
                                    id: bba049fa-bf7e-40ef-8e89-553dda292e99
                    schema:
                        properties:
                            actions:
                                items:
                                    type: string
                                type: array
                            created_at:
                                type: integer
                            entity_id:
                                type: string
                            entity_type:
                                type: string
                            negative:
                                type: boolean
                            role:
                                properties:
                                    id:
                                        type: string
                                type: object
                            role_source:
                                default: local
                                description: The origin of the RBAC user role. Specifies where the user role is defined, either locally or through an identity provider (IdP).
                                enum:
                                    - local
                                    - idp
                                type: string
                        type: object
            description: OK
        GetRoleEntityPermissionsResponse:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                data:
                                    - actions:
                                        - delete
                                        - create
                                        - read
                                      created_at: 1.557771505e+09
                                      entity_id: '*'
                                      entity_type: wildcard
                                      negative: false
                                      role:
                                        id: bba049fa-bf7e-40ef-8e89-553dda292e99
                    schema:
                        properties:
                            data:
                                items:
                                    properties:
                                        actions:
                                            items:
                                                type: string
                                            type: array
                                        created_at:
                                            type: integer
                                        entity_id:
                                            type: string
                                        entity_type:
                                            type: string
                                        negative:
                                            type: boolean
                                        role:
                                            properties:
                                                id:
                                                    type: string
                                            type: object
                                        role_source:
                                            default: local
                                            description: The origin of the RBAC user role. Specifies where the user role is defined, either locally or through an identity provider (IdP).
                                            enum:
                                                - local
                                                - idp
                                            type: string
                                    type: object
                                type: array
                        type: object
            description: OK
        GetRolePermissionsResponse:
            content:
                application/json:
                    examples:
                        role-permission-example:
                            value:
                                endpoints:
                                    '*':
                                        '*':
                                            actions:
                                                - delete
                                                - create
                                                - update
                                                - read
                                            negative: false
                                        /*/rbac/*:
                                            actions:
                                                - delete
                                                - create
                                                - update
                                                - read
                                            negative: true
                                entities: {}
                    schema:
                        properties:
                            endpoints:
                                properties:
                                    '*':
                                        properties:
                                            '*':
                                                properties:
                                                    actions:
                                                        items:
                                                            type: string
                                                        type: array
                                                    negative:
                                                        type: boolean
                                                type: object
                                            /*/rbac/*:
                                                properties:
                                                    actions:
                                                        items:
                                                            type: string
                                                        type: array
                                                    negative:
                                                        type: boolean
                                                type: object
                                        type: object
                                type: object
                            entities:
                                type: object
                        type: object
            description: OK
        GetRoleSpecificEndpointResponse:
            content:
                application/json:
                    example:
                        actions:
                            - delete
                            - create
                            - update
                            - read
                        created_at: 1.557764505e+09
                        endpoint: /consumers
                        negative: false
                        role:
                            id: 23df9f20-e7cc-4da4-bc89-d3a08f976e50
                        workspace: default
                    schema:
                        properties:
                            actions:
                                items:
                                    type: string
                                type: array
                            created_at:
                                type: integer
                            endpoint:
                                type: string
                            negative:
                                type: boolean
                            role:
                                properties:
                                    id:
                                        type: string
                                type: object
                            role_source:
                                default: local
                                description: The origin of the RBAC user role. Specifies where the user role is defined, either locally or through an identity provider (IdP).
                                enum:
                                    - local
                                    - idp
                                type: string
                            workspace:
                                type: string
                        type: object
            description: OK
        GetRolesResponse:
            content:
                application/json:
                    schema:
                        items:
                            properties:
                                group:
                                    properties:
                                        id:
                                            type: string
                                        name:
                                            type: string
                                    type: object
                                rbac_role:
                                    properties:
                                        id:
                                            type: string
                                        name:
                                            type: string
                                    type: object
                                workspace:
                                    properties:
                                        id:
                                            type: string
                                    type: object
                            type: object
                        type: array
            description: Successfully retrieved the roles
        GetTimersDebugInfoResponse:
            content:
                application/json:
                    schema:
                        properties:
                            stats:
                                description: Statistics about the worker.
                                properties:
                                    flamegraph:
                                        description: String-encoded timer-related flamegraph data.
                                        properties:
                                            elapsed_time:
                                                description: The elapsed time for the flamegraph.
                                                example: |
                                                    @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 17
                                                type: string
                                            pending:
                                                description: The number of pending timers for the flamegraph.
                                                example: |
                                                    @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
                                                type: string
                                            running:
                                                description: The number of running timers for the flamegraph.
                                                example: |
                                                    @./kong/init.lua:706:init_worker();@./kong/runloop/handler.lua:1086:before() 0
                                                type: string
                                        type: object
                                    sys:
                                        description: List of the number of different types of timers.
                                        properties:
                                            pending:
                                                description: The number of pending timers.
                                                example: 0
                                                type: integer
                                            running:
                                                description: The number of running timers.
                                                example: 0
                                                type: integer
                                            runs:
                                                description: The total number of runs for the timers.
                                                example: 7
                                                type: integer
                                            total:
                                                description: The total number of timers (running + pending + waiting).
                                                example: 7
                                                type: integer
                                            waiting:
                                                description: The number of unexpired timers.
                                                example: 7
                                                type: integer
                                        type: object
                                    timers:
                                        additionalProperties:
                                            properties:
                                                is_running:
                                                    description: Whether the timer is currently running.
                                                    type: boolean
                                                meta:
                                                    description: Metadata about the timer.
                                                    properties:
                                                        callstack:
                                                            description: Program callstack of created timers.
                                                            type: string
                                                        name:
                                                            description: The name of the timer's metadata.
                                                            type: string
                                                    type: object
                                                name:
                                                    description: The name of the timer.
                                                    type: string
                                                stats:
                                                    description: Stats related to the timer.
                                                    properties:
                                                        elapsed_time:
                                                            properties:
                                                                avg:
                                                                    description: Average elapsed time.
                                                                    type: number
                                                                max:
                                                                    description: Maximum elapsed time.
                                                                    type: number
                                                                min:
                                                                    description: Minimum elapsed time.
                                                                    type: number
                                                                variance:
                                                                    description: Variance of the elapsed time.
                                                                    type: number
                                                            type: object
                                                        finish:
                                                            description: Number of times the timer finished.
                                                            type: integer
                                                        last_err_msg:
                                                            description: Last error message for the timer, if any.
                                                            type: string
                                                        runs:
                                                            description: Number of runs for the timer.
                                                            type: integer
                                                    type: object
                                            type: object
                                        description: Timer statistics for the worker.
                                        type: object
                                type: object
                            worker:
                                description: Information about the current worker.
                                properties:
                                    count:
                                        description: The total number of Nginx worker processes.
                                        type: integer
                                    id:
                                        description: The ordinal number of the current Nginx worker process (starting from 0).
                                        type: integer
                                type: object
                        type: object
            description: OK
        GetUserPermissionsResponse:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                endpoints:
                                    '*':
                                        '*':
                                            actions:
                                                - read
                                            negative: false
                                entities: {}
                    schema:
                        properties:
                            endpoints:
                                properties:
                                    '*':
                                        properties:
                                            '*':
                                                properties:
                                                    actions:
                                                        items:
                                                            type: string
                                                        type: array
                                                    negative:
                                                        type: boolean
                                                type: object
                                        type: object
                                type: object
                            entities:
                                type: object
                        type: object
            description: OK
        GetUserRolesResponse:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                roles:
                                    - comment: Read access to all endpoints, across all workspaces
                                      created_at: 1.5577655e+09
                                      id: a1c810ee-8366-4654-ba0c-963ffb9ccf2e
                                      name: read-only
                                    - created_at: 1.557772263e+09
                                      id: aae80073-095f-4553-ba9a-bee5ed3b8b91
                                      name: doc-knight
                                user:
                                    comment: null
                                    created_at: 1.557772232e+09
                                    enabled: true
                                    id: b65ca712-7ceb-4114-87f4-5c310492582c
                                    name: gruce-wayne
                                    user_token: $2b$09$gZnMKK/mm/d2rAXN7gL63uL43mjdX/62iwMqdyCQwLyC0af3ce/1K
                                    user_token_ident: 88ea3
                    schema:
                        properties:
                            roles:
                                items:
                                    properties:
                                        comment:
                                            type: string
                                        created_at:
                                            type: integer
                                        id:
                                            type: string
                                        name:
                                            type: string
                                    type: object
                                type: array
                            user:
                                properties:
                                    comment:
                                        type: string
                                    created_at:
                                        type: integer
                                    enabled:
                                        type: boolean
                                    id:
                                        type: string
                                    name:
                                        type: string
                                    user_token:
                                        type: string
                                    user_token_ident:
                                        type: string
                                type: object
                        type: object
            description: OK
        GetWorkspaceResponse:
            content:
                application/json:
                    schema:
                        properties:
                            comment:
                                type: string
                            config:
                                properties:
                                    meta:
                                        type: object
                                    portal:
                                        default: false
                                        description: Portal enabled
                                        type: boolean
                                    portal_access_request_email:
                                        type: boolean
                                    portal_application_request_email:
                                        type: boolean
                                    portal_application_status_email:
                                        type: boolean
                                    portal_approved_email:
                                        type: boolean
                                    portal_auth:
                                        type: string
                                    portal_auth_conf:
                                        type: string
                                    portal_auto_approve:
                                        type: boolean
                                    portal_cors_origins:
                                        items:
                                            type: string
                                        type: array
                                    portal_developer_meta_fields:
                                        default: '[{"label":"Full Name","title":"full_name","validator":{"required":true,"type":"string"}}]'
                                        type: string
                                    portal_emails_from:
                                        type: string
                                    portal_emails_reply_to:
                                        type: string
                                    portal_invite_email:
                                        type: boolean
                                    portal_is_legacy:
                                        type: boolean
                                    portal_reset_email:
                                        type: boolean
                                    portal_reset_success_email:
                                        type: boolean
                                    portal_session_conf:
                                        type: string
                                    portal_smtp_admin_emails:
                                        items:
                                            type: string
                                        type: array
                                    portal_token_exp:
                                        type: integer
                                type: object
                            created_at:
                                description: Unix epoch when the resource was created.
                                type: integer
                            id:
                                description: The unique UUID for this resource.
                                type: string
                            meta:
                                properties:
                                    color:
                                        type: string
                                    thumbnail:
                                        type: string
                                type: object
                            name:
                                type: string
                        type: object
            description: Workspaces provide a way to segment Kong entities.
        GroupRoleAssociationCreated:
            content:
                application/json:
                    schema:
                        properties:
                            group:
                                properties:
                                    id:
                                        type: string
                                    name:
                                        type: string
                                type: object
                            rbac_role:
                                properties:
                                    id:
                                        type: string
                                    name:
                                        type: string
                                type: object
                            workspace:
                                properties:
                                    id:
                                        type: string
                                type: object
                        type: object
            description: Successfully associated the role with the group
        HTTP204NoContent:
            description: No content. Indicates the operation was successful.
        HTTP401Error:
            content:
                application/json:
                    examples:
                        DuplicateApiKey:
                            summary: Duplicate API key found
                            value:
                                message: Duplicate API key found
                                status: 401
                        InvalidAuthCred:
                            summary: Invalid authentication credentials
                            value:
                                message: Unauthorized
                                status: 401
                        NoAPIKey:
                            summary: No API key found
                            value:
                                message: No API key found in request
                                status: 401
                    schema:
                        $ref: '#/components/schemas/GatewayUnauthorizedError'
            description: Unauthorized
        InvalidAuthCredError:
            content:
                application/json:
                    example:
                        message: Unauthorized
                        status: 401
                    schema:
                        $ref: '#/components/schemas/UnauthorizedError'
            description: Invalid authentication credentials
        KeyRingResponse:
            content:
                application/json:
                    examples:
                        example:
                            value:
                                active: LaW1urRQ
                                ids:
                                    - LaW1urRQ
                    schema:
                        description: The keyring object contains an array of keyring ids.
                        properties:
                            active:
                                description: The ID of the active key.
                                example: LaW1urRQ
                                type: string
                            ids:
                                description: The list of the active key IDs
                                items:
                                    example: LaW1urRQ
                                    type: string
                                type: array
                        type: object
            description: The contents of the keyring.
        LicenseHTTP401Error:
            description: Unauthorized
        LicenseResponse:
            content:
                application/json:
                    examples:
                        Active license:
                            value:
                                created_at: 1.5005088e+09
                                id: 30b4edb7-0847-4f65-af90-efbed8b0161f
                                payload: '{\"license\":{\"payload\":{\"admin_seats\":\"1\",\"customer\":\"Example Company, Inc\",\"dataplanes\":\"1\",\"license_creation_date\":\"2017-07-20\",\"license_expiration_date\":\"2017-07-21\",\"license_key\":\"00141000017ODj3AAG_a1V41000004wT0OEAU\",\"product_subscription\":\"Konnect Enterprise\",\"support_plan\":\"None\"},\"signature\":\"24cc21223633044c15c300be19cacc26ccc5aca0dd9a12df8a7324a1970fe304bc07b8dcd7fb08d7b92e04169313377ae3b550ead653b951bc44cd2eb59f6beb\",\"version\":\"1\"}}'
                                updated_at: 1.5005088e+09
                        No license:
                            value:
                                data: []
                                next: null
                    schema:
                        properties:
                            created_at:
                                example: 1.5005088e+09
                                type: integer
                            id:
                                description: The UUID of the license
                                example: 30b4edb7-0847-4f65-af90-efbed8b0161f
                                type: string
                            payload:
                                description: |
                                    The Kong Gateway license in JSON format.
                                example: '{\"license\":{\"payload\":{\"admin_seats\":\"1\",\"customer\":\"Example Company, Inc\",\"dataplanes\":\"1\",\"license_creation_date\":\"2017-07-20\",\"license_expiration_date\":\"2017-07-21\",\"license_key\":\"00141000017ODj3AAG_a1V41000004wT0OEAU\",\"product_subscription\":\"Konnect Enterprise\",\"support_plan\":\"None\"},\"signature\":\"24cc21223633044c15c300be19cacc26ccc5aca0dd9a12df8a7324a1970fe304bc07b8dcd7fb08d7b92e04169313377ae3b550ead653b951bc44cd2eb59f6beb\",\"version\":\"1\"}}'
                                type: string
                            updated_at:
                                example: 1.5005088e+09
                                type: integer
                        type: object
            description: Returns a list of licenses in the response body.
        ListAdminsResponse:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                data:
                                    - created_at: 1.556638385e+09
                                      email: test@test.com
                                      id: 665b4070-541f-48bf-82c1-53030babaa81
                                      rbac_token_enabled: true
                                      status: 4
                                      updated_at: 1.556638385e+09
                                      username: test-admin
                                    - created_at: 1.556563122e+09
                                      id: a93ff120-9e6c-4198-b47e-f779104c7eac
                                      rbac_token_enabled: false
                                      status: 0
                                      updated_at: 1.556563122e+09
                                      username: kong_admin
                                next: null
                    schema:
                        properties:
                            data:
                                items:
                                    properties:
                                        created_at:
                                            type: integer
                                        email:
                                            type: string
                                        id:
                                            type: string
                                        rbac_token_enabled:
                                            type: boolean
                                        status:
                                            description: The status field indicates the state of the invitation.
                                            type: integer
                                        updated_at:
                                            type: integer
                                        username:
                                            type: string
                                    type: object
                                type: array
                            next:
                                nullable: true
                        type: object
            description: Example response
        ListAllGroups:
            content:
                application/json:
                    schema:
                        items:
                            properties:
                                created_at:
                                    format: date-time
                                    type: string
                                id:
                                    type: string
                                name:
                                    type: string
                            type: object
                        type: array
            description: Successfully retrieved the list of groups
        ListAuditObjectsResponse:
            content:
                application/json:
                    schema:
                        items:
                            properties:
                                details:
                                    description: Additional log details.
                                    type: object
                                id:
                                    description: Unique identifier for the audit log.
                                    type: string
                                timestamp:
                                    description: Timestamp of the log.
                                    format: date-time
                                    type: string
                            type: object
                        type: array
            description: A list of request audit logs.
        ListEndpointSupportedMethodsResponse:
            description: No Content
            headers:
                Access-Control-Allow-Headers:
                    description: Used in response to a preflight request to indicate which HTTP headers can be used during the actual request
                    example: Content-Type, Kong-Admin-Token, Kong-Request-Type, Cache-Control
                    schema:
                        type: string
                Access-Control-Allow-Methods:
                    description: Indicates the methods allowed when accessing the resource in response to a preflight request
                    example: OPTIONS, PATCH, POST
                    schema:
                        type: string
                Access-Control-Allow-Origin:
                    description: Indicates whether the resource can be accessed by any origin
                    example: '*'
                    schema:
                        type: string
                Allow:
                    description: Lists the HTTP methods that are supported for the resource
                    example: OPTIONS, PATCH, POST
                    schema:
                        type: string
                Connection:
                    description: Indicates whether the connection will be closed after the message is completed
                    example: keep-alive
                    schema:
                        enum:
                            - keep-alive
                            - close
                        type: string
                Date:
                    description: The date and time at which the message was originated
                    example: Fri, 14 Apr 2023 17:24:17 GMT
                    schema:
                        type: string
                Server:
                    description: The software used by the origin server to handle the request
                    example: kong/3.2.2.0-enterprise-edition
                    schema:
                        type: string
                X-Kong-Admin-Latency:
                    description: The time taken to process the request on the server, in milliseconds
                    example: 5
                    schema:
                        type: integer
                X-Kong-Admin-Request-ID:
                    description: A unique identifier for the request, generated by Kong
                    example: gDP1cF3OsNbrgcKPhRNE0RXRNfS7NcoG
                    schema:
                        type: string
        ListSourceEventsResponse:
            content:
                application/json:
                    schema:
                        properties:
                            data:
                                properties:
                                    create:
                                        properties:
                                            fields:
                                                items:
                                                    type: string
                                                type: array
                                        type: object
                                    delete:
                                        properties:
                                            fields:
                                                items:
                                                    type: string
                                                type: array
                                        type: object
                                    update:
                                        properties:
                                            fields:
                                                items:
                                                    type: string
                                                type: array
                                        type: object
                                type: object
                        type: object
            description: OK
        ListSourcesResponse:
            content:
                application/json:
                    schema:
                        properties:
                            data:
                                properties:
                                    balancer:
                                        properties:
                                            health:
                                                properties:
                                                    fields:
                                                        items:
                                                            type: string
                                                        type: array
                                                type: object
                                        type: object
                                    crud:
                                        properties:
                                            acls:
                                                type: object
                                        type: object
                                type: object
                        type: object
            description: List sources Response
        ListWorkspaceResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Workspace'
            description: The workspace response object.
        NoAPIKeyError:
            content:
                application/json:
                    example:
                        message: No API key found in request
                        status: 401
                    schema:
                        $ref: '#/components/schemas/UnauthorizedError'
            description: No API key found
        PluginResponse:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Plugin'
            description: Plugin response payload.
        ReportResponse:
            content:
                application/json:
                    schema:
                        properties:
                            checksum:
                                description: The checksum of the current report.
                                example: 38b06b3c3c69299740e1f2d48a1a197d17864b99
                                type: string
                            counters:
                                description: |
                                    Counts the number of requests made in a given month.
                                properties:
                                    buckets:
                                        description: A list of year-month buckets and the number of requests made in each one.
                                        items:
                                            properties:
                                                bucket:
                                                    description: Year and month when the requests were processed. If the value in bucket is UNKNOWN, then the requests were processed before Kong Gateway 2.7.0.1.
                                                    example: 2025-01
                                                    type: string
                                                request_count:
                                                    description: Number of requests processed in the given month and year.
                                                    example: 10
                                                    type: integer
                                        type: array
                                    total_requests:
                                        description: The total number of requests made in all buckets.
                                        example: 10
                                        type: number
                                type: object
                        type: object
            description: Fields available in the report
        TagsResponse:
            content:
                application/json:
                    example:
                        data:
                            - entity_id: 123e4567-e89b-12d3-a456-426614174000
                              entity_name: my-service
                              entity_type: service
                              tag: production
                        next: null
                    schema:
                        properties:
                            data:
                                items:
                                    properties:
                                        entity_id:
                                            example: 123e4567-e89b-12d3-a456-426614174000
                                            type: string
                                        entity_name:
                                            example: my-service
                                            type: string
                                        entity_type:
                                            example: service
                                            type: string
                                        tag:
                                            example: production
                                            type: string
                                    type: object
                                type: array
                            next:
                                nullable: true
                                type: string
                        type: object
            description: Successfully retrieved tags.
        UnauthorizedRequest:
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/UnauthorizedError'
            description: Unauthorized request
        UpdateNodeLogLevelResponse:
            content:
                application/json:
                    examples:
                        Example 1:
                            value:
                                message: log level changed
                    schema:
                        properties:
                            message:
                                type: string
                        type: object
            description: OK
        ValidateEntityResponse:
            content:
                application/json:
                    schema:
                        properties:
                            message:
                                type: string
                        type: object
            description: Validation result of the request against a schema
        keyring-generate-response:
            content:
                application/json:
                    schema:
                        properties:
                            id:
                                type: string
                            key:
                                type: string
                        type: object
            description: Keyring response object
    schemas:
        ACL:
            additionalProperties: false
            example:
                consumer:
                    id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
                group: foo
                id: b1f34145-0343-41a4-9602-4c69dec2f269
            properties:
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                group:
                    type: string
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
            required:
                - group
            type: object
        ACLWithoutParents:
            additionalProperties: false
            example:
                group: foo
                id: b1f34145-0343-41a4-9602-4c69dec2f269
            properties:
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                group:
                    type: string
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
            required:
                - group
            type: object
        Admin:
            additionalProperties: false
            example:
                consumer: 8d90c6f4-12b4-4f86-9f56-7a8b8d4e9c1a
                created_at: 1.706598432e+09
                custom_id: custom-123
                email: admin@example.com
                id: 3f1c2a59-4b7d-4e96-bd7f-6a5b5f6c1e22
                rbac_token_enabled: true
                rbac_user: 26e7cb9f-9fcd-40de-a4d7-5f6c89d1e8a3
                status: active
                updated_at: 1.706684832e+09
                username: admin_user
                username_lower: admin_user
            properties:
                consumer:
                    description: The consumer.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                custom_id:
                    description: The Admin’s custom ID.
                    nullable: true
                    type: string
                email:
                    nullable: true
                    type: string
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                rbac_token_enabled:
                    default: true
                    description: Allows the Admin to use and reset their RBAC token; true by default.
                    nullable: true
                    type: boolean
                rbac_user:
                    description: The rbac user Id.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                status:
                    default: 4
                    nullable: true
                    type: integer
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
                username:
                    description: The admin's username.
                    nullable: true
                    type: string
                username_lower:
                    description: The admin's username in lowercase.
                    nullable: true
                    type: string
            required:
                - username
            type: object
        BasicAuth:
            additionalProperties: false
            example:
                consumer:
                    id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
                id: b2f34145-0343-41a4-9602-4c69dec2f269
                password: hashedsoopersecretvalue
                username: darius
            properties:
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                password:
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                username:
                    type: string
            required:
                - password
                - username
            type: object
        BasicAuthWithoutParents:
            additionalProperties: false
            example:
                id: b2f34145-0343-41a4-9602-4c69dec2f269
                password: hashedsoopersecretvalue
                username: darius
            properties:
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                password:
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                username:
                    type: string
            required:
                - password
                - username
            type: object
        CACertificate:
            additionalProperties: false
            description: A CA certificate object represents a trusted CA. These objects are used by Kong to verify the validity of a client or server certificate.
            example:
                cert: |-
                    -----BEGIN CERTIFICATE-----
                    certificate-content
                    -----END CERTIFICATE-----
                cert_digest: 9b8aaf19a276885f6c8a6bc48a30700fdb3a351d8b05374d153bfb7b178e2a9f
                created_at: 1.706598432e+09
                id: b2f34145-0343-41a4-9602-4c69dec2f260
                tags:
                    - trusted
                    - api
            properties:
                cert:
                    description: PEM-encoded public certificate of the CA.
                    type: string
                cert_digest:
                    description: SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
                    nullable: true
                    type: string
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                tags:
                    description: An optional set of strings associated with the Certificate for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - cert
            type: object
        Certificate:
            additionalProperties: false
            description: 'A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service. Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames. If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string according to the following order: main certificate on the top, followed by any intermediates.'
            example:
                cert: |-
                    -----BEGIN CERTIFICATE-----
                    certificate-content
                    -----END CERTIFICATE-----
                id: b2f34145-0343-41a4-9602-4c69dec2f269
                key: |-
                    -----BEGIN PRIVATE KEY-----
                    private-key-content
                    -----END PRIVATE KEY-----
            properties:
                cert:
                    description: PEM-encoded public certificate chain of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
                    type: string
                cert_alt:
                    description: PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
                    nullable: true
                    type: string
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                key:
                    description: PEM-encoded private key of the SSL key pair. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
                    type: string
                key_alt:
                    description: PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is _referenceable_, which means it can be securely stored as a [secret](/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
                    nullable: true
                    type: string
                snis:
                    items:
                        description: A string representing a wildcard host name, such as *.example.com.
                        type: string
                    nullable: true
                    type: array
                tags:
                    description: An optional set of strings associated with the Certificate for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - cert
                - key
            type: object
        Consumer:
            additionalProperties: false
            description: The Consumer object represents a consumer - or a user - of a Service. You can either rely on Kong as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong and your existing primary datastore.
            example:
                custom_id: "4200"
                id: 8a388226-80e8-4027-a486-25e4f7db5d21
                tags:
                    - silver-tier
                username: bob-the-builder
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                custom_id:
                    description: Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
                    nullable: true
                    type: string
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                tags:
                    description: An optional set of strings associated with the Consumer for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
                username:
                    description: The unique username of the Consumer. You must send either this field or `custom_id` with the request.
                    nullable: true
                    type: string
            type: object
        ConsumerGroup:
            additionalProperties: false
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: The name of the consumer group.
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - name
            type: object
        ConsumerGroupInsideWrapper:
            properties:
                consumer_group:
                    $ref: '#/components/schemas/ConsumerGroup'
            type: object
        CustomPlugin:
            additionalProperties: false
            example:
                handler: return { VERSION = '1.0,0', PRIORITY = 500, access = function(self, config) kong.service.request.set_header(config.name, config.value) end }
                id: 868346aa-1105-4b77-8346-aa1105fb77c4
                name: set-header
                schema: return { name = 'set-header', fields = { { protocols = require('kong.db.schema.typedefs').protocols_http }, { config = { type = 'record', fields = { { name = { description = 'The name of the header to set.', type = 'string', required = true } }, { value = { description = 'The value for the header.', type = 'string', required = true } } } } } } }
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                handler:
                    description: The handler for the given custom plugin.
                    type: string
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: The name to associate with the given custom plugin.
                    type: string
                schema:
                    description: The schema for the given custom plugin.
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - handler
                - name
                - schema
            type: object
        Degraphql_route:
            additionalProperties: false
            example:
                id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                query: query{ user { email } }
                service:
                    id: bd380f99-659d-415e-b0e7-72ea05df3218
                uri: /users
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                methods:
                    default:
                        - GET
                    items:
                        description: A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
                        type: string
                    nullable: true
                    type: array
                query:
                    type: string
                service:
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
                uri:
                    type: string
            required:
                - query
                - uri
                - service
            type: object
        Degraphql_routeWithoutParents:
            additionalProperties: false
            example:
                id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                query: query{ user { email } }
                uri: /users
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                methods:
                    default:
                        - GET
                    items:
                        description: A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
                        type: string
                    nullable: true
                    type: array
                query:
                    type: string
                service:
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
                uri:
                    type: string
            required:
                - query
                - uri
            type: object
        Event-Hooks:
            description: Event Hooks schema
            example:
                data:
                    - config:
                        body: null
                        body_format: true
                        headers:
                            content-type: application/json
                        headers_format: false
                        method: POST
                        payload:
                            text: payload_text
                        payload_format: true
                        secret: null
                        ssl_verify: false
                        url: https://hooks.slack.com/services/foo/bar/baz
                      created_at: 1.627588552e+09
                      event: admins
                      handler: webhook-custom
                      id: 937df175-3db2-4e6d-8aa1-d95c94a76089
                      on_change: null
                      snooze: null
                      source: crud
                    - config:
                        headers: {}
                        secret: null
                        ssl_verify: false
                        url: https://webhook.site/a1b2c3-d4e5-g6h7-i8j9-k1l2m3n4o5p6
                      created_at: 1.627581575e+09
                      event: consumers
                      handler: webhook
                      id: c57340ab-9fed-40fd-bb7e-1cef8d37c2df
                      on_change: null
                      snooze: null
                      source: crud
                    - config:
                        functions:
                            - |
                              return function (data, event, source, pid)
                                local user = data.entity.username
                                error("Event hook on consumer " .. user .. "")
                              end
                      created_at: 1.627595513e+09
                      event: consumers
                      handler: lambda
                      id: c9fdd58d-5416-4d3a-9467-51e5cfe4ca0e
                      on_change: null
                      snooze: null
                      source: crud
                next: null
            properties:
                data:
                    description: List of event hooks
                    items:
                        properties:
                            config:
                                description: Configuration for the event hook
                                properties:
                                    body:
                                        nullable: true
                                        type: string
                                    body_format:
                                        type: boolean
                                    functions:
                                        items:
                                            type: string
                                        nullable: true
                                        type: array
                                    headers:
                                        nullable: true
                                        properties:
                                            content-type:
                                                type: string
                                        type: object
                                    headers_format:
                                        type: boolean
                                    method:
                                        type: string
                                    payload:
                                        nullable: true
                                        properties:
                                            text:
                                                type: string
                                        type: object
                                    payload_format:
                                        type: boolean
                                    secret:
                                        nullable: true
                                        type: string
                                    ssl_verify:
                                        type: boolean
                                    url:
                                        type: string
                                type: object
                            created_at:
                                type: integer
                            event:
                                type: string
                            handler:
                                type: string
                            id:
                                type: string
                            on_change:
                                nullable: true
                                type: string
                            snooze:
                                nullable: true
                                type: integer
                            source:
                                type: string
                        type: object
                    type: array
                next:
                    nullable: true
                    type: string
            type: object
        GatewayUnauthorizedError:
            properties:
                message:
                    type: string
                status:
                    type: integer
            required:
                - message
                - status
            type: object
        Group:
            additionalProperties: false
            example:
                comment: This is an example comment for the group.
                created_at: 1.706598432e+09
                id: d4e7f2c9-8a7b-4e89-b3a1-9c3d6f1e5b92
                name: example-group
                updated_at: 1.706684832e+09
            properties:
                comment:
                    description: Any comments associated with the specific group.
                    nullable: true
                    type: string
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: The name of the group
                    type: string
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - name
            type: object
        HMACAuth:
            additionalProperties: false
            example:
                consumer:
                    id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
                id: 75695322-e8a0-4109-aed4-5416b0308d85
                secret: wQazJ304DW5huJklHgUfjfiSyCyTAEDZ
                username: xerxes
            properties:
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                secret:
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                username:
                    type: string
            required:
                - username
            type: object
        HMACAuthWithoutParents:
            additionalProperties: false
            example:
                id: 75695322-e8a0-4109-aed4-5416b0308d85
                secret: wQazJ304DW5huJklHgUfjfiSyCyTAEDZ
                username: xerxes
            properties:
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                secret:
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                username:
                    type: string
            required:
                - username
            type: object
        JWT:
            additionalProperties: false
            example:
                algorithm: HS256
                consumer:
                    id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
                id: 75695322-e8a0-4109-aed4-5416b0308d85
                key: YJdmaDvVTJxtcWRCvkMikc8oELgAVNcz
                secret: C50k0bcahDhLNhLKSUBSR1OMiFGzNZ7X
            properties:
                algorithm:
                    default: HS256
                    enum:
                        - ES256
                        - ES256K
                        - ES384
                        - ES512
                        - ESB256
                        - ESB320
                        - ESB384
                        - ESB512
                        - ESP256
                        - ESP384
                        - ESP512
                        - Ed25519
                        - Ed448
                        - EdDSA
                        - HS256
                        - HS384
                        - HS512
                        - PS256
                        - PS384
                        - PS512
                        - RS256
                        - RS384
                        - RS512
                    nullable: true
                    type: string
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                key:
                    nullable: true
                    type: string
                rsa_public_key:
                    nullable: true
                    type: string
                secret:
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
            type: object
        JWTWithoutParents:
            additionalProperties: false
            example:
                algorithm: HS256
                id: 75695322-e8a0-4109-aed4-5416b0308d85
                key: YJdmaDvVTJxtcWRCvkMikc8oELgAVNcz
                secret: C50k0bcahDhLNhLKSUBSR1OMiFGzNZ7X
            properties:
                algorithm:
                    default: HS256
                    enum:
                        - ES256
                        - ES256K
                        - ES384
                        - ES512
                        - ESB256
                        - ESB320
                        - ESB384
                        - ESB512
                        - ESP256
                        - ESP384
                        - ESP512
                        - Ed25519
                        - Ed448
                        - EdDSA
                        - HS256
                        - HS384
                        - HS512
                        - PS256
                        - PS384
                        - PS512
                        - RS256
                        - RS384
                        - RS512
                    nullable: true
                    type: string
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                key:
                    nullable: true
                    type: string
                rsa_public_key:
                    nullable: true
                    type: string
                secret:
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
            type: object
        Key:
            additionalProperties: false
            description: A Key object holds a representation of asymmetric keys in various formats. When Kong or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
            example:
                id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
                jwk: '{"alg":"RSA",  "kid": "42",  ...}'
                kid: "42"
                name: a-key
                pem:
                    private_key: '-----BEGIN'
                    public_key: '-----BEGIN'
                set:
                    id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                jwk:
                    description: A JSON Web Key represented as a string.
                    nullable: true
                    type: string
                kid:
                    description: A unique identifier for a key.
                    type: string
                name:
                    description: The name to associate with the given keys.
                    nullable: true
                    type: string
                pem:
                    description: A keypair in PEM format.
                    nullable: true
                    properties:
                        private_key:
                            type: string
                        public_key:
                            type: string
                    type: object
                set:
                    description: The id (an UUID) of the key-set with which to associate the key.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                tags:
                    description: An optional set of strings associated with the Key for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
                x5t:
                    description: X.509 certificate SHA-1 thumbprint.
                    nullable: true
                    type: string
            required:
                - kid
            type: object
        KeyAuth:
            additionalProperties: false
            example:
                consumer:
                    id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
                id: b2f34145-0343-41a4-9602-4c69dec2f269
                key: IL1deIyHyQA40WpeLeA1bIUXuvTwlGjo
            properties:
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                key:
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                ttl:
                    description: key-auth ttl in seconds
                    nullable: true
                    type: integer
            type: object
        KeyAuthWithoutParents:
            additionalProperties: false
            example:
                id: b2f34145-0343-41a4-9602-4c69dec2f269
                key: IL1deIyHyQA40WpeLeA1bIUXuvTwlGjo
            properties:
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                key:
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                ttl:
                    description: key-auth ttl in seconds
                    nullable: true
                    type: integer
            type: object
        KeySet:
            additionalProperties: false
            example:
                id: b58c7d9d-e54f-444c-b24d-cdfc4159f61e
                name: example-key-set
                tags:
                    - idp-keys
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: The name to associate with the given key-set.
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            type: object
        KeyWithoutParents:
            additionalProperties: false
            description: A Key object holds a representation of asymmetric keys in various formats. When Kong or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
            example:
                id: d958f66b-8e99-44d2-b0b4-edd5bbf24658
                jwk: '{"alg":"RSA",  "kid": "42",  ...}'
                kid: "42"
                name: a-key
                pem:
                    private_key: '-----BEGIN'
                    public_key: '-----BEGIN'
                set:
                    id: b86b331c-dcd0-4b3e-97ce-47c5a9543031
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                jwk:
                    description: A JSON Web Key represented as a string.
                    nullable: true
                    type: string
                kid:
                    description: A unique identifier for a key.
                    type: string
                name:
                    description: The name to associate with the given keys.
                    nullable: true
                    type: string
                pem:
                    description: A keypair in PEM format.
                    nullable: true
                    properties:
                        private_key:
                            type: string
                        public_key:
                            type: string
                    type: object
                set:
                    description: The id (an UUID) of the key-set with which to associate the key.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                tags:
                    description: An optional set of strings associated with the Key for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
                x5t:
                    description: X.509 certificate SHA-1 thumbprint.
                    nullable: true
                    type: string
            required:
                - kid
            type: object
        Keyring:
            properties:
                id:
                    description: The ID of the key.
                    example: 8zgITLQh
                    type: string
                key:
                    description: The generated encryption key.
                    example: t6NWgbj3g9cbNVC3/D6oZ2Md1Br5gWtRrqb1T2FZy44=
                    type: string
            type: object
        KeyringExportResponse:
            properties:
                data:
                    description: Opaque blob containing exported keyring material.
                    example: eyJrIjoiV1JZeTdubDlYeFZpR3VVQWtWTXBcL0JiVW1jMWZrWHluc0dKd
                    type: string
            type: object
        MTLSAuth:
            additionalProperties: false
            example:
                ca_certificate:
                    id: b2f34145-0343-41a4-9602-4c69dec2f260
                consumer:
                    id: 84a73fb8-50fc-44a7-a4d5-aa17728ee83f
                id: b2f34145-0343-41a4-9602-4c69dec2f269
                subject_name: CA_Subject_Name
            properties:
                ca_certificate:
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                subject_name:
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
            required:
                - subject_name
            type: object
        MTLSAuthWithoutParents:
            additionalProperties: false
            example:
                ca_certificate:
                    id: b2f34145-0343-41a4-9602-4c69dec2f260
                id: b2f34145-0343-41a4-9602-4c69dec2f269
                subject_name: CA_Subject_Name
            properties:
                ca_certificate:
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                consumer:
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                subject_name:
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
            required:
                - subject_name
            type: object
        OidcJwk:
            additionalProperties: false
            properties:
                id:
                    default: c3cfba2d-1617-453f-a416-52e6edb5f9a0
                    nullable: true
                    type: string
                jwks:
                    nullable: true
                    properties:
                        keys:
                            items:
                                properties:
                                    alg:
                                        type: string
                                    crv:
                                        type: string
                                    d:
                                        type: string
                                    dp:
                                        type: string
                                    dq:
                                        type: string
                                    e:
                                        type: string
                                    issuer:
                                        type: string
                                    k:
                                        type: string
                                    key_ops:
                                        items:
                                            type: string
                                        type: array
                                    kid:
                                        type: string
                                    kty:
                                        type: string
                                    "n":
                                        type: string
                                    oth:
                                        type: string
                                    p:
                                        type: string
                                    q:
                                        type: string
                                    qi:
                                        type: string
                                    r:
                                        type: string
                                    t:
                                        type: string
                                    use:
                                        type: string
                                    x:
                                        type: string
                                    x5c:
                                        items:
                                            type: string
                                        type: array
                                    x5t:
                                        type: string
                                    x5t#S256:
                                        type: string
                                    x5u:
                                        type: string
                                    "y":
                                        type: string
                                type: object
                            type: array
                    required:
                        - keys
                    type: object
            type: object
        PaginationNextResponse:
            description: URI to the next page (may be null)
            type: string
        PaginationOffsetResponse:
            description: Offset is used to paginate through the API. Provide this value to the next list operation to fetch the next page
            type: string
        Partial:
            discriminator:
                mapping:
                    redis-ce: '#/components/schemas/PartialRedisCe'
                    redis-ee: '#/components/schemas/PartialRedisEe'
                propertyName: type
            oneOf:
                - $ref: '#/components/schemas/PartialRedisCe'
                - $ref: '#/components/schemas/PartialRedisEe'
            type: object
        PartialBase:
            additionalProperties: false
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: A unique string representing a UTF-8 encoded name.
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                type:
                    description: The type of partial.
                    type: string
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - type
            type: object
        PartialLink:
            properties:
                id:
                    description: The plugin's unique identifier
                    type: string
                instance_name:
                    description: The instance name of the plugin
                    type: string
                name:
                    description: The plugin's name
                    type: string
            required:
                - id
                - name
            type: object
        PartialRedisCe:
            additionalProperties: false
            example:
                config:
                    database: 0
                    host: localhost
                    password: password
                    port: 6379
                    server_name: redis
                    ssl: false
                    ssl_verify: false
                    timeout: 2000
                    username: username
                type: redis-ce
            properties:
                config:
                    properties:
                        database:
                            default: 0
                            description: Database to use for the Redis connection when using the `redis` strategy
                            type: integer
                        host:
                            description: A string representing a host name, such as example.com.
                            type: string
                        password:
                            description: Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
                            type: string
                        port:
                            default: 6379
                            description: An integer representing a port number between 0 and 65535, inclusive.
                            maximum: 65535
                            minimum: 0
                            type: integer
                        server_name:
                            description: A string representing an SNI (server name indication) value for TLS.
                            type: string
                        ssl:
                            default: false
                            description: If set to true, uses SSL to connect to Redis.
                            type: boolean
                        ssl_verify:
                            default: false
                            description: If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
                            type: boolean
                        timeout:
                            default: 2000
                            description: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
                            maximum: 2.147483646e+09
                            minimum: 0
                            type: integer
                        username:
                            description: Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
                            type: string
                    type: object
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: A unique string representing a UTF-8 encoded name.
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                type:
                    enum:
                        - redis-ce
                    type: string
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - type
                - config
            type: object
        PartialRedisEe:
            additionalProperties: false
            example:
                config:
                    cluster_nodes:
                        - ip: 192.168.1.10
                          port: 6380
                    connect_timeout: 2000
                    database: 0
                    host: localhost
                    keepalive_pool_size: 256
                    password: password
                    port: 6379
                    read_timeout: 1000
                    send_timeout: 1000
                    sentinel_nodes:
                        - host: sentinel1.redis.server
                          port: 26379
                    server_name: redis-ee
                    ssl: false
                    ssl_verify: false
                    username: username
                type: redis-ee
            properties:
                config:
                    properties:
                        cluster_max_redirections:
                            default: 5
                            description: Maximum retry attempts for redirection.
                            type: integer
                        cluster_nodes:
                            description: Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.
                            items:
                                properties:
                                    ip:
                                        default: 127.0.0.1
                                        description: A string representing a host name, such as example.com.
                                        type: string
                                    port:
                                        default: 6379
                                        description: An integer representing a port number between 0 and 65535, inclusive.
                                        maximum: 65535
                                        minimum: 0
                                        type: integer
                                type: object
                            minLength: 1
                            type: array
                        connect_timeout:
                            default: 2000
                            description: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
                            maximum: 2.147483646e+09
                            minimum: 0
                            type: integer
                        connection_is_proxied:
                            default: false
                            description: If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.
                            type: boolean
                        database:
                            default: 0
                            description: Database to use for the Redis connection when using the `redis` strategy
                            type: integer
                        host:
                            default: 127.0.0.1
                            description: A string representing a host name, such as example.com.
                            type: string
                        keepalive_backlog:
                            description: Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
                            maximum: 2.147483646e+09
                            minimum: 0
                            type: integer
                        keepalive_pool_size:
                            default: 256
                            description: The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
                            maximum: 2.147483646e+09
                            minimum: 1
                            type: integer
                        password:
                            description: Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
                            type: string
                        port:
                            default: 6379
                            description: An integer representing a port number between 0 and 65535, inclusive.
                            maximum: 65535
                            minimum: 0
                            type: integer
                        read_timeout:
                            default: 2000
                            description: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
                            maximum: 2.147483646e+09
                            minimum: 0
                            type: integer
                        send_timeout:
                            default: 2000
                            description: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
                            maximum: 2.147483646e+09
                            minimum: 0
                            type: integer
                        sentinel_master:
                            description: Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
                            type: string
                        sentinel_nodes:
                            description: Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.
                            items:
                                properties:
                                    host:
                                        default: 127.0.0.1
                                        description: A string representing a host name, such as example.com.
                                        type: string
                                    port:
                                        default: 6379
                                        description: An integer representing a port number between 0 and 65535, inclusive.
                                        maximum: 65535
                                        minimum: 0
                                        type: integer
                                type: object
                            minLength: 1
                            type: array
                        sentinel_password:
                            description: Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
                            type: string
                        sentinel_role:
                            description: Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.
                            enum:
                                - any
                                - master
                                - slave
                            type: string
                        sentinel_username:
                            description: Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
                            type: string
                        server_name:
                            description: A string representing an SNI (server name indication) value for TLS.
                            type: string
                        ssl:
                            default: false
                            description: If set to true, uses SSL to connect to Redis.
                            type: boolean
                        ssl_verify:
                            default: false
                            description: If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
                            type: boolean
                        username:
                            description: Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
                            type: string
                    type: object
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: A unique string representing a UTF-8 encoded name.
                    nullable: true
                    type: string
                tags:
                    description: A set of strings representing tags.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                type:
                    enum:
                        - redis-ee
                    type: string
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - type
                - config
            type: object
        Plugin:
            additionalProperties: false
            description: A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
            example:
                config:
                    anonymous: null
                    hide_credentials: false
                    key_in_body: false
                    key_in_header: true
                    key_in_query: true
                    key_names:
                        - apikey
                    run_on_preflight: true
                enabled: true
                id: 3fd1eea1-885a-4011-b986-289943ff8177
                name: key-auth
                partials:
                    - id: cff1230a-00f7-4ae8-b376-c370f0eb4dae
                      name: foo-partial
                      path: config.redis
                    - id: 129ee345-cba8-4e55-9d6d-93c223ff91ae
                      name: bar-partial
                      path: config.redis
                protocols:
                    - grpc
                    - grpcs
                    - http
                    - https
            properties:
                config:
                    additionalProperties: true
                    description: The configuration properties for the Plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/).
                    nullable: true
                    type: object
                consumer:
                    description: If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                consumer_group:
                    description: If set, the plugin will activate only for requests where the specified group has been authenticated
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                enabled:
                    default: true
                    description: Whether the plugin is applied.
                    nullable: true
                    type: boolean
                id:
                    description: A string representing a UUID (universally unique identifier).
                    minLength: 1
                    nullable: true
                    type: string
                instance_name:
                    description: A unique string representing a UTF-8 encoded name.
                    nullable: true
                    type: string
                name:
                    description: The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
                    minLength: 1
                    type: string
                ordering:
                    nullable: true
                    properties:
                        after:
                            properties:
                                access:
                                    items:
                                        type: string
                                    type: array
                            type: object
                        before:
                            properties:
                                access:
                                    items:
                                        type: string
                                    type: array
                            type: object
                    type: object
                partials:
                    description: A list of partials to be used by the plugin.
                    items:
                        properties:
                            id:
                                description: A string representing a UUID (universally unique identifier).
                                minLength: 1
                                type: string
                            name:
                                description: A unique string representing a UTF-8 encoded name.
                                type: string
                            path:
                                type: string
                        type: object
                    nullable: true
                    type: array
                protocols:
                    default:
                        - grpc
                        - grpcs
                        - http
                        - https
                    description: A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
                    items:
                        description: A string representing a protocol, such as HTTP or HTTPS.
                        enum:
                            - grpc
                            - grpcs
                            - http
                            - https
                            - tcp
                            - tls
                            - tls_passthrough
                            - udp
                            - ws
                            - wss
                        type: string
                    nullable: true
                    type: array
                route:
                    description: If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                service:
                    description: If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                tags:
                    description: An optional set of strings associated with the Plugin for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - name
            type: object
        PluginSchema:
            properties:
                config:
                    example:
                        key1: value1
                        key2: value2
                    type: object
                consumer:
                    properties:
                        id:
                            example: 5a6b7c8d-1234-5678-90ef-0987654321cd
                            format: uuid
                            type: string
                    type: object
                enabled:
                    example: true
                    type: boolean
                id:
                    example: 1a2b3c4d-5678-90ab-cdef-1234567890ab
                    format: uuid
                    type: string
                name:
                    example: my-plugin
                    type: string
                tags:
                    example:
                        - public
                        - beta
                    items:
                        type: string
                    type: array
            type: object
        PluginWithoutParents:
            additionalProperties: false
            description: A Plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. It is how you can add functionalities to Services that run behind Kong, like Authentication or Rate Limiting for example. You can find more information about how to install and what values each plugin takes by visiting the [Kong Hub](https://docs.konghq.com/hub/). When adding a Plugin Configuration to a Service, every request made by a client to that Service will run said Plugin. If a Plugin needs to be tuned to different values for some specific Consumers, you can do so by creating a separate plugin instance that specifies both the Service and the Consumer, through the `service` and `consumer` fields.
            example:
                config:
                    anonymous: null
                    hide_credentials: false
                    key_in_body: false
                    key_in_header: true
                    key_in_query: true
                    key_names:
                        - apikey
                    run_on_preflight: true
                enabled: true
                id: 3fd1eea1-885a-4011-b986-289943ff8177
                name: key-auth
                partials:
                    - id: cff1230a-00f7-4ae8-b376-c370f0eb4dae
                      name: foo-partial
                      path: config.redis
                    - id: 129ee345-cba8-4e55-9d6d-93c223ff91ae
                      name: bar-partial
                      path: config.redis
                protocols:
                    - grpc
                    - grpcs
                    - http
                    - https
            properties:
                config:
                    additionalProperties: true
                    description: The configuration properties for the Plugin which can be found on the plugins documentation page in the [Kong Hub](https://docs.konghq.com/hub/).
                    nullable: true
                    type: object
                consumer:
                    description: If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                consumer_group:
                    description: If set, the plugin will activate only for requests where the specified group has been authenticated
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                enabled:
                    default: true
                    description: Whether the plugin is applied.
                    nullable: true
                    type: boolean
                id:
                    description: A string representing a UUID (universally unique identifier).
                    minLength: 1
                    nullable: true
                    type: string
                instance_name:
                    description: A unique string representing a UTF-8 encoded name.
                    nullable: true
                    type: string
                name:
                    description: The name of the Plugin that's going to be added. Currently, the Plugin must be installed in every Kong instance separately.
                    minLength: 1
                    type: string
                ordering:
                    nullable: true
                    properties:
                        after:
                            properties:
                                access:
                                    items:
                                        type: string
                                    type: array
                            type: object
                        before:
                            properties:
                                access:
                                    items:
                                        type: string
                                    type: array
                            type: object
                    type: object
                partials:
                    description: A list of partials to be used by the plugin.
                    items:
                        properties:
                            id:
                                description: A string representing a UUID (universally unique identifier).
                                minLength: 1
                                type: string
                            name:
                                description: A unique string representing a UTF-8 encoded name.
                                type: string
                            path:
                                type: string
                        type: object
                    nullable: true
                    type: array
                protocols:
                    default:
                        - grpc
                        - grpcs
                        - http
                        - https
                    description: A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
                    items:
                        description: A string representing a protocol, such as HTTP or HTTPS.
                        enum:
                            - grpc
                            - grpcs
                            - http
                            - https
                            - tcp
                            - tls
                            - tls_passthrough
                            - udp
                            - ws
                            - wss
                        type: string
                    nullable: true
                    type: array
                route:
                    description: If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                service:
                    description: If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                tags:
                    description: An optional set of strings associated with the Plugin for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - name
            type: object
        RbacUser:
            properties:
                comment:
                    description: Any comments associated with the user.
                    type: string
                created_at:
                    description: Unix epoch when the resource was created.
                    type: integer
                enabled:
                    description: Whether or not the user has RBAC enabled.
                    type: boolean
                id:
                    format: uuid
                    type: string
                name:
                    description: The name of the user.
                    type: string
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    type: integer
                user_token:
                    description: The RBAC user token.
                    format: password
                    type: string
                user_token_ident:
                    description: The user token identifier.
                    type: string
            required:
                - name
                - enabled
            type: object
        RbacUserGroup:
            properties:
                group:
                    description: The group assigned to the user.
                    format: uuid
                    type: string
                user:
                    description: The RBAC user associated with the group.
                    format: uuid
                    type: string
            required:
                - user
                - group
            type: object
        RbacUserRole:
            properties:
                role:
                    description: The RBAC role assigned to the user.
                    format: uuid
                    type: string
                role_source:
                    default: local
                    description: The origin of the RBAC user role.
                    enum:
                        - local
                        - idp
                    type: string
                user:
                    description: The RBAC user associated with the role.
                    format: uuid
                    type: string
            required:
                - user
                - role
            type: object
        Route:
            oneOf:
                - $ref: '#/components/schemas/RouteJson'
                - $ref: '#/components/schemas/RouteExpression'
        RouteExpression:
            additionalProperties: false
            description: Route entities define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it. Every request matching a given Route will be proxied to its associated Service. The combination of Routes and Services (and the separation of concerns between them) offers a powerful routing mechanism with which it is possible to define fine-grained entry-points in Kong leading to different upstream services of your infrastructure. You need at least one matching rule that applies to the protocol being matched by the Route.
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                expression:
                    description: Use Router Expression to perform route match. This option is only available when `router_flavor` is set to `expressions`.
                    nullable: true
                    type: string
                https_redirect_status_code:
                    default: 426
                    description: 'The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.'
                    enum:
                        - 301
                        - 302
                        - 307
                        - 308
                        - 426
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
                    nullable: true
                    type: string
                path_handling:
                    default: v0
                    description: Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
                    enum:
                        - v0
                        - v1
                    nullable: true
                    type: string
                preserve_host:
                    default: false
                    description: When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
                    nullable: true
                    type: boolean
                priority:
                    default: 0
                    description: A number used to specify the matching order for expression routes. The higher the `priority`, the sooner an route will be evaluated. This field is ignored unless `expression` field is set.
                    maximum: 7.0368744177663e+13
                    minimum: 0
                    nullable: true
                    type: integer
                protocols:
                    default:
                        - http
                        - https
                    description: An array of the protocols this Route should allow. See the [Route Object](#route-object) section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
                    items:
                        description: A string representing a protocol, such as HTTP or HTTPS.
                        enum:
                            - grpc
                            - grpcs
                            - http
                            - https
                            - tcp
                            - tls
                            - tls_passthrough
                            - udp
                            - ws
                            - wss
                        type: string
                    minLength: 1
                    nullable: true
                    type: array
                request_buffering:
                    default: true
                    description: Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
                    nullable: true
                    type: boolean
                response_buffering:
                    default: true
                    description: Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
                    nullable: true
                    type: boolean
                service:
                    description: The Service this Route is associated to. This is where the Route proxies traffic to.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                strip_path:
                    default: true
                    description: When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
                    nullable: true
                    type: boolean
                tags:
                    description: An optional set of strings associated with the Route for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            type: object
        RouteJson:
            additionalProperties: false
            description: Route entities define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it. Every request matching a given Route will be proxied to its associated Service. The combination of Routes and Services (and the separation of concerns between them) offers a powerful routing mechanism with which it is possible to define fine-grained entry-points in Kong leading to different upstream services of your infrastructure. You need at least one matching rule that applies to the protocol being matched by the Route.
            example:
                hosts:
                    - foo.example.com
                    - foo.example.us
                id: 56c4566c-14cc-4132-9011-4139fcbbe50a
                name: example-route
                paths:
                    - /v1
                    - /v2
                service:
                    id: bd380f99-659d-415e-b0e7-72ea05df3218
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                destinations:
                    description: A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
                    items:
                        properties:
                            ip:
                                description: A string representing an IP address or CIDR block, such as 192.168.1.1 or 192.168.0.0/16.
                                type: string
                            port:
                                description: An integer representing a port number between 0 and 65535, inclusive.
                                maximum: 65535
                                minimum: 0
                                type: integer
                        type: object
                    nullable: true
                    type: array
                headers:
                    additionalProperties:
                        items:
                            type: string
                        type: array
                    description: 'One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.'
                    nullable: true
                    type: object
                hosts:
                    description: A list of domain names that match this Route. Note that the hosts value is case sensitive.
                    items:
                        type: string
                    nullable: true
                    type: array
                https_redirect_status_code:
                    default: 426
                    description: 'The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol.'
                    enum:
                        - 301
                        - 302
                        - 307
                        - 308
                        - 426
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                methods:
                    description: A list of HTTP methods that match this Route.
                    items:
                        description: A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
                        type: string
                    nullable: true
                    type: array
                name:
                    description: The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
                    nullable: true
                    type: string
                path_handling:
                    default: v0
                    description: Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior.
                    enum:
                        - v0
                        - v1
                    nullable: true
                    type: string
                paths:
                    description: A list of paths that match this Route.
                    items:
                        description: A string representing a router path. It must start with a forward slash ('/') for a fixed path, or the sequence '~/' for a regex path. It must not have empty segments.
                        type: string
                    nullable: true
                    type: array
                preserve_host:
                    default: false
                    description: When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
                    nullable: true
                    type: boolean
                protocols:
                    default:
                        - http
                        - https
                    description: An array of the protocols this Route should allow. See the [Route Object](#route-object) section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
                    items:
                        description: A string representing a protocol, such as HTTP or HTTPS.
                        enum:
                            - grpc
                            - grpcs
                            - http
                            - https
                            - tcp
                            - tls
                            - tls_passthrough
                            - udp
                            - ws
                            - wss
                        type: string
                    minLength: 1
                    nullable: true
                    type: array
                regex_priority:
                    default: 0
                    description: A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
                    nullable: true
                    type: integer
                request_buffering:
                    default: true
                    description: Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
                    nullable: true
                    type: boolean
                response_buffering:
                    default: true
                    description: Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
                    nullable: true
                    type: boolean
                service:
                    description: The Service this Route is associated to. This is where the Route proxies traffic to.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                snis:
                    description: A list of SNIs that match this Route when using stream routing.
                    items:
                        description: A string representing a wildcard host name, such as *.example.com.
                        type: string
                    nullable: true
                    type: array
                sources:
                    description: A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
                    items:
                        properties:
                            ip:
                                description: A string representing an IP address or CIDR block, such as 192.168.1.1 or 192.168.0.0/16.
                                type: string
                            port:
                                description: An integer representing a port number between 0 and 65535, inclusive.
                                maximum: 65535
                                minimum: 0
                                type: integer
                        type: object
                    nullable: true
                    type: array
                strip_path:
                    default: true
                    description: When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
                    nullable: true
                    type: boolean
                tags:
                    description: An optional set of strings associated with the Route for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            type: object
        RouteWithoutParents:
            oneOf:
                - $ref: '#/components/schemas/RouteJson'
                - $ref: '#/components/schemas/RouteExpression'
        SNI:
            additionalProperties: false
            description: An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.
            example:
                certificate:
                    id: bd380f99-659d-415e-b0e7-72ea05df3218
                id: 36c4566c-14cc-4132-9011-4139fcbbe50a
                name: some.example.org
            properties:
                certificate:
                    description: The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: The SNI name to associate with the given certificate.
                    type: string
                tags:
                    description: An optional set of strings associated with the SNIs for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - name
                - certificate
            type: object
        SNIWithoutParents:
            additionalProperties: false
            description: An SNI object represents a many-to-one mapping of hostnames to a certificate. That is, a certificate object can have many hostnames associated with it; when Kong receives an SSL request, it uses the SNI field in the Client Hello to lookup the certificate object based on the SNI associated with the certificate.
            example:
                id: 36c4566c-14cc-4132-9011-4139fcbbe50a
                name: some.example.org
            properties:
                certificate:
                    description: The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: The SNI name to associate with the given certificate.
                    type: string
                tags:
                    description: An optional set of strings associated with the SNIs for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - name
            type: object
        Service:
            additionalProperties: false
            description: Service entities, as the name implies, are abstractions of each of your own upstream services. Examples of Services would be a data transformation microservice, a billing API, etc. The main attribute of a Service is its URL (where Kong should proxy traffic to), which can be set as a single string or by specifying its `protocol`, `host`, `port` and `path` individually. Services are associated to Routes (a Service can have many Routes associated with it). Routes are entry-points in Kong and define rules to match client requests. Once a Route is matched, Kong proxies the request to its associated Service. See the [Proxy Reference][proxy-reference] for a detailed explanation of how Kong proxies traffic.
            example:
                host: example.internal
                id: 49fd316e-c457-481c-9fc7-8079153e4f3c
                name: example-service
                path: /
                port: 80
                protocol: http
            properties:
                ca_certificates:
                    description: Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
                    items:
                        type: string
                    nullable: true
                    type: array
                client_certificate:
                    description: Certificate to be used as client certificate while TLS handshaking to the upstream server.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                connect_timeout:
                    default: 60000
                    description: The timeout in milliseconds for establishing a connection to the upstream server.
                    maximum: 2.147483646e+09
                    minimum: 1
                    nullable: true
                    type: integer
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                enabled:
                    default: true
                    description: 'Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.'
                    nullable: true
                    type: boolean
                host:
                    description: The host of the upstream server. Note that the host value is case sensitive.
                    type: string
                id:
                    description: A string representing a UUID (universally unique identifier).
                    minLength: 1
                    nullable: true
                    type: string
                name:
                    description: The Service name.
                    nullable: true
                    type: string
                path:
                    description: The path to be used in requests to the upstream server.
                    nullable: true
                    type: string
                port:
                    default: 80
                    description: The upstream server port.
                    maximum: 65535
                    minimum: 0
                    nullable: true
                    type: integer
                protocol:
                    default: http
                    description: The protocol used to communicate with the upstream.
                    enum:
                        - grpc
                        - grpcs
                        - http
                        - https
                        - tcp
                        - tls
                        - tls_passthrough
                        - udp
                        - ws
                        - wss
                    nullable: true
                    type: string
                read_timeout:
                    default: 60000
                    description: The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
                    maximum: 2.147483646e+09
                    minimum: 1
                    nullable: true
                    type: integer
                retries:
                    default: 5
                    description: The number of retries to execute upon failure to proxy.
                    maximum: 32767
                    minimum: 0
                    nullable: true
                    type: integer
                tags:
                    description: An optional set of strings associated with the Service for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                tls_sans:
                    description: Additional Subject Alternative Names that can be matched on Upstream server's TLS certificate (in addition to `host`).
                    nullable: true
                    properties:
                        dnsnames:
                            description: A dnsName for TLS verification.
                            items:
                                description: A string representing an SNI (server name indication) value for TLS.
                                type: string
                            type: array
                        uris:
                            description: An URI for TLS verification.
                            items:
                                description: A string representing a URL, such as https://example.com/path/to/resource?q=search.
                                type: string
                            type: array
                    type: object
                tls_verify:
                    description: Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
                    nullable: true
                    type: boolean
                tls_verify_depth:
                    description: Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
                    maximum: 64
                    minimum: 0
                    nullable: true
                    type: integer
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
                url:
                    description: Helper field to set `protocol`, `host`, `port` and `path` using a URL. This field is write-only and is not returned in responses.
                    type: string
                    writeOnly: true
                write_timeout:
                    default: 60000
                    description: The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
                    maximum: 2.147483646e+09
                    minimum: 1
                    nullable: true
                    type: integer
            required:
                - host
            type: object
        Target:
            additionalProperties: false
            description: A target is an ip address/hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added, modified, or deleted. Changes take effect on the fly. To disable a target, post a new one with `weight=0`; alternatively, use the `DELETE` convenience method to accomplish the same. The current target object definition is the one with the latest `created_at`.
            example:
                id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
                target: 203.0.113.42
                upstream:
                    id: 5f1d7e76-2fed-4806-a6af-869984f025cb
                weight: 100
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: number
                failover:
                    default: false
                    description: Whether to use this target only as backup or not.
                    nullable: true
                    type: boolean
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                tags:
                    description: An optional set of strings associated with the Target for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                target:
                    description: The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record.
                    nullable: true
                    type: string
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: number
                upstream:
                    description: The unique identifier or the name of the upstream for which to update the target.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                weight:
                    default: 100
                    description: The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record.
                    maximum: 65535
                    minimum: 0
                    nullable: true
                    type: integer
            required:
                - target
            type: object
        TargetWithoutParents:
            additionalProperties: false
            description: A target is an ip address/hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added, modified, or deleted. Changes take effect on the fly. To disable a target, post a new one with `weight=0`; alternatively, use the `DELETE` convenience method to accomplish the same. The current target object definition is the one with the latest `created_at`.
            example:
                id: 089292a7-ba3d-4d88-acf0-97b4b2e2621a
                target: 203.0.113.42
                weight: 100
            properties:
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: number
                failover:
                    default: false
                    description: Whether to use this target only as backup or not.
                    nullable: true
                    type: boolean
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                tags:
                    description: An optional set of strings associated with the Target for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                target:
                    description: The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record.
                    nullable: true
                    type: string
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: number
                upstream:
                    description: The unique identifier or the name of the upstream for which to update the target.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                weight:
                    default: 100
                    description: The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record.
                    maximum: 65535
                    minimum: 0
                    nullable: true
                    type: integer
            required:
                - target
            type: object
        UnauthorizedError:
            properties:
                message:
                    type: string
                status:
                    type: integer
            required:
                - status
                - message
            type: object
        Upstream:
            additionalProperties: false
            description: The upstream object represents a virtual hostname and can be used to loadbalance incoming requests over multiple services (targets). So for example an upstream named `service.v1.xyz` for a Service object whose `host` is `service.v1.xyz`. Requests for this Service would be proxied to the targets defined within the upstream. An upstream also includes a [health checker][healthchecks], which is able to enable and disable targets based on their ability or inability to serve requests. The configuration for the health checker is stored in the upstream object, and applies to all of its targets.
            example:
                algorithm: round-robin
                hash_fallback: none
                hash_on: none
                hash_on_cookie_path: /
                healthchecks:
                    active:
                        concurrency: 10
                        healthy:
                            http_statuses:
                                - 200
                                - 302
                            interval: 0
                            successes: 0
                        http_path: /
                        https_verify_certificate: true
                        timeout: 1
                        type: http
                        unhealthy:
                            http_failures: 0
                            http_statuses:
                                - 429
                                - 404
                                - 500
                                - 501
                                - 502
                                - 503
                                - 504
                                - 505
                            interval: 0
                            tcp_failures: 0
                            timeouts: 0
                    passive:
                        healthy:
                            http_statuses:
                                - 200
                                - 201
                                - 202
                                - 203
                                - 204
                                - 205
                                - 206
                                - 207
                                - 208
                                - 226
                                - 300
                                - 301
                                - 302
                                - 303
                                - 304
                                - 305
                                - 306
                                - 307
                                - 308
                            successes: 0
                        type: http
                        unhealthy:
                            http_failures: 0
                            http_statuses:
                                - 429
                                - 500
                                - 503
                            tcp_failures: 0
                            timeouts: 0
                    threshold: 0
                id: 6eed5e9c-5398-4026-9a4c-d48f18a2431e
                name: api.example.internal
                slots: 10000
            properties:
                algorithm:
                    default: round-robin
                    description: Which load balancing algorithm to use.
                    enum:
                        - consistent-hashing
                        - latency
                        - least-connections
                        - round-robin
                        - sticky-sessions
                    nullable: true
                    type: string
                client_certificate:
                    description: If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
                    nullable: true
                    properties:
                        id:
                            type: string
                    type: object
                    x-foreign: true
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                hash_fallback:
                    default: none
                    description: What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`.
                    enum:
                        - consumer
                        - cookie
                        - header
                        - ip
                        - none
                        - path
                        - query_arg
                        - uri_capture
                    nullable: true
                    type: string
                hash_fallback_header:
                    description: The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.
                    nullable: true
                    type: string
                hash_fallback_query_arg:
                    description: The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
                    minLength: 1
                    nullable: true
                    type: string
                hash_fallback_uri_capture:
                    description: The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
                    minLength: 1
                    nullable: true
                    type: string
                hash_on:
                    default: none
                    description: What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing.
                    enum:
                        - consumer
                        - cookie
                        - header
                        - ip
                        - none
                        - path
                        - query_arg
                        - uri_capture
                    nullable: true
                    type: string
                hash_on_cookie:
                    description: The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
                    nullable: true
                    type: string
                hash_on_cookie_path:
                    default: /
                    description: The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.
                    nullable: true
                    type: string
                hash_on_header:
                    description: The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.
                    nullable: true
                    type: string
                hash_on_query_arg:
                    description: The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
                    minLength: 1
                    nullable: true
                    type: string
                hash_on_uri_capture:
                    description: The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
                    minLength: 1
                    nullable: true
                    type: string
                healthchecks:
                    description: The array of healthchecks.
                    nullable: true
                    properties:
                        active:
                            properties:
                                concurrency:
                                    default: 10
                                    maximum: 2.147483648e+09
                                    minimum: 1
                                    type: integer
                                headers:
                                    additionalProperties:
                                        items:
                                            type: string
                                        type: array
                                    description: A map of header names to arrays of header values.
                                    type: object
                                healthy:
                                    properties:
                                        http_statuses:
                                            default:
                                                - 200
                                                - 302
                                            items:
                                                maximum: 999
                                                minimum: 100
                                                type: integer
                                            type: array
                                        interval:
                                            default: 0
                                            maximum: 65535
                                            minimum: 0
                                            type: number
                                        successes:
                                            default: 0
                                            maximum: 255
                                            minimum: 0
                                            type: integer
                                    type: object
                                http_path:
                                    default: /
                                    description: A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
                                    type: string
                                https_sni:
                                    description: A string representing an SNI (server name indication) value for TLS.
                                    type: string
                                https_verify_certificate:
                                    default: true
                                    type: boolean
                                timeout:
                                    default: 1
                                    maximum: 65535
                                    minimum: 0
                                    type: number
                                type:
                                    default: http
                                    enum:
                                        - grpc
                                        - grpcs
                                        - http
                                        - https
                                        - tcp
                                    type: string
                                unhealthy:
                                    properties:
                                        http_failures:
                                            default: 0
                                            maximum: 255
                                            minimum: 0
                                            type: integer
                                        http_statuses:
                                            default:
                                                - 429
                                                - 404
                                                - 500
                                                - 501
                                                - 502
                                                - 503
                                                - 504
                                                - 505
                                            items:
                                                maximum: 999
                                                minimum: 100
                                                type: integer
                                            type: array
                                        interval:
                                            default: 0
                                            maximum: 65535
                                            minimum: 0
                                            type: number
                                        tcp_failures:
                                            default: 0
                                            maximum: 255
                                            minimum: 0
                                            type: integer
                                        timeouts:
                                            default: 0
                                            maximum: 255
                                            minimum: 0
                                            type: integer
                                    type: object
                            type: object
                        passive:
                            properties:
                                healthy:
                                    properties:
                                        http_statuses:
                                            default:
                                                - 200
                                                - 201
                                                - 202
                                                - 203
                                                - 204
                                                - 205
                                                - 206
                                                - 207
                                                - 208
                                                - 226
                                                - 300
                                                - 301
                                                - 302
                                                - 303
                                                - 304
                                                - 305
                                                - 306
                                                - 307
                                                - 308
                                            items:
                                                maximum: 999
                                                minimum: 100
                                                type: integer
                                            type: array
                                        successes:
                                            default: 0
                                            maximum: 255
                                            minimum: 0
                                            type: integer
                                    type: object
                                type:
                                    default: http
                                    enum:
                                        - grpc
                                        - grpcs
                                        - http
                                        - https
                                        - tcp
                                    type: string
                                unhealthy:
                                    properties:
                                        http_failures:
                                            default: 0
                                            maximum: 255
                                            minimum: 0
                                            type: integer
                                        http_statuses:
                                            default:
                                                - 429
                                                - 500
                                                - 503
                                            items:
                                                maximum: 999
                                                minimum: 100
                                                type: integer
                                            type: array
                                        tcp_failures:
                                            default: 0
                                            maximum: 255
                                            minimum: 0
                                            type: integer
                                        timeouts:
                                            default: 0
                                            maximum: 255
                                            minimum: 0
                                            type: integer
                                    type: object
                            type: object
                        threshold:
                            default: 0
                            maximum: 100
                            minimum: 0
                            type: number
                    type: object
                host_header:
                    description: The hostname to be used as `Host` header when proxying requests through Kong.
                    nullable: true
                    type: string
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: This is a hostname, which must be equal to the `host` of a Service.
                    type: string
                slots:
                    default: 10000
                    description: The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
                    maximum: 65536
                    minimum: 10
                    nullable: true
                    type: integer
                sticky_sessions_cookie:
                    description: The cookie name to keep sticky sessions.
                    nullable: true
                    type: string
                sticky_sessions_cookie_path:
                    default: /
                    description: A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
                    nullable: true
                    type: string
                tags:
                    description: An optional set of strings associated with the Upstream for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
                use_srv_name:
                    default: false
                    description: If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
                    nullable: true
                    type: boolean
            required:
                - name
            type: object
        Vault:
            additionalProperties: false
            description: Vault entities are used to configure different Vault connectors. Examples of Vaults are Environment Variables, Hashicorp Vault and AWS Secrets Manager. Configuring a Vault allows referencing the secrets with other entities. For example a certificate entity can store a reference to a certificate and key, stored in a vault, instead of storing the certificate and key within the entity. This allows a proper separation of secrets and configuration and prevents secret sprawl.
            example:
                config:
                    prefix: ENV_PREFIX
                description: environment variable based vault
                id: 2747d1e5-8246-4f65-a939-b392f1ee17f8
                name: env
                prefix: env
                tags:
                    - foo
                    - bar
            properties:
                config:
                    additionalProperties: true
                    description: The configuration properties for the Vault which can be found on the vaults' documentation page.
                    nullable: true
                    type: object
                created_at:
                    description: Unix epoch when the resource was created.
                    nullable: true
                    type: integer
                description:
                    description: The description of the Vault entity.
                    nullable: true
                    type: string
                id:
                    description: A string representing a UUID (universally unique identifier).
                    nullable: true
                    type: string
                name:
                    description: The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.
                    type: string
                prefix:
                    description: The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.
                    type: string
                tags:
                    description: An optional set of strings associated with the Vault for grouping and filtering.
                    items:
                        description: A string representing a tag.
                        type: string
                    nullable: true
                    type: array
                updated_at:
                    description: Unix epoch when the resource was last updated.
                    nullable: true
                    type: integer
            required:
                - name
                - prefix
            type: object
        Workspace:
            description: Workspaces provide a way to segment Kong entities.
            properties:
                comment:
                    type: string
                config:
                    properties:
                        meta:
                            type: object
                        portal:
                            default: false
                            description: Portal enabled
                            type: boolean
                        portal_access_request_email:
                            type: boolean
                        portal_application_request_email:
                            type: boolean
                        portal_application_status_email:
                            type: boolean
                        portal_approved_email:
                            type: boolean
                        portal_auth:
                            type: string
                        portal_auth_conf:
                            type: string
                        portal_auto_approve:
                            type: boolean
                        portal_cors_origins:
                            items:
                                type: string
                            type: array
                        portal_developer_meta_fields:
                            default: '[{"label":"Full Name","title":"full_name","validator":{"required":true,"type":"string"}}]'
                            type: string
                        portal_emails_from:
                            type: string
                        portal_emails_reply_to:
                            type: string
                        portal_invite_email:
                            type: boolean
                        portal_is_legacy:
                            type: boolean
                        portal_reset_email:
                            type: boolean
                        portal_reset_success_email:
                            type: boolean
                        portal_session_conf:
                            type: string
                        portal_smtp_admin_emails:
                            items:
                                type: string
                            type: array
                        portal_token_exp:
                            type: integer
                    type: object
                created_at:
                    description: Unix epoch when the resource was created.
                    type: integer
                id:
                    description: The unique UUID for this resource.
                    type: string
                meta:
                    properties:
                        color:
                            type: string
                        thumbnail:
                            type: string
                    type: object
                name:
                    type: string
            type: object
            x-examples:
                Example 1:
                    comment: string
                    config:
                        meta: {}
                        portal: false
                        portal_access_request_email: true
                        portal_application_request_email: true
                        portal_application_status_email: true
                        portal_approved_email: true
                        portal_auth: string
                        portal_auth_conf: string
                        portal_auto_approve: true
                        portal_cors_origins:
                            - string
                        portal_developer_meta_fields: '[{"label":"Full Name","title":"full_name","validator":{"required":true,"type":"string"}}]'
                        portal_emails_from: string
                        portal_emails_reply_to: string
                        portal_invite_email: true
                        portal_is_legacy: true
                        portal_reset_email: true
                        portal_reset_success_email: true
                        portal_session_conf: string
                        portal_smtp_admin_emails:
                            - string
                        portal_token_exp: 0
                    created_at: 0
                    id: string
                    meta:
                        color: string
                        thumbnail: string
                    name: string
externalDocs:
    description: Documentation for Kong Gateway and its APIs
    url: https://developer.konghq.com
info:
    contact:
        email: support@konghq.com
        name: Kong Inc
        url: https://konghq.com
    description: |-
        OpenAPI 3.0 spec for Kong Gateway's Admin API.

        You can learn more about Kong Gateway at [developer.konghq.com](https://developer.konghq.com).
        Give Kong a star at the [Kong/kong](https://github.com/kong/kong) repository.
    license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
    title: Kong Enterprise Admin API
    version: 0.0.1
openapi: 3.0.0
paths:
    /:
        get:
            description: |
                Returns detailed information about the Kong gateway instance, including the full Kong configuration, available and unavailable plugins, version, edition (enterprise or community), a tagline, the unique node identifier, and other metadata.
            operationId: geInfo
            responses:
                "200":
                    $ref: '#/components/responses/GetKongInfoResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "405":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UnauthorizedError'
                    description: Method Not Allowed
            summary: Get Kong's instance information
            tags:
                - Information
    /{endpoint}:
        head:
            description: |
                Similar to `HTTP` GET, but does not return the body. Returns HTTP 200 when the endpoint exists or HTTP 404 when it does not. Other status codes are possible.
            operationId: list-endpoints
            responses:
                "204":
                    $ref: '#/components/responses/CheckEndpointExistsResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
                "404":
                    description: Endpoint does not exist
            summary: Check endpoint or entity existence
            tags:
                - Information
        options:
            description: |
                List all the supported HTTP methods by an endpoint. This can also be used with a CORS preflight request.
            operationId: list-options-endpoint
            responses:
                "204":
                    $ref: '#/components/responses/ListEndpointSupportedMethodsResponse'
                "400":
                    description: Bad Request
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Fetch method by endpoint
            tags:
                - Information
        parameters:
            - $ref: '#/components/parameters/Endpoint'
    /{workspace}/acls:
        get:
            description: List all ACLs in a workspace
            operationId: list-acl-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/ACL'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing ACLs
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all ACLs in a workspace
            tags:
                - ACLs
        post:
            description: Create a new ACL in a workspace
            operationId: create-acl-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACL'
                description: Description of the new ACL for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully created ACL
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new ACL in a workspace
            tags:
                - ACLs
    /{workspace}/acls/{ACLId}:
        delete:
            description: Delete an ACL in a workspace
            operationId: delete-acl-in-workspace
            parameters:
                - $ref: '#/components/parameters/ACLId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted ACL or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an ACL in a workspace
            tags:
                - ACLs
        get:
            description: Get an ACL using ID in a workspace.
            operationId: get-acl-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully fetched ACL
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an ACL in a workspace
            tags:
                - ACLs
        parameters:
            - $ref: '#/components/parameters/ACLId'
        patch:
            description: Update an ACL in a workspace
            operationId: update-acl-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACL'
                description: Fields of the ACL that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully updated ACL
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an ACL in a workspace
            tags:
                - ACLs
        put:
            description: Create or Update ACL using ID in a workspace.
            operationId: upsert-acl-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACL'
                description: Description of the ACL
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully upserted ACL
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a ACL in a workspace
            tags:
                - ACLs
    /{workspace}/basic-auths:
        get:
            description: List all Basic-auth credentials in a workspace
            operationId: list-basic-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/BasicAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Basic-auth credentials
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Basic-auth credentials in a workspace
            tags:
                - Basic-auth credentials
        post:
            description: Create a new Basic-auth credential in a workspace
            operationId: create-basic-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuth'
                description: Description of the new Basic-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully created Basic-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Basic-auth credential in a workspace
            tags:
                - Basic-auth credentials
    /{workspace}/basic-auths/{BasicAuthId}:
        delete:
            description: Delete a Basic-auth credential in a workspace
            operationId: delete-basic-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/BasicAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Basic-auth credential or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Basic-auth credential in a workspace
            tags:
                - Basic-auth credentials
        get:
            description: Get a Basic-auth credential using ID in a workspace.
            operationId: get-basic-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully fetched Basic-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Basic-auth credential in a workspace
            tags:
                - Basic-auth credentials
        parameters:
            - $ref: '#/components/parameters/BasicAuthId'
        patch:
            description: Update a Basic-auth credential in a workspace
            operationId: update-basic-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuth'
                description: Fields of the Basic-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully updated Basic-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Basic-auth credential in a workspace
            tags:
                - Basic-auth credentials
        put:
            description: Create or Update Basic-auth credential using ID in a workspace.
            operationId: upsert-basic-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuth'
                description: Description of the Basic-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully upserted Basic-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Basic-auth credential in a workspace
            tags:
                - Basic-auth credentials
    /{workspace}/certificates:
        get:
            description: List all Certificates in a workspace
            operationId: list-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Certificate'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Certificates
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Certificates in a workspace
            tags:
                - Certificates
        post:
            description: Create a new Certificate in a workspace
            operationId: create-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Certificate'
                description: Description of the new Certificate for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Certificate'
                    description: Successfully created Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Certificate in a workspace
            tags:
                - Certificates
    /{workspace}/certificates/{CertificateId}:
        delete:
            description: Delete a Certificate in a workspace
            operationId: delete-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Certificate or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Certificate in a workspace
            tags:
                - Certificates
        get:
            description: Get a Certificate using ID in a workspace.
            operationId: get-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Certificate'
                    description: Successfully fetched Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Certificate in a workspace
            tags:
                - Certificates
        parameters:
            - $ref: '#/components/parameters/CertificateId'
        patch:
            description: Update a Certificate in a workspace
            operationId: update-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Certificate'
                description: Fields of the Certificate that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Certificate'
                    description: Successfully updated Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Certificate in a workspace
            tags:
                - Certificates
        put:
            description: Create or Update Certificate using ID in a workspace.
            operationId: upsert-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Certificate'
                description: Description of the Certificate
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Certificate'
                    description: Successfully upserted Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Certificate in a workspace
            tags:
                - Certificates
    /{workspace}/certificates/{CertificateId}/snis:
        get:
            description: List all SNIs associated with a Certificate in a workspace
            operationId: list-sni-with-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/SNI'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing SNIs
            summary: List all SNIs associated with a Certificate in a workspace
            tags:
                - SNIs
        post:
            description: Create a new SNI associated with a Certificate in a workspace
            operationId: create-sni-with-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNIWithoutParents'
                description: Description of new SNI for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully created SNI
            summary: Create a new SNI associated with a Certificate in a workspace
            tags:
                - SNIs
    /{workspace}/certificates/{CertificateId}/snis/{SNIIdOrName}:
        delete:
            description: Delete a an SNI associated with a Certificate using ID or name in a workspace.
            operationId: delete-sni-with-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/SNIIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted SNI or the resource didn't exist
            summary: Delete a an SNI associated with a Certificate in a workspace
            tags:
                - SNIs
        get:
            description: Get an SNI associated with a Certificate using ID or name in a workspace.
            operationId: get-sni-with-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/SNIIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully fetched SNI
                "404":
                    description: Resource does not exist
            summary: Fetch an SNI associated with a Certificate in a workspace
            tags:
                - SNIs
        patch:
            description: Update a an SNI associated with a Certificate using ID or name in a workspace.
            operationId: update-sni-with-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/SNIIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNI'
                description: Fields of the SNI that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully updated SNI
                "404":
                    description: Resource does not exist
            summary: Update a an SNI associated with a Certificate in a workspace
            tags:
                - SNIs
        put:
            description: Create or Update an SNI associated with a Certificate using ID or name in a workspace.
            operationId: upsert-sni-with-certificate-in-workspace
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/SNIIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNIWithoutParents'
                description: Description of the SNI
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully upserted SNI
            summary: Upsert an SNI associated with a Certificate in a workspace
            tags:
                - SNIs
    /{workspace}/consumer_groups:
        get:
            description: List all Consumer Groups in a workspace
            operationId: list-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/ConsumerGroup'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Consumer Groups
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Consumer Groups in a workspace
            tags:
                - Consumer Groups
        post:
            description: Create a new Consumer Group in a workspace
            operationId: create-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConsumerGroup'
                description: Description of the new Consumer Group for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConsumerGroup'
                    description: Successfully created Consumer Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Consumer Group in a workspace
            tags:
                - Consumer Groups
    /{workspace}/consumer_groups/{ConsumerGroupId}:
        delete:
            description: Delete a Consumer Group in a workspace
            operationId: delete-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Consumer Group or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Consumer Group in a workspace
            tags:
                - Consumer Groups
        get:
            description: Get a Consumer Group using ID in a workspace.
            operationId: get-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConsumerGroupInsideWrapper'
                    description: Successfully fetched Consumer Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Consumer Group in a workspace
            tags:
                - Consumer Groups
        parameters:
            - $ref: '#/components/parameters/ConsumerGroupId'
        patch:
            description: Update a Consumer Group in a workspace
            operationId: update-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConsumerGroup'
                description: Fields of the Consumer Group that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConsumerGroup'
                    description: Successfully updated Consumer Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Consumer Group in a workspace
            tags:
                - Consumer Groups
        put:
            description: Create or Update Consumer Group using ID in a workspace.
            operationId: upsert-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConsumerGroup'
                description: Description of the Consumer Group
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConsumerGroup'
                    description: Successfully upserted Consumer Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Consumer Group in a workspace
            tags:
                - Consumer Groups
    /{workspace}/consumer_groups/{ConsumerGroupId}/consumers:
        delete:
            description: Removes all consumers from a Consumer Groups. This operation does not delete the consumer group in a workspace.
            operationId: remove-all-consumers-from-consumer-group-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Consumers removed from group
                "404":
                    description: Consumer group or consumer association does not exist
            summary: Remove consumers from consumer group in a workspace
            tags:
                - Consumer Groups
            x-unstable: true
        get:
            description: List all consumers in a consumer group in a workspace
            operationId: list-consumers-for-consumer-group-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Consumer'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing of consumers
            summary: List all Consumers in a Consumer Group in a workspace
            tags:
                - Consumer Groups
        parameters:
            - $ref: '#/components/parameters/ConsumerGroupIdManageConsumers'
        post:
            description: Add a consumer to a consumer group in a workspace
            operationId: add-consumer-to-group-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                consumer:
                                    example: cf4c7e60-11db-49dd-b300-7c7e5f0f7e6b
                                    type: string
                                    x-speakeasy-name-override: consumer_id
                            type: object
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                properties:
                                    consumer_group:
                                        $ref: '#/components/schemas/ConsumerGroup'
                                    consumers:
                                        items:
                                            $ref: '#/components/schemas/Consumer'
                                        type: array
                                type: object
                    description: Consumer added to group
            summary: Add consumer to consumer group in a workspace
            tags:
                - Consumer Groups
            x-speakeasy-entity-operation: GatewayConsumerGroupMember#create
    /{workspace}/consumer_groups/{ConsumerGroupId}/consumers/{ConsumerIdOrUsername}:
        delete:
            description: The consumer groups endpoint for removing a consumer from a specified consumer group in a workspace.
            operationId: remove-consumer-from-group-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: |
                        HTTP/1.1 204 No Content
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Remove a consumer from a consumer group in a workspace
            tags:
                - Consumer Groups
        parameters:
            - $ref: '#/components/parameters/ConsumerGroupId'
            - $ref: '#/components/parameters/ConsumerIdOrUsername'
    /{workspace}/consumer_groups/{ConsumerGroupId}/overrides/plugins/rate-limiting-advanced:
        delete:
            description: |-
                Delete custom rate limiting settings for a consumer group. As of Kong Gateway 3.4, you can scope plugins to consumer groups using only the `/consumer_groups` endpoint. Using `overrides` is deprecated, and no longer recommended.
                 in a workspace
            operationId: delete-consumer_groups-group_name_or_id-overrides-plugins-rate-limiting-advanced-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: |
                        HTTP/1.1 204 No Content
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Delete the configurations for a consumer group in a workspace
            tags:
                - Consumer Groups
        parameters:
            - $ref: '#/components/parameters/ConsumerGroupId'
        put:
            description: "Define custom rate limiting settings for a consumer group. This endpoint overrides the settings of the Rate Limiting Advanced plugin. As of Kong Gateway 3.4, you can scope plugins to consumer groups using only the `/consumer_groups` endpoint. Using `overrides` is deprecated, and no longer recommended.\n'401': \n  $ref: '#/components/responses/UnauthorizedRequest'\n in a workspace"
            operationId: update-consumer_groups-group_name_or_id-overrides-plugins-rate-limiting-advanced-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                $ref: '#/components/requestBodies/consumerGroupsConfigResponse'
            responses:
                "201":
                    content:
                        application/json:
                            examples:
                                'Example ':
                                    value:
                                        config:
                                            limit:
                                                - 10
                                            retry_after_jitter_max: 0
                                            window_size:
                                                - 10
                                            window_type: sliding
                                        group: test-group
                                        plugin: rate-limiting-advanced
                            schema:
                                example:
                                    window_size 10:
                                        config:
                                            limit:
                                                - 10
                                            retry_after_jitter_max: 0
                                            window_size:
                                                - 10
                                            window_type: sliding
                                        group: test-group
                                        plugin: rate-limiting-advanced
                                properties:
                                    config:
                                        properties:
                                            limit:
                                                description: |
                                                    An array of one or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.
                                                items:
                                                    example: 10
                                                    type: integer
                                                type: array
                                            retry_after_jitter_max:
                                                description: |
                                                    The upper bound of a jitter (random delay) in seconds to be added to the Retry-After header of denied requests (status = 429) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is 0; in this case, the Retry-After header is equal to the RateLimit-Reset header.
                                                type: integer
                                            window_size:
                                                description: |
                                                    An array of one or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.
                                                items:
                                                    example: 10
                                                    type: integer
                                                type: array
                                            window_type:
                                                description: |
                                                    Set the time window type to either sliding (default) or fixed.
                                                example: sliding
                                                type: string
                                        type: object
                                    group:
                                        description: The consumer group
                                        example: test-group
                                        type: string
                                    plugin:
                                        description: The name of the plugin
                                        example: rate-limiting-advanced
                                        type: string
                                type: object
                    description: Created
            summary: Configure rate limiting for a consumer group in a workspace.
            tags:
                - Consumer Groups
    /{workspace}/consumer_groups/{ConsumerGroupId}/plugins:
        get:
            description: List all Plugins associated with a Consumer Group in a workspace
            operationId: list-plugin-with-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
            summary: List all Plugins associated with a Consumer Group in a workspace
            tags:
                - Plugins
        post:
            description: Create a new Plugin associated with a Consumer Group in a workspace
            operationId: create-plugin-with-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
            summary: Create a new Plugin associated with a Consumer Group in a workspace
            tags:
                - Plugins
    /{workspace}/consumer_groups/{ConsumerGroupId}/plugins/{PluginId}:
        delete:
            description: Delete a a Plugin associated with a Consumer Group using ID in a workspace.
            operationId: delete-plugin-with-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
            summary: Delete a a Plugin associated with a Consumer Group in a workspace
            tags:
                - Plugins
        get:
            description: Get a Plugin associated with a Consumer Group using ID in a workspace.
            operationId: get-plugin-with-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin associated with a Consumer Group in a workspace
            tags:
                - Plugins
        patch:
            description: Update a a Plugin associated with a Consumer Group using ID in a workspace.
            operationId: update-plugin-with-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "404":
                    description: Resource does not exist
            summary: Update a a Plugin associated with a Consumer Group in a workspace
            tags:
                - Plugins
        put:
            description: Create or Update a Plugin associated with a Consumer Group using ID in a workspace.
            operationId: upsert-plugin-with-consumer_group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
            summary: Upsert a Plugin associated with a Consumer Group in a workspace
            tags:
                - Plugins
    /{workspace}/consumers:
        get:
            description: List all Consumers in a workspace
            operationId: list-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Consumer'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Consumers
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Consumers in a workspace
            tags:
                - Consumers
        post:
            description: Create a new Consumer in a workspace
            operationId: create-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Consumer'
                description: Description of the new Consumer for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Consumer'
                    description: Successfully created Consumer
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Consumer in a workspace
            tags:
                - Consumers
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/acls:
        get:
            description: List all ACLs associated with a Consumer in a workspace
            operationId: list-acl-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/ACL'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing ACLs
            summary: List all ACLs associated with a Consumer in a workspace
            tags:
                - ACLs
        post:
            description: Create a new ACL associated with a Consumer in a workspace
            operationId: create-acl-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACLWithoutParents'
                description: Description of new ACL for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully created ACL
            summary: Create a new ACL associated with a Consumer in a workspace
            tags:
                - ACLs
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/acls/{ACLId}:
        delete:
            description: Delete a an ACL associated with a Consumer using ID in a workspace.
            operationId: delete-acl-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/ACLId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted ACL or the resource didn't exist
            summary: Delete a an ACL associated with a Consumer in a workspace
            tags:
                - ACLs
        get:
            description: Get an ACL associated with a Consumer using ID in a workspace.
            operationId: get-acl-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/ACLId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully fetched ACL
                "404":
                    description: Resource does not exist
            summary: Fetch an ACL associated with a Consumer in a workspace
            tags:
                - ACLs
        patch:
            description: Update a an ACL associated with a Consumer using ID in a workspace.
            operationId: update-acl-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/ACLId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACL'
                description: Fields of the ACL that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully updated ACL
                "404":
                    description: Resource does not exist
            summary: Update a an ACL associated with a Consumer in a workspace
            tags:
                - ACLs
        put:
            description: Create or Update an ACL associated with a Consumer using ID in a workspace.
            operationId: upsert-acl-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/ACLId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACLWithoutParents'
                description: Description of the ACL
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully upserted ACL
            summary: Upsert an ACL associated with a Consumer in a workspace
            tags:
                - ACLs
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/basic-auth:
        get:
            description: List all Basic-auth credentials associated with a Consumer in a workspace
            operationId: list-basic-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/BasicAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Basic-auth credentials
            summary: List all Basic-auth credentials associated with a Consumer in a workspace
            tags:
                - Basic-auth credentials
        post:
            description: Create a new Basic-auth credential associated with a Consumer in a workspace
            operationId: create-basic-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuthWithoutParents'
                description: Description of new Basic-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully created Basic-auth credential
            summary: Create a new Basic-auth credential associated with a Consumer in a workspace
            tags:
                - Basic-auth credentials
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/basic-auth/{BasicAuthId}:
        delete:
            description: Delete a a Basic-auth credential associated with a Consumer using ID in a workspace.
            operationId: delete-basic-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/BasicAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Basic-auth credential or the resource didn't exist
            summary: Delete a a Basic-auth credential associated with a Consumer in a workspace
            tags:
                - Basic-auth credentials
        get:
            description: Get a Basic-auth credential associated with a Consumer using ID in a workspace.
            operationId: get-basic-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/BasicAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully fetched Basic-auth credential
                "404":
                    description: Resource does not exist
            summary: Fetch a Basic-auth credential associated with a Consumer in a workspace
            tags:
                - Basic-auth credentials
        patch:
            description: Update a a Basic-auth credential associated with a Consumer using ID in a workspace.
            operationId: update-basic-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/BasicAuthId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuth'
                description: Fields of the Basic-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully updated Basic-auth credential
                "404":
                    description: Resource does not exist
            summary: Update a a Basic-auth credential associated with a Consumer in a workspace
            tags:
                - Basic-auth credentials
        put:
            description: Create or Update a Basic-auth credential associated with a Consumer using ID in a workspace.
            operationId: upsert-basic-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/BasicAuthId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuthWithoutParents'
                description: Description of the Basic-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully upserted Basic-auth credential
            summary: Upsert a Basic-auth credential associated with a Consumer in a workspace
            tags:
                - Basic-auth credentials
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/hmac-auth:
        get:
            description: List all HMAC-auth credentials associated with a Consumer in a workspace
            operationId: list-hmac-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/HMACAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing HMAC-auth credentials
            summary: List all HMAC-auth credentials associated with a Consumer in a workspace
            tags:
                - HMAC-auth credentials
        post:
            description: Create a new HMAC-auth credential associated with a Consumer in a workspace
            operationId: create-hmac-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuthWithoutParents'
                description: Description of new HMAC-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully created HMAC-auth credential
            summary: Create a new HMAC-auth credential associated with a Consumer in a workspace
            tags:
                - HMAC-auth credentials
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/hmac-auth/{HMACAuthId}:
        delete:
            description: Delete a a HMAC-auth credential associated with a Consumer using ID in a workspace.
            operationId: delete-hmac-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/HMACAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted HMAC-auth credential or the resource didn't exist
            summary: Delete a a HMAC-auth credential associated with a Consumer in a workspace
            tags:
                - HMAC-auth credentials
        get:
            description: Get a HMAC-auth credential associated with a Consumer using ID in a workspace.
            operationId: get-hmac-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/HMACAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully fetched HMAC-auth credential
                "404":
                    description: Resource does not exist
            summary: Fetch a HMAC-auth credential associated with a Consumer in a workspace
            tags:
                - HMAC-auth credentials
        patch:
            description: Update a a HMAC-auth credential associated with a Consumer using ID in a workspace.
            operationId: update-hmac-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/HMACAuthId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuth'
                description: Fields of the HMAC-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully updated HMAC-auth credential
                "404":
                    description: Resource does not exist
            summary: Update a a HMAC-auth credential associated with a Consumer in a workspace
            tags:
                - HMAC-auth credentials
        put:
            description: Create or Update a HMAC-auth credential associated with a Consumer using ID in a workspace.
            operationId: upsert-hmac-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/HMACAuthId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuthWithoutParents'
                description: Description of the HMAC-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully upserted HMAC-auth credential
            summary: Upsert a HMAC-auth credential associated with a Consumer in a workspace
            tags:
                - HMAC-auth credentials
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/jwt:
        get:
            description: List all JWTs associated with a Consumer in a workspace
            operationId: list-jwt-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/JWT'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing JWTs
            summary: List all JWTs associated with a Consumer in a workspace
            tags:
                - JWTs
        post:
            description: Create a new JWT associated with a Consumer in a workspace
            operationId: create-jwt-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWTWithoutParents'
                description: Description of new JWT for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully created JWT
            summary: Create a new JWT associated with a Consumer in a workspace
            tags:
                - JWTs
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/jwt/{JWTId}:
        delete:
            description: Delete a a JWT associated with a Consumer using ID in a workspace.
            operationId: delete-jwt-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/JWTId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted JWT or the resource didn't exist
            summary: Delete a a JWT associated with a Consumer in a workspace
            tags:
                - JWTs
        get:
            description: Get a JWT associated with a Consumer using ID in a workspace.
            operationId: get-jwt-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/JWTId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully fetched JWT
                "404":
                    description: Resource does not exist
            summary: Fetch a JWT associated with a Consumer in a workspace
            tags:
                - JWTs
        patch:
            description: Update a a JWT associated with a Consumer using ID in a workspace.
            operationId: update-jwt-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/JWTId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWT'
                description: Fields of the JWT that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully updated JWT
                "404":
                    description: Resource does not exist
            summary: Update a a JWT associated with a Consumer in a workspace
            tags:
                - JWTs
        put:
            description: Create or Update a JWT associated with a Consumer using ID in a workspace.
            operationId: upsert-jwt-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/JWTId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWTWithoutParents'
                description: Description of the JWT
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully upserted JWT
            summary: Upsert a JWT associated with a Consumer in a workspace
            tags:
                - JWTs
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/key-auth:
        get:
            description: List all API-keys associated with a Consumer in a workspace
            operationId: list-key-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/KeyAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing API-keys
            summary: List all API-keys associated with a Consumer in a workspace
            tags:
                - API-keys
        post:
            description: Create a new API-key associated with a Consumer in a workspace
            operationId: create-key-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuthWithoutParents'
                description: Description of new API-key for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully created API-key
            summary: Create a new API-key associated with a Consumer in a workspace
            tags:
                - API-keys
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/key-auth/{KeyAuthId}:
        delete:
            description: Delete a an API-key associated with a Consumer using ID in a workspace.
            operationId: delete-key-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/KeyAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted API-key or the resource didn't exist
            summary: Delete a an API-key associated with a Consumer in a workspace
            tags:
                - API-keys
        get:
            description: Get an API-key associated with a Consumer using ID in a workspace.
            operationId: get-key-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/KeyAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully fetched API-key
                "404":
                    description: Resource does not exist
            summary: Fetch an API-key associated with a Consumer in a workspace
            tags:
                - API-keys
        patch:
            description: Update a an API-key associated with a Consumer using ID in a workspace.
            operationId: update-key-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/KeyAuthId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuth'
                description: Fields of the API-key that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully updated API-key
                "404":
                    description: Resource does not exist
            summary: Update a an API-key associated with a Consumer in a workspace
            tags:
                - API-keys
        put:
            description: Create or Update an API-key associated with a Consumer using ID in a workspace.
            operationId: upsert-key-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/KeyAuthId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuthWithoutParents'
                description: Description of the API-key
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully upserted API-key
            summary: Upsert an API-key associated with a Consumer in a workspace
            tags:
                - API-keys
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/mtls-auth:
        get:
            description: List all MTLS-auth credentials associated with a Consumer in a workspace
            operationId: list-mtls-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/MTLSAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing MTLS-auth credentials
            summary: List all MTLS-auth credentials associated with a Consumer in a workspace
            tags:
                - MTLS-auth credentials
        post:
            description: Create a new MTLS-auth credential associated with a Consumer in a workspace
            operationId: create-mtls-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuthWithoutParents'
                description: Description of new MTLS-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully created MTLS-auth credential
            summary: Create a new MTLS-auth credential associated with a Consumer in a workspace
            tags:
                - MTLS-auth credentials
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/mtls-auth/{MTLSAuthId}:
        delete:
            description: Delete a a MTLS-auth credential associated with a Consumer using ID in a workspace.
            operationId: delete-mtls-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/MTLSAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted MTLS-auth credential or the resource didn't exist
            summary: Delete a a MTLS-auth credential associated with a Consumer in a workspace
            tags:
                - MTLS-auth credentials
        get:
            description: Get a MTLS-auth credential associated with a Consumer using ID in a workspace.
            operationId: get-mtls-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/MTLSAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully fetched MTLS-auth credential
                "404":
                    description: Resource does not exist
            summary: Fetch a MTLS-auth credential associated with a Consumer in a workspace
            tags:
                - MTLS-auth credentials
        patch:
            description: Update a a MTLS-auth credential associated with a Consumer using ID in a workspace.
            operationId: update-mtls-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/MTLSAuthId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuth'
                description: Fields of the MTLS-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully updated MTLS-auth credential
                "404":
                    description: Resource does not exist
            summary: Update a a MTLS-auth credential associated with a Consumer in a workspace
            tags:
                - MTLS-auth credentials
        put:
            description: Create or Update a MTLS-auth credential associated with a Consumer using ID in a workspace.
            operationId: upsert-mtls-auth-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/MTLSAuthId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuthWithoutParents'
                description: Description of the MTLS-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully upserted MTLS-auth credential
            summary: Upsert a MTLS-auth credential associated with a Consumer in a workspace
            tags:
                - MTLS-auth credentials
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/plugins:
        get:
            description: List all Plugins associated with a Consumer in a workspace
            operationId: list-plugin-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
            summary: List all Plugins associated with a Consumer in a workspace
            tags:
                - Plugins
        post:
            description: Create a new Plugin associated with a Consumer in a workspace
            operationId: create-plugin-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
            summary: Create a new Plugin associated with a Consumer in a workspace
            tags:
                - Plugins
    /{workspace}/consumers/{ConsumerIdForNestedEntities}/plugins/{PluginId}:
        delete:
            description: Delete a a Plugin associated with a Consumer using ID in a workspace.
            operationId: delete-plugin-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
            summary: Delete a a Plugin associated with a Consumer in a workspace
            tags:
                - Plugins
        get:
            description: Get a Plugin associated with a Consumer using ID in a workspace.
            operationId: get-plugin-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin associated with a Consumer in a workspace
            tags:
                - Plugins
        patch:
            description: Update a a Plugin associated with a Consumer using ID in a workspace.
            operationId: update-plugin-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "404":
                    description: Resource does not exist
            summary: Update a a Plugin associated with a Consumer in a workspace
            tags:
                - Plugins
        put:
            description: Create or Update a Plugin associated with a Consumer using ID in a workspace.
            operationId: upsert-plugin-with-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
            summary: Upsert a Plugin associated with a Consumer in a workspace
            tags:
                - Plugins
    /{workspace}/consumers/{ConsumerIdOrUsername}:
        delete:
            description: Delete a Consumer in a workspace
            operationId: delete-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Consumer or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Consumer in a workspace
            tags:
                - Consumers
        get:
            description: Get a Consumer using ID or username in a workspace.
            operationId: get-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Consumer'
                    description: Successfully fetched Consumer
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Consumer in a workspace
            tags:
                - Consumers
        parameters:
            - $ref: '#/components/parameters/ConsumerIdOrUsername'
        patch:
            description: Update a Consumer in a workspace
            operationId: update-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Consumer'
                description: Fields of the Consumer that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Consumer'
                    description: Successfully updated Consumer
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Consumer in a workspace
            tags:
                - Consumers
        put:
            description: Create or Update Consumer using ID or username in a workspace.
            operationId: upsert-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Consumer'
                description: Description of the Consumer
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Consumer'
                    description: Successfully upserted Consumer
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Consumer in a workspace
            tags:
                - Consumers
    /{workspace}/consumers/{ConsumerIdOrUsername}/consumer_groups:
        delete:
            description: Removes a consumer from all Consumer Groups. This operation does not delete the consumer group in a workspace.
            operationId: remove-consumer-from-all-consumer-groups-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Consumer removed from all groups
                "404":
                    description: Consumer does not exist
            summary: Remove consumer from all consumer groups in a workspace
            tags:
                - Consumers
        get:
            description: List all Consumer Groups a Consumer belongs to in a workspace
            operationId: list-consumer-groups-for-consumer-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/ConsumerGroup'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Consumer Groups
            summary: List all Consumer Groups a Consumer belongs to in a workspace
            tags:
                - Consumers
        post:
            description: Add a consumer to a consumer group in a workspace
            operationId: add-consumer-to-specific-consumer-group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                group:
                                    example: fedee695-2ae2-4e45-877a-776d9b2fc793
                                    type: string
                                    x-speakeasy-name-override: group
                            type: object
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                properties:
                                    consumer:
                                        $ref: '#/components/schemas/Consumer'
                                    consumer_groups:
                                        items:
                                            $ref: '#/components/schemas/ConsumerGroup'
                                        type: array
                                type: object
                    description: Consumer added to a specific group
            summary: Add consumer to a specific consumer group in a workspace
            tags:
                - Consumers
    /{workspace}/consumers/{ConsumerIdOrUsername}/consumer_groups/{ConsumerGroupId}:
        delete:
            description: Removes a consumer from a Consumer Group. This operation does not delete the consumer group in a workspace.
            operationId: remove-consumer-from-consumer-group-in-workspace
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Consumer removed from group
            summary: Remove consumer from consumer group in a workspace
            tags:
                - Consumers
    /{workspace}/custom-plugins:
        get:
            description: List all CustomPlugins in a workspace
            operationId: list-custom-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/CustomPlugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing CustomPlugins
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all CustomPlugins in a workspace
            tags:
                - CustomPlugins
            x-unstable: true
        post:
            description: Create a new CustomPlugin in a workspace
            operationId: create-custom-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CustomPlugin'
                description: Description of the new CustomPlugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomPlugin'
                    description: Successfully created CustomPlugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new CustomPlugin in a workspace
            tags:
                - CustomPlugins
            x-unstable: true
    /{workspace}/custom-plugins/{CustomPluginIdOrName}:
        delete:
            description: Delete a CustomPlugin in a workspace
            operationId: delete-custom-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/CustomPluginIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted CustomPlugin or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a CustomPlugin in a workspace
            tags:
                - CustomPlugins
            x-unstable: true
        get:
            description: Get a CustomPlugin using ID or name in a workspace.
            operationId: get-custom-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomPlugin'
                    description: Successfully fetched CustomPlugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a CustomPlugin in a workspace
            tags:
                - CustomPlugins
            x-unstable: true
        parameters:
            - $ref: '#/components/parameters/CustomPluginIdOrName'
        patch:
            description: Update a CustomPlugin in a workspace
            operationId: update-custom-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CustomPlugin'
                description: Fields of the CustomPlugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomPlugin'
                    description: Successfully updated CustomPlugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a CustomPlugin in a workspace
            tags:
                - CustomPlugins
        put:
            description: Create or Update CustomPlugin using ID or name in a workspace.
            operationId: upsert-custom-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CustomPlugin'
                description: Description of the CustomPlugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomPlugin'
                    description: Successfully upserted CustomPlugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a CustomPlugin in a workspace
            tags:
                - CustomPlugins
            x-unstable: true
    /{workspace}/degraphql_routes:
        get:
            description: List all Degraphql_routes in a workspace
            operationId: list-degraphql_route-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Degraphql_route'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Degraphql_routes
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Degraphql_routes in a workspace
            tags:
                - Degraphql_routes
        post:
            description: Create a new Degraphql_route in a workspace
            operationId: create-degraphql_route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_route'
                description: Description of the new Degraphql_route for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully created Degraphql_route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Degraphql_route in a workspace
            tags:
                - Degraphql_routes
    /{workspace}/degraphql_routes/{Degraphql_routeIdOrName}:
        delete:
            description: Delete a Degraphql_route in a workspace
            operationId: delete-degraphql_route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Degraphql_route or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Degraphql_route in a workspace
            tags:
                - Degraphql_routes
        get:
            description: Get a Degraphql_route using ID or name in a workspace.
            operationId: get-degraphql_route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully fetched Degraphql_route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Degraphql_route in a workspace
            tags:
                - Degraphql_routes
        parameters:
            - $ref: '#/components/parameters/Degraphql_routeIdOrName'
        patch:
            description: Update a Degraphql_route in a workspace
            operationId: update-degraphql_route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_route'
                description: Fields of the Degraphql_route that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully updated Degraphql_route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Degraphql_route in a workspace
            tags:
                - Degraphql_routes
        put:
            description: Create or Update Degraphql_route using ID or name in a workspace.
            operationId: upsert-degraphql_route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_route'
                description: Description of the Degraphql_route
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully upserted Degraphql_route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Degraphql_route in a workspace
            tags:
                - Degraphql_routes
    /{workspace}/hmac-auths:
        get:
            description: List all HMAC-auth credentials in a workspace
            operationId: list-hmac-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/HMACAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing HMAC-auth credentials
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all HMAC-auth credentials in a workspace
            tags:
                - HMAC-auth credentials
        post:
            description: Create a new HMAC-auth credential in a workspace
            operationId: create-hmac-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuth'
                description: Description of the new HMAC-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully created HMAC-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new HMAC-auth credential in a workspace
            tags:
                - HMAC-auth credentials
    /{workspace}/hmac-auths/{HMACAuthId}:
        delete:
            description: Delete a HMAC-auth credential in a workspace
            operationId: delete-hmac-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/HMACAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted HMAC-auth credential or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a HMAC-auth credential in a workspace
            tags:
                - HMAC-auth credentials
        get:
            description: Get a HMAC-auth credential using ID in a workspace.
            operationId: get-hmac-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully fetched HMAC-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a HMAC-auth credential in a workspace
            tags:
                - HMAC-auth credentials
        parameters:
            - $ref: '#/components/parameters/HMACAuthId'
        patch:
            description: Update a HMAC-auth credential in a workspace
            operationId: update-hmac-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuth'
                description: Fields of the HMAC-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully updated HMAC-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a HMAC-auth credential in a workspace
            tags:
                - HMAC-auth credentials
        put:
            description: Create or Update HMAC-auth credential using ID in a workspace.
            operationId: upsert-hmac-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuth'
                description: Description of the HMAC-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully upserted HMAC-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a HMAC-auth credential in a workspace
            tags:
                - HMAC-auth credentials
    /{workspace}/jwts:
        get:
            description: List all JWTs in a workspace
            operationId: list-jwt-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/JWT'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing JWTs
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all JWTs in a workspace
            tags:
                - JWTs
        post:
            description: Create a new JWT in a workspace
            operationId: create-jwt-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWT'
                description: Description of the new JWT for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully created JWT
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new JWT in a workspace
            tags:
                - JWTs
    /{workspace}/jwts/{JWTId}:
        delete:
            description: Delete a JWT in a workspace
            operationId: delete-jwt-in-workspace
            parameters:
                - $ref: '#/components/parameters/JWTId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted JWT or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a JWT in a workspace
            tags:
                - JWTs
        get:
            description: Get a JWT using ID in a workspace.
            operationId: get-jwt-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully fetched JWT
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a JWT in a workspace
            tags:
                - JWTs
        parameters:
            - $ref: '#/components/parameters/JWTId'
        patch:
            description: Update a JWT in a workspace
            operationId: update-jwt-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWT'
                description: Fields of the JWT that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully updated JWT
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a JWT in a workspace
            tags:
                - JWTs
        put:
            description: Create or Update JWT using ID in a workspace.
            operationId: upsert-jwt-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWT'
                description: Description of the JWT
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully upserted JWT
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a JWT in a workspace
            tags:
                - JWTs
    /{workspace}/key-auths:
        get:
            description: List all API-keys in a workspace
            operationId: list-key-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/KeyAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing API-keys
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all API-keys in a workspace
            tags:
                - API-keys
        post:
            description: Create a new API-key in a workspace
            operationId: create-key-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuth'
                description: Description of the new API-key for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully created API-key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new API-key in a workspace
            tags:
                - API-keys
    /{workspace}/key-auths/{KeyAuthId}:
        delete:
            description: Delete an API-key in a workspace
            operationId: delete-key-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeyAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted API-key or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an API-key in a workspace
            tags:
                - API-keys
        get:
            description: Get an API-key using ID in a workspace.
            operationId: get-key-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully fetched API-key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an API-key in a workspace
            tags:
                - API-keys
        parameters:
            - $ref: '#/components/parameters/KeyAuthId'
        patch:
            description: Update an API-key in a workspace
            operationId: update-key-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuth'
                description: Fields of the API-key that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully updated API-key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an API-key in a workspace
            tags:
                - API-keys
        put:
            description: Create or Update API-key using ID in a workspace.
            operationId: upsert-key-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuth'
                description: Description of the API-key
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully upserted API-key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a API-key in a workspace
            tags:
                - API-keys
    /{workspace}/key-sets:
        get:
            description: List all KeySets in a workspace
            operationId: list-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/KeySet'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing KeySets
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all KeySets in a workspace
            tags:
                - KeySets
        post:
            description: Create a new KeySet in a workspace
            operationId: create-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeySet'
                description: Description of the new KeySet for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeySet'
                    description: Successfully created KeySet
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new KeySet in a workspace
            tags:
                - KeySets
    /{workspace}/key-sets/{KeySetIdOrName}:
        delete:
            description: Delete a KeySet in a workspace
            operationId: delete-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted KeySet or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a KeySet in a workspace
            tags:
                - KeySets
        get:
            description: Get a KeySet using ID or name in a workspace.
            operationId: get-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeySet'
                    description: Successfully fetched KeySet
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a KeySet in a workspace
            tags:
                - KeySets
        parameters:
            - $ref: '#/components/parameters/KeySetIdOrName'
        patch:
            description: Update a KeySet in a workspace
            operationId: update-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeySet'
                description: Fields of the KeySet that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeySet'
                    description: Successfully updated KeySet
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a KeySet in a workspace
            tags:
                - KeySets
        put:
            description: Create or Update KeySet using ID or name in a workspace.
            operationId: upsert-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeySet'
                description: Description of the KeySet
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeySet'
                    description: Successfully upserted KeySet
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a KeySet in a workspace
            tags:
                - KeySets
    /{workspace}/key-sets/{KeySetIdOrName}/keys:
        get:
            description: List all Keys associated with a KeySet in a workspace
            operationId: list-key-with-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Key'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Keys
            summary: List all Keys associated with a KeySet in a workspace
            tags:
                - Keys
        post:
            description: Create a new Key associated with a KeySet in a workspace
            operationId: create-key-with-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyWithoutParents'
                description: Description of new Key for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully created Key
            summary: Create a new Key associated with a KeySet in a workspace
            tags:
                - Keys
    /{workspace}/key-sets/{KeySetIdOrName}/keys/{KeyIdOrName}:
        delete:
            description: Delete a a Key associated with a KeySet using ID or name in a workspace.
            operationId: delete-key-with-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/KeyIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Key or the resource didn't exist
            summary: Delete a a Key associated with a KeySet in a workspace
            tags:
                - Keys
        get:
            description: Get a Key associated with a KeySet using ID or name in a workspace.
            operationId: get-key-with-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/KeyIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully fetched Key
                "404":
                    description: Resource does not exist
            summary: Fetch a Key associated with a KeySet in a workspace
            tags:
                - Keys
        patch:
            description: Update a a Key associated with a KeySet using ID or name in a workspace.
            operationId: update-key-with-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/KeyIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
                description: Fields of the Key that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully updated Key
                "404":
                    description: Resource does not exist
            summary: Update a a Key associated with a KeySet in a workspace
            tags:
                - Keys
        put:
            description: Create or Update a Key associated with a KeySet using ID or name in a workspace.
            operationId: upsert-key-with-key-set-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/KeyIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyWithoutParents'
                description: Description of the Key
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully upserted Key
            summary: Upsert a Key associated with a KeySet in a workspace
            tags:
                - Keys
    /{workspace}/keys:
        get:
            description: List all Keys in a workspace
            operationId: list-key-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Key'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Keys
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Keys in a workspace
            tags:
                - Keys
        post:
            description: Create a new Key in a workspace
            operationId: create-key-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
                description: Description of the new Key for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully created Key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Key in a workspace
            tags:
                - Keys
    /{workspace}/keys/{KeyIdOrName}:
        delete:
            description: Delete a Key in a workspace
            operationId: delete-key-in-workspace
            parameters:
                - $ref: '#/components/parameters/KeyIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Key or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Key in a workspace
            tags:
                - Keys
        get:
            description: Get a Key using ID or name in a workspace.
            operationId: get-key-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully fetched Key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Key in a workspace
            tags:
                - Keys
        parameters:
            - $ref: '#/components/parameters/KeyIdOrName'
        patch:
            description: Update a Key in a workspace
            operationId: update-key-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
                description: Fields of the Key that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully updated Key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Key in a workspace
            tags:
                - Keys
        put:
            description: Create or Update Key using ID or name in a workspace.
            operationId: upsert-key-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
                description: Description of the Key
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully upserted Key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Key in a workspace
            tags:
                - Keys
    /{workspace}/mtls-auths:
        get:
            description: List all MTLS-auth credentials in a workspace
            operationId: list-mtls-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/MTLSAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing MTLS-auth credentials
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all MTLS-auth credentials in a workspace
            tags:
                - MTLS-auth credentials
        post:
            description: Create a new MTLS-auth credential in a workspace
            operationId: create-mtls-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuth'
                description: Description of the new MTLS-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully created MTLS-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new MTLS-auth credential in a workspace
            tags:
                - MTLS-auth credentials
    /{workspace}/mtls-auths/{MTLSAuthId}:
        delete:
            description: Delete a MTLS-auth credential in a workspace
            operationId: delete-mtls-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/MTLSAuthId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted MTLS-auth credential or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a MTLS-auth credential in a workspace
            tags:
                - MTLS-auth credentials
        get:
            description: Get a MTLS-auth credential using ID in a workspace.
            operationId: get-mtls-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully fetched MTLS-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a MTLS-auth credential in a workspace
            tags:
                - MTLS-auth credentials
        parameters:
            - $ref: '#/components/parameters/MTLSAuthId'
        patch:
            description: Update a MTLS-auth credential in a workspace
            operationId: update-mtls-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuth'
                description: Fields of the MTLS-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully updated MTLS-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a MTLS-auth credential in a workspace
            tags:
                - MTLS-auth credentials
        put:
            description: Create or Update MTLS-auth credential using ID in a workspace.
            operationId: upsert-mtls-auth-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuth'
                description: Description of the MTLS-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully upserted MTLS-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a MTLS-auth credential in a workspace
            tags:
                - MTLS-auth credentials
    /{workspace}/oic_jwks:
        get:
            description: List all OIDC JWKs in a workspace
            operationId: list-oic_jwk-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/OidcJwk'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing OIDC JWKs
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all OIDC JWKs in a workspace
            tags:
                - OIDC JWKs
        post:
            description: Create a new OIDC JWK in a workspace
            operationId: create-oic_jwk-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OidcJwk'
                description: Description of the new OIDC JWK for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcJwk'
                    description: Successfully created OIDC JWK
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new OIDC JWK in a workspace
            tags:
                - OIDC JWKs
    /{workspace}/oic_jwks/{OidcJwkId}:
        delete:
            description: Delete an OIDC JWK in a workspace
            operationId: delete-oic_jwk-in-workspace
            parameters:
                - $ref: '#/components/parameters/OidcJwkId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted OIDC JWK or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an OIDC JWK in a workspace
            tags:
                - OIDC JWKs
        get:
            description: Get an OIDC JWK using ID in a workspace.
            operationId: get-oic_jwk-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcJwk'
                    description: Successfully fetched OIDC JWK
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an OIDC JWK in a workspace
            tags:
                - OIDC JWKs
        parameters:
            - $ref: '#/components/parameters/OidcJwkId'
        patch:
            description: Update an OIDC JWK in a workspace
            operationId: update-oic_jwk-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OidcJwk'
                description: Fields of the OIDC JWK that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcJwk'
                    description: Successfully updated OIDC JWK
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an OIDC JWK in a workspace
            tags:
                - OIDC JWKs
        put:
            description: Create or Update OIDC JWK using ID in a workspace.
            operationId: upsert-oic_jwk-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OidcJwk'
                description: Description of the OIDC JWK
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcJwk'
                    description: Successfully upserted OIDC JWK
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a OIDC JWK in a workspace
            tags:
                - OIDC JWKs
    /{workspace}/partials:
        get:
            description: List all Partials in a workspace
            operationId: list-partial-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Partial'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Partials
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Partials in a workspace
            tags:
                - Partials
        post:
            description: Create a new Partial in a workspace
            operationId: create-partial-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Partial'
                description: Description of the new Partial for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Partial'
                    description: Successfully created Partial
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Partial in a workspace
            tags:
                - Partials
    /{workspace}/partials/{PartialId}:
        delete:
            description: Delete a Partial in a workspace
            operationId: delete-partial-in-workspace
            parameters:
                - $ref: '#/components/parameters/PartialId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Partial or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Partial in a workspace
            tags:
                - Partials
        get:
            description: Get a Partial using ID in a workspace.
            operationId: get-partial-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Partial'
                    description: Successfully fetched Partial
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Partial in a workspace
            tags:
                - Partials
        parameters:
            - $ref: '#/components/parameters/PartialId'
        patch:
            description: Update a Partial in a workspace
            operationId: update-partial-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Partial'
                description: Fields of the Partial that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Partial'
                    description: Successfully updated Partial
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Partial in a workspace
            tags:
                - Partials
        put:
            description: Create or Update Partial using ID in a workspace.
            operationId: upsert-partial-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Partial'
                description: Description of the Partial
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Partial'
                    description: Successfully upserted Partial
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Partial in a workspace
            tags:
                - Partials
    /{workspace}/plugins:
        get:
            description: List all Plugins in a workspace
            operationId: list-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Plugins in a workspace
            tags:
                - Plugins
        post:
            description: Create a new Plugin in a workspace
            operationId: create-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Description of the new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Plugin in a workspace
            tags:
                - Plugins
    /{workspace}/plugins/{PluginId}:
        delete:
            description: Delete a Plugin in a workspace
            operationId: delete-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Plugin in a workspace
            tags:
                - Plugins
        get:
            description: Get a Plugin using ID in a workspace.
            operationId: get-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin in a workspace
            tags:
                - Plugins
        parameters:
            - $ref: '#/components/parameters/PluginId'
        patch:
            description: Update a Plugin in a workspace
            operationId: update-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Plugin in a workspace
            tags:
                - Plugins
        put:
            description: Create or Update Plugin using ID in a workspace.
            operationId: upsert-plugin-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Plugin in a workspace
            tags:
                - Plugins
    /{workspace}/routes:
        get:
            description: List all Routes in a workspace
            operationId: list-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Route'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Routes
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Routes in a workspace
            tags:
                - Routes
        post:
            description: Create a new Route in a workspace
            operationId: create-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Route'
                description: Description of the new Route for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully created Route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Route in a workspace
            tags:
                - Routes
    /{workspace}/routes/{RouteIdOrName}:
        delete:
            description: Delete a Route in a workspace
            operationId: delete-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Route or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Route in a workspace
            tags:
                - Routes
        get:
            description: Get a Route using ID or name in a workspace.
            operationId: get-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully fetched Route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Route in a workspace
            tags:
                - Routes
        parameters:
            - $ref: '#/components/parameters/RouteIdOrName'
        patch:
            description: Update a Route in a workspace
            operationId: update-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Route'
                description: Fields of the Route that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully updated Route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Route in a workspace
            tags:
                - Routes
        put:
            description: Create or Update Route using ID or name in a workspace.
            operationId: upsert-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Route'
                description: Description of the Route
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully upserted Route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Route in a workspace
            tags:
                - Routes
    /{workspace}/routes/{RouteIdOrName}/plugins:
        get:
            description: List all Plugins associated with a Route in a workspace
            operationId: list-plugin-with-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
            summary: List all Plugins associated with a Route in a workspace
            tags:
                - Plugins
        post:
            description: Create a new Plugin associated with a Route in a workspace
            operationId: create-plugin-with-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
            summary: Create a new Plugin associated with a Route in a workspace
            tags:
                - Plugins
    /{workspace}/routes/{RouteIdOrName}/plugins/{PluginId}:
        delete:
            description: Delete a a Plugin associated with a Route using ID in a workspace.
            operationId: delete-plugin-with-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
            summary: Delete a a Plugin associated with a Route in a workspace
            tags:
                - Plugins
        get:
            description: Get a Plugin associated with a Route using ID in a workspace.
            operationId: get-plugin-with-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin associated with a Route in a workspace
            tags:
                - Plugins
        patch:
            description: Update a a Plugin associated with a Route using ID in a workspace.
            operationId: update-plugin-with-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "404":
                    description: Resource does not exist
            summary: Update a a Plugin associated with a Route in a workspace
            tags:
                - Plugins
        put:
            description: Create or Update a Plugin associated with a Route using ID in a workspace.
            operationId: upsert-plugin-with-route-in-workspace
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
            summary: Upsert a Plugin associated with a Route in a workspace
            tags:
                - Plugins
    /{workspace}/services:
        get:
            description: List all Services in a workspace
            operationId: list-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Service'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Services
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Services in a workspace
            tags:
                - Services
        post:
            description: Create a new Service in a workspace
            operationId: create-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Service'
                description: Description of the new Service for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully created Service
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Service in a workspace
            tags:
                - Services
    /{workspace}/services/{ServiceIdOrName}:
        delete:
            description: Delete a Service in a workspace
            operationId: delete-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Service or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Service in a workspace
            tags:
                - Services
        get:
            description: Get a Service using ID or name in a workspace.
            operationId: get-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully fetched Service
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Service in a workspace
            tags:
                - Services
        parameters:
            - $ref: '#/components/parameters/ServiceIdOrName'
        patch:
            description: Update a Service in a workspace
            operationId: update-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Service'
                description: Fields of the Service that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully updated Service
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Service in a workspace
            tags:
                - Services
        put:
            description: Create or Update Service using ID or name in a workspace.
            operationId: upsert-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Service'
                description: Description of the Service
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully upserted Service
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Service in a workspace
            tags:
                - Services
    /{workspace}/services/{ServiceIdOrName}/degraphql/routes:
        get:
            description: List all Degraphql_routes associated with a Service in a workspace
            operationId: list-degraphql_route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Degraphql_route'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Degraphql_routes
            summary: List all Degraphql_routes associated with a Service in a workspace
            tags:
                - Degraphql_routes
        post:
            description: Create a new Degraphql_route associated with a Service in a workspace
            operationId: create-degraphql_route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_routeWithoutParents'
                description: Description of new Degraphql_route for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully created Degraphql_route
            summary: Create a new Degraphql_route associated with a Service in a workspace
            tags:
                - Degraphql_routes
    /{workspace}/services/{ServiceIdOrName}/degraphql/routes/{Degraphql_routeIdOrName}:
        delete:
            description: Delete a a Degraphql_route associated with a Service using ID or name in a workspace.
            operationId: delete-degraphql_route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Degraphql_route or the resource didn't exist
            summary: Delete a a Degraphql_route associated with a Service in a workspace
            tags:
                - Degraphql_routes
        get:
            description: Get a Degraphql_route associated with a Service using ID or name in a workspace.
            operationId: get-degraphql_route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully fetched Degraphql_route
                "404":
                    description: Resource does not exist
            summary: Fetch a Degraphql_route associated with a Service in a workspace
            tags:
                - Degraphql_routes
        patch:
            description: Update a a Degraphql_route associated with a Service using ID or name in a workspace.
            operationId: update-degraphql_route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_route'
                description: Fields of the Degraphql_route that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully updated Degraphql_route
                "404":
                    description: Resource does not exist
            summary: Update a a Degraphql_route associated with a Service in a workspace
            tags:
                - Degraphql_routes
        put:
            description: Create or Update a Degraphql_route associated with a Service using ID or name in a workspace.
            operationId: upsert-degraphql_route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_routeWithoutParents'
                description: Description of the Degraphql_route
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully upserted Degraphql_route
            summary: Upsert a Degraphql_route associated with a Service in a workspace
            tags:
                - Degraphql_routes
    /{workspace}/services/{ServiceIdOrName}/plugins:
        get:
            description: List all Plugins associated with a Service in a workspace
            operationId: list-plugin-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
            summary: List all Plugins associated with a Service in a workspace
            tags:
                - Plugins
        post:
            description: Create a new Plugin associated with a Service in a workspace
            operationId: create-plugin-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
            summary: Create a new Plugin associated with a Service in a workspace
            tags:
                - Plugins
    /{workspace}/services/{ServiceIdOrName}/plugins/{PluginId}:
        delete:
            description: Delete a a Plugin associated with a Service using ID in a workspace.
            operationId: delete-plugin-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
            summary: Delete a a Plugin associated with a Service in a workspace
            tags:
                - Plugins
        get:
            description: Get a Plugin associated with a Service using ID in a workspace.
            operationId: get-plugin-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin associated with a Service in a workspace
            tags:
                - Plugins
        patch:
            description: Update a a Plugin associated with a Service using ID in a workspace.
            operationId: update-plugin-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "404":
                    description: Resource does not exist
            summary: Update a a Plugin associated with a Service in a workspace
            tags:
                - Plugins
        put:
            description: Create or Update a Plugin associated with a Service using ID in a workspace.
            operationId: upsert-plugin-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PluginId'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
            summary: Upsert a Plugin associated with a Service in a workspace
            tags:
                - Plugins
    /{workspace}/services/{ServiceIdOrName}/routes:
        get:
            description: List all Routes associated with a Service in a workspace
            operationId: list-route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Route'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Routes
            summary: List all Routes associated with a Service in a workspace
            tags:
                - Routes
        post:
            description: Create a new Route associated with a Service in a workspace
            operationId: create-route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RouteWithoutParents'
                description: Description of new Route for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully created Route
            summary: Create a new Route associated with a Service in a workspace
            tags:
                - Routes
    /{workspace}/services/{ServiceIdOrName}/routes/{RouteIdOrName}:
        delete:
            description: Delete a a Route associated with a Service using ID or name in a workspace.
            operationId: delete-route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Route or the resource didn't exist
            summary: Delete a a Route associated with a Service in a workspace
            tags:
                - Routes
        get:
            description: Get a Route associated with a Service using ID or name in a workspace.
            operationId: get-route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully fetched Route
                "404":
                    description: Resource does not exist
            summary: Fetch a Route associated with a Service in a workspace
            tags:
                - Routes
        patch:
            description: Update a a Route associated with a Service using ID or name in a workspace.
            operationId: update-route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Route'
                description: Fields of the Route that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully updated Route
                "404":
                    description: Resource does not exist
            summary: Update a a Route associated with a Service in a workspace
            tags:
                - Routes
        put:
            description: Create or Update a Route associated with a Service using ID or name in a workspace.
            operationId: upsert-route-with-service-in-workspace
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RouteWithoutParents'
                description: Description of the Route
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully upserted Route
            summary: Upsert a Route associated with a Service in a workspace
            tags:
                - Routes
    /{workspace}/snis:
        get:
            description: List all SNIs in a workspace
            operationId: list-sni-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/SNI'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing SNIs
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all SNIs in a workspace
            tags:
                - SNIs
        post:
            description: Create a new SNI in a workspace
            operationId: create-sni-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNI'
                description: Description of the new SNI for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully created SNI
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new SNI in a workspace
            tags:
                - SNIs
    /{workspace}/snis/{SNIIdOrName}:
        delete:
            description: Delete an SNI in a workspace
            operationId: delete-sni-in-workspace
            parameters:
                - $ref: '#/components/parameters/SNIIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted SNI or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an SNI in a workspace
            tags:
                - SNIs
        get:
            description: Get an SNI using ID or name in a workspace.
            operationId: get-sni-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully fetched SNI
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an SNI in a workspace
            tags:
                - SNIs
        parameters:
            - $ref: '#/components/parameters/SNIIdOrName'
        patch:
            description: Update an SNI in a workspace
            operationId: update-sni-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNI'
                description: Fields of the SNI that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully updated SNI
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an SNI in a workspace
            tags:
                - SNIs
        put:
            description: Create or Update SNI using ID or name in a workspace.
            operationId: upsert-sni-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNI'
                description: Description of the SNI
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully upserted SNI
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a SNI in a workspace
            tags:
                - SNIs
    /{workspace}/upstreams:
        get:
            description: List all Upstreams in a workspace
            operationId: list-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Upstream'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Upstreams
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Upstreams in a workspace
            tags:
                - Upstreams
        post:
            description: Create a new Upstream in a workspace
            operationId: create-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Upstream'
                description: Description of the new Upstream for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Upstream'
                    description: Successfully created Upstream
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Upstream in a workspace
            tags:
                - Upstreams
    /{workspace}/upstreams/{UpstreamIdForTarget}/targets:
        get:
            description: List all Targets associated with an Upstream in a workspace
            operationId: list-target-with-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Target'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Targets
            summary: List all Targets associated with an Upstream in a workspace
            tags:
                - Targets
        post:
            description: Create a new Target associated with an Upstream in a workspace
            operationId: create-target-with-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TargetWithoutParents'
                description: Description of new Target for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Target'
                    description: Successfully created Target
            summary: Create a new Target associated with an Upstream in a workspace
            tags:
                - Targets
    /{workspace}/upstreams/{UpstreamIdForTarget}/targets/{TargetIdOrTarget}:
        delete:
            description: Delete a a Target associated with an Upstream using ID or target in a workspace.
            operationId: delete-target-with-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/TargetIdOrTarget'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Target or the resource didn't exist
            summary: Delete a a Target associated with an Upstream in a workspace
            tags:
                - Targets
        get:
            description: Get a Target associated with an Upstream using ID or target in a workspace.
            operationId: get-target-with-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/TargetIdOrTarget'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Target'
                    description: Successfully fetched Target
                "404":
                    description: Resource does not exist
            summary: Fetch a Target associated with an Upstream in a workspace
            tags:
                - Targets
        patch:
            description: Update a a Target associated with an Upstream using ID or target in a workspace.
            operationId: update-target-with-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/TargetIdOrTarget'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Target'
                description: Fields of the Target that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Target'
                    description: Successfully updated Target
                "404":
                    description: Resource does not exist
            summary: Update a a Target associated with an Upstream in a workspace
            tags:
                - Targets
        put:
            description: Create or Update a Target associated with an Upstream using ID or target in a workspace.
            operationId: upsert-target-with-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/TargetIdOrTarget'
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TargetWithoutParents'
                description: Description of the Target
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Target'
                    description: Successfully upserted Target
            summary: Upsert a Target associated with an Upstream in a workspace
            tags:
                - Targets
    /{workspace}/upstreams/{UpstreamIdOrName}:
        delete:
            description: Delete an Upstream in a workspace
            operationId: delete-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/UpstreamIdOrName'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Upstream or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an Upstream in a workspace
            tags:
                - Upstreams
        get:
            description: Get an Upstream using ID or name in a workspace.
            operationId: get-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Upstream'
                    description: Successfully fetched Upstream
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an Upstream in a workspace
            tags:
                - Upstreams
        parameters:
            - $ref: '#/components/parameters/UpstreamIdOrName'
        patch:
            description: Update an Upstream in a workspace
            operationId: update-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Upstream'
                description: Fields of the Upstream that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Upstream'
                    description: Successfully updated Upstream
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an Upstream in a workspace
            tags:
                - Upstreams
        put:
            description: Create or Update Upstream using ID or name in a workspace.
            operationId: upsert-upstream-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Upstream'
                description: Description of the Upstream
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Upstream'
                    description: Successfully upserted Upstream
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Upstream in a workspace
            tags:
                - Upstreams
    /{workspace}/vaults:
        get:
            description: List all Vaults in a workspace
            operationId: list-vault-in-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Vault'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Vaults
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Vaults in a workspace
            tags:
                - Vaults
        post:
            description: Create a new Vault in a workspace
            operationId: create-vault-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Vault'
                description: Description of the new Vault for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Vault'
                    description: Successfully created Vault
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Vault in a workspace
            tags:
                - Vaults
    /{workspace}/vaults/{VaultIdOrPrefix}:
        delete:
            description: Delete a Vault in a workspace
            operationId: delete-vault-in-workspace
            parameters:
                - $ref: '#/components/parameters/VaultIdOrPrefix'
                - $ref: '#/components/parameters/Workspace'
            responses:
                "204":
                    description: Successfully deleted Vault or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Vault in a workspace
            tags:
                - Vaults
        get:
            description: Get a Vault using ID or prefix in a workspace.
            operationId: get-vault-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Vault'
                    description: Successfully fetched Vault
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Vault in a workspace
            tags:
                - Vaults
        parameters:
            - $ref: '#/components/parameters/VaultIdOrPrefix'
        patch:
            description: Update a Vault in a workspace
            operationId: update-vault-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Vault'
                description: Fields of the Vault that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Vault'
                    description: Successfully updated Vault
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Vault in a workspace
            tags:
                - Vaults
        put:
            description: Create or Update Vault using ID or prefix in a workspace.
            operationId: upsert-vault-in-workspace
            parameters:
                - $ref: '#/components/parameters/Workspace'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Vault'
                description: Description of the Vault
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Vault'
                    description: Successfully upserted Vault
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Vault in a workspace
            tags:
                - Vaults
    /acls:
        get:
            description: List all ACLs
            operationId: list-acl
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/ACL'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing ACLs
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all ACLs
            tags:
                - ACLs
        post:
            description: Create a new ACL
            operationId: create-acl
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACL'
                description: Description of the new ACL for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully created ACL
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new ACL
            tags:
                - ACLs
    /acls/{ACLId}:
        delete:
            description: Delete an ACL
            operationId: delete-acl
            parameters:
                - $ref: '#/components/parameters/ACLId'
            responses:
                "204":
                    description: Successfully deleted ACL or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an ACL
            tags:
                - ACLs
        get:
            description: Get an ACL using ID.
            operationId: get-acl
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully fetched ACL
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an ACL
            tags:
                - ACLs
        parameters:
            - $ref: '#/components/parameters/ACLId'
        patch:
            description: Update an ACL
            operationId: update-acl
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACL'
                description: Fields of the ACL that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully updated ACL
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an ACL
            tags:
                - ACLs
        put:
            description: Create or Update ACL using ID.
            operationId: upsert-acl
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACL'
                description: Description of the ACL
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully upserted ACL
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a ACL
            tags:
                - ACLs
    /admins:
        get:
            description: Returns a list of admins. To query all admins, add a parameter `all_workspaces=true` to the `/admins` endpoint. The `status` field in the response indicates the state of the admins invitation. `0`= Approved, `1`= Pending, `2`= Rejected, `3`= Revoked, `4` = Invited, `5`= Unverified.
            operationId: get-admins
            responses:
                "200":
                    $ref: '#/components/responses/ListAdminsResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List Admins
            tags:
                - Admins
        post:
            description: Invite an admin to your organization.
            operationId: create-admins
            requestBody:
                $ref: '#/components/requestBodies/AdminCreationRequest'
            responses:
                "200":
                    description: OK
                "409":
                    description: Conflict
            summary: Invite an Admin
            tags:
                - Admins
    /admins/{AdminId}:
        delete:
            description: Delete a Admin
            operationId: delete-admin
            parameters:
                - $ref: '#/components/parameters/AdminId'
            responses:
                "204":
                    description: Successfully deleted Admin or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Admin
            tags:
                - Admins
        get:
            description: Get a Admin using ID.
            operationId: get-admin
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Admin'
                    description: Successfully fetched Admin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Admin
            tags:
                - Admins
        parameters:
            - $ref: '#/components/parameters/AdminId'
        patch:
            description: Update a Admin
            operationId: update-admin
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Admin'
                description: Fields of the Admin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Admin'
                    description: Successfully updated Admin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Admin
            tags:
                - Admins
        put:
            description: Create or Update Admin using ID.
            operationId: upsert-admin
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Admin'
                description: Description of the Admin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Admin'
                    description: Successfully upserted Admin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Admin
            tags:
                - Admins
    /admins/{adminNameOrId}/roles:
        delete:
            description: Delete an admin's roles by passing a comma-separated string of names of specific roles to remove from an admin.
            operationId: delete-admins-name_or_id-roles
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Delete an Admin’s Role
            tags:
                - Admins
        get:
            description: List all roles related to a registered admin.
            operationId: get-admins-name_or_id-roles
            responses:
                "200":
                    description: OK
            summary: List an Admin’s Roles
            tags:
                - Admins
        parameters:
            - $ref: '#/components/parameters/AdminNameOrId'
        post:
            description: Create or update roles for an admin
            operationId: create-admins-name_or_id-roles
            requestBody:
                $ref: '#/components/requestBodies/AdminRoleUpdateRequest'
            responses:
                "201":
                    $ref: '#/components/responses/AdminRolesCreated'
            summary: Create or Update an Admin’s Roles
            tags:
                - Admins
    /admins/{adminNameOrId}/workspaces:
        get:
            description: Return workspaces associated with an admin.
            operationId: get-admins-name_or_id-workspaces
            responses:
                "200":
                    $ref: '#/components/responses/ListWorkspaceResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List an Admin’s Workspaces
            tags:
                - Admins
        parameters:
            - $ref: '#/components/parameters/AdminNameOrId'
    /admins/{adminNameOrId}/workspaces/{workspaceNameOrId}:
        parameters:
            - $ref: '#/components/parameters/AdminNameOrId'
            - $ref: '#/components/parameters/WorkspaceNameOrId'
        patch:
            description: Change the `belong_workspace` property for the specified admin.
            operationId: update-admins-name_or_id-workspaces-workspace_name_or_id
            responses:
                "200":
                    content:
                        application/json:
                            examples:
                                Example response body:
                                    value:
                                        created_at: 1.556638385e+09
                                        email: test@test.com
                                        id: 665b4070-541f-48bf-82c1-53030babaa81
                                        rbac_token_enabled: true
                                        status: 4
                                        updated_at: 1.556638385e+09
                                        username: test-admin
                            schema:
                                properties:
                                    created_at:
                                        type: integer
                                    email:
                                        type: string
                                    id:
                                        type: string
                                    rbac_token_enabled:
                                        type: boolean
                                    status:
                                        type: integer
                                    updated_at:
                                        type: integer
                                    username:
                                        type: string
                                type: object
                    description: OK
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Update an Admin's Workspace
            tags:
                - Admins
    /admins/password_resets:
        patch:
            description: Reset an admin's password.
            operationId: update-admins-password-resets
            requestBody:
                $ref: '#/components/requestBodies/AdminPasswordResetConfirmationRequest'
            responses:
                "200":
                    description: OK
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Reset an Admin’s Password
            tags:
                - Admins
        post:
            description: Using a registered admin's email address issue a password reset email to the admin.
            operationId: get-admins-password-resets
            requestBody:
                $ref: '#/components/requestBodies/AdminPasswordResetRequest'
            responses:
                "201":
                    description: Created
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Send a Password Reset Email to an Admin
            tags:
                - Admins
    /admins/register:
        post:
            description: Register an Admin's Credentials
            operationId: create-admins-credentials
            requestBody:
                $ref: '#/components/requestBodies/AdminCredentialRegistrationRequest'
            responses:
                "201":
                    description: Created
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Register an Admin’s Credentials
            tags:
                - Admins
    /audit/objects:
        get:
            description: List database audit logs (ordered by request timestamp - latest to oldest)
            operationId: get-audit-objects
            parameters:
                - $ref: '#/components/parameters/beforeAuditLogFilter'
                - $ref: '#/components/parameters/afterAuditLogFilter'
            responses:
                "200":
                    $ref: '#/components/responses/DatabaseAuditLogResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: List database audit logs
            tags:
                - Audit Logs
    /audit/requests:
        get:
            description: |-
                You can access request and database audit logs through the Admin API.
                The default order of audit log is by request timestamp - latest to oldest.
                For usage examples, see [Audit Logging in Kong Gateway](https://developer.konghq.com/gateway/Audit Logs/).
            operationId: get-audit-requests
            parameters:
                - $ref: '#/components/parameters/beforeAuditLogFilter'
                - $ref: '#/components/parameters/afterAuditLogFilter'
            responses:
                "200":
                    $ref: '#/components/responses/ListAuditObjectsResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: List request audit logs
            tags:
                - Audit Logs
    /basic-auths:
        get:
            description: List all Basic-auth credentials
            operationId: list-basic-auth
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/BasicAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Basic-auth credentials
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Basic-auth credentials
            tags:
                - Basic-auth credentials
        post:
            description: Create a new Basic-auth credential
            operationId: create-basic-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuth'
                description: Description of the new Basic-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully created Basic-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Basic-auth credential
            tags:
                - Basic-auth credentials
    /basic-auths/{BasicAuthId}:
        delete:
            description: Delete a Basic-auth credential
            operationId: delete-basic-auth
            parameters:
                - $ref: '#/components/parameters/BasicAuthId'
            responses:
                "204":
                    description: Successfully deleted Basic-auth credential or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Basic-auth credential
            tags:
                - Basic-auth credentials
        get:
            description: Get a Basic-auth credential using ID.
            operationId: get-basic-auth
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully fetched Basic-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Basic-auth credential
            tags:
                - Basic-auth credentials
        parameters:
            - $ref: '#/components/parameters/BasicAuthId'
        patch:
            description: Update a Basic-auth credential
            operationId: update-basic-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuth'
                description: Fields of the Basic-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully updated Basic-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Basic-auth credential
            tags:
                - Basic-auth credentials
        put:
            description: Create or Update Basic-auth credential using ID.
            operationId: upsert-basic-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuth'
                description: Description of the Basic-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully upserted Basic-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Basic-auth credential
            tags:
                - Basic-auth credentials
    /ca_certificates:
        get:
            description: List all CA Certificates
            operationId: list-ca_certificate
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/CACertificate'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing CA Certificates
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all CA Certificates
            tags:
                - CA Certificates
        post:
            description: Create a new CA Certificate
            operationId: create-ca_certificate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CACertificate'
                description: Description of the new CA Certificate for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CACertificate'
                    description: Successfully created CA Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new CA Certificate
            tags:
                - CA Certificates
    /ca_certificates/{CACertificateId}:
        delete:
            description: Delete a CA Certificate
            operationId: delete-ca_certificate
            parameters:
                - $ref: '#/components/parameters/CACertificateId'
            responses:
                "204":
                    description: Successfully deleted CA Certificate or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a CA Certificate
            tags:
                - CA Certificates
        get:
            description: Get a CA Certificate using ID.
            operationId: get-ca_certificate
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CACertificate'
                    description: Successfully fetched CA Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a CA Certificate
            tags:
                - CA Certificates
        parameters:
            - $ref: '#/components/parameters/CACertificateId'
        patch:
            description: Update a CA Certificate
            operationId: update-ca_certificate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CACertificate'
                description: Fields of the CA Certificate that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CACertificate'
                    description: Successfully updated CA Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a CA Certificate
            tags:
                - CA Certificates
        put:
            description: Create or Update CA Certificate using ID.
            operationId: upsert-ca_certificate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CACertificate'
                description: Description of the CA Certificate
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CACertificate'
                    description: Successfully upserted CA Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a CA Certificate
            tags:
                - CA Certificates
    /cache:
        delete:
            description: |
                Purge all cache entries in both `kong.cache` and `kong.core_cache`.
            operationId: delete-cache-entries
            responses:
                "204":
                    description: All cache entries purged successfully.
            summary: Purge all cache entries
            tags:
                - Cache
    /cache/{key}:
        delete:
            description: |
                Invalidate the cache for a specific key in both `kong.cache` and `kong.core_cache`.
            operationId: deleteCacheByKey
            parameters:
                - $ref: '#/components/parameters/Key'
            responses:
                "204":
                    description: Cache invalidated successfully.
            summary: Invalidate cache by key
            tags:
                - Cache
        get:
            description: |
                Retrieve the cached value for a specific key. This endpoint probes both `kong.cache` and `kong.core_cache`.  If the key exists, it returns the associated value and TTL. If not found, it returns a 404.
            operationId: get-cache-by-key
            parameters:
                - $ref: '#/components/parameters/Key'
            responses:
                "200":
                    $ref: '#/components/responses/CacheEntryFoundResponse'
                "404":
                    content:
                        application/json:
                            schema:
                                properties:
                                    message:
                                        example: Not found
                                        type: string
                                type: object
                    description: Cache key not found.
            summary: Get cache value by key
            tags:
                - Cache
    /certificates:
        get:
            description: List all Certificates
            operationId: list-certificate
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Certificate'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Certificates
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Certificates
            tags:
                - Certificates
        post:
            description: Create a new Certificate
            operationId: create-certificate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Certificate'
                description: Description of the new Certificate for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Certificate'
                    description: Successfully created Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Certificate
            tags:
                - Certificates
    /certificates/{CertificateId}:
        delete:
            description: Delete a Certificate
            operationId: delete-certificate
            parameters:
                - $ref: '#/components/parameters/CertificateId'
            responses:
                "204":
                    description: Successfully deleted Certificate or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Certificate
            tags:
                - Certificates
        get:
            description: Get a Certificate using ID.
            operationId: get-certificate
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Certificate'
                    description: Successfully fetched Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Certificate
            tags:
                - Certificates
        parameters:
            - $ref: '#/components/parameters/CertificateId'
        patch:
            description: Update a Certificate
            operationId: update-certificate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Certificate'
                description: Fields of the Certificate that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Certificate'
                    description: Successfully updated Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Certificate
            tags:
                - Certificates
        put:
            description: Create or Update Certificate using ID.
            operationId: upsert-certificate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Certificate'
                description: Description of the Certificate
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Certificate'
                    description: Successfully upserted Certificate
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Certificate
            tags:
                - Certificates
    /certificates/{CertificateId}/snis:
        get:
            description: List all SNIs associated with a Certificate
            operationId: list-sni-with-certificate
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/SNI'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing SNIs
            summary: List all SNIs associated with a Certificate
            tags:
                - SNIs
        post:
            description: Create a new SNI associated with a Certificate
            operationId: create-sni-with-certificate
            parameters:
                - $ref: '#/components/parameters/CertificateId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNIWithoutParents'
                description: Description of new SNI for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully created SNI
            summary: Create a new SNI associated with a Certificate
            tags:
                - SNIs
    /certificates/{CertificateId}/snis/{SNIIdOrName}:
        delete:
            description: Delete a an SNI associated with a Certificate using ID or name.
            operationId: delete-sni-with-certificate
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/SNIIdOrName'
            responses:
                "204":
                    description: Successfully deleted SNI or the resource didn't exist
            summary: Delete a an SNI associated with a Certificate
            tags:
                - SNIs
        get:
            description: Get an SNI associated with a Certificate using ID or name.
            operationId: get-sni-with-certificate
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/SNIIdOrName'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully fetched SNI
                "404":
                    description: Resource does not exist
            summary: Fetch an SNI associated with a Certificate
            tags:
                - SNIs
        patch:
            description: Update a an SNI associated with a Certificate using ID or name.
            operationId: update-sni-with-certificate
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/SNIIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNI'
                description: Fields of the SNI that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully updated SNI
                "404":
                    description: Resource does not exist
            summary: Update a an SNI associated with a Certificate
            tags:
                - SNIs
        put:
            description: Create or Update an SNI associated with a Certificate using ID or name.
            operationId: upsert-sni-with-certificate
            parameters:
                - $ref: '#/components/parameters/CertificateId'
                - $ref: '#/components/parameters/SNIIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNIWithoutParents'
                description: Description of the SNI
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully upserted SNI
            summary: Upsert an SNI associated with a Certificate
            tags:
                - SNIs
    /clustering/data-planes:
        get:
            description: |
                Retrieve a list of all data planes connected to the control plane. This endpoint is only accessible when Kong Gateway is running in hybrid mode.
            operationId: get-data-planes
            responses:
                "200":
                    $ref: '#/components/responses/GetConnectedDataPlanesListResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                properties:
                                    message:
                                        example: This endpoint is only available when Kong is running as a control plane for the cluster.
                                        type: string
                                type: object
                    description: Kong Gateway is not running as a control plane.
            summary: Retrieve connected data planes
            tags:
                - Clustering
    /clustering/status:
        get:
            description: |
                Retrieve a status report for all data planes connected to the control plane. It includes information like the config hash, hostname, IP address, and last seen timestamp. This endpoint is only accessible when Kong Gateway is running in hybrid mode.
            operationId: get-dataplane-status
            responses:
                "200":
                    $ref: '#/components/responses/GetConnectedDataPlaneStatusResponse'
                "400":
                    content:
                        application/json:
                            schema:
                                properties:
                                    message:
                                        example: This endpoint is only available when Kong is running as a control plane for the cluster.
                                        type: string
                                type: object
                    description: Kong Gateway is not running as a control plane.
            summary: Retrieve the status of connected data planes
            tags:
                - Clustering
    /config:
        get:
            description: |
                Get the current configuration.

                > Note: This API is only available in DB-less mode.
            operationId: get-config
            responses:
                "200":
                    $ref: '#/components/responses/GetDeclarativeConfigResponse'
            summary: Get Declarative Config
            tags:
                - Config
        post:
            description: |
                Apply a configuration from a declarative JSON or YAML file. Any existing configuration will be overwritten/

                > Note: This API is only available in DB-less mode.
            operationId: create-config
            requestBody:
                $ref: '#/components/requestBodies/CreateDeclarativeConfigRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateDeclarativeConfigResponse'
            summary: Apply Declarative Config
            tags:
                - Config
    /consumer_groups:
        get:
            description: List all Consumer Groups
            operationId: list-consumer_group
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/ConsumerGroup'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Consumer Groups
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Consumer Groups
            tags:
                - Consumer Groups
        post:
            description: Create a new Consumer Group
            operationId: create-consumer_group
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConsumerGroup'
                description: Description of the new Consumer Group for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConsumerGroup'
                    description: Successfully created Consumer Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Consumer Group
            tags:
                - Consumer Groups
    /consumer_groups/{ConsumerGroupId}:
        delete:
            description: Delete a Consumer Group
            operationId: delete-consumer_group
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
            responses:
                "204":
                    description: Successfully deleted Consumer Group or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Consumer Group
            tags:
                - Consumer Groups
        get:
            description: Get a Consumer Group using ID.
            operationId: get-consumer_group
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConsumerGroupInsideWrapper'
                    description: Successfully fetched Consumer Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Consumer Group
            tags:
                - Consumer Groups
        parameters:
            - $ref: '#/components/parameters/ConsumerGroupId'
        patch:
            description: Update a Consumer Group
            operationId: update-consumer_group
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConsumerGroup'
                description: Fields of the Consumer Group that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConsumerGroup'
                    description: Successfully updated Consumer Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Consumer Group
            tags:
                - Consumer Groups
        put:
            description: Create or Update Consumer Group using ID.
            operationId: upsert-consumer_group
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ConsumerGroup'
                description: Description of the Consumer Group
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ConsumerGroup'
                    description: Successfully upserted Consumer Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Consumer Group
            tags:
                - Consumer Groups
    /consumer_groups/{ConsumerGroupId}/consumers:
        delete:
            description: Removes all consumers from a Consumer Groups. This operation does not delete the consumer group.
            operationId: remove-all-consumers-from-consumer-group
            responses:
                "204":
                    description: Consumers removed from group
                "404":
                    description: Consumer group or consumer association does not exist
            summary: Remove consumers from consumer group
            tags:
                - Consumer Groups
            x-unstable: true
        get:
            description: List all consumers in a consumer group
            operationId: list-consumers-for-consumer-group
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Consumer'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing of consumers
            summary: List all Consumers in a Consumer Group
            tags:
                - Consumer Groups
        parameters:
            - $ref: '#/components/parameters/ConsumerGroupIdManageConsumers'
        post:
            description: Add a consumer to a consumer group
            operationId: add-consumer-to-group
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                consumer:
                                    example: cf4c7e60-11db-49dd-b300-7c7e5f0f7e6b
                                    type: string
                                    x-speakeasy-name-override: consumer_id
                            type: object
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                properties:
                                    consumer_group:
                                        $ref: '#/components/schemas/ConsumerGroup'
                                    consumers:
                                        items:
                                            $ref: '#/components/schemas/Consumer'
                                        type: array
                                type: object
                    description: Consumer added to group
            summary: Add consumer to consumer group
            tags:
                - Consumer Groups
            x-speakeasy-entity-operation: GatewayConsumerGroupMember#create
    /consumer_groups/{ConsumerGroupId}/consumers/{ConsumerIdOrUsername}:
        delete:
            description: Remove a consumer from a consumer group
            operationId: remove-consumer-from-group
            responses:
                "204":
                    description: Consumer removed from group
            summary: Remove consumer from consumer group
            tags:
                - Consumer Groups
            x-speakeasy-entity-operation: GatewayConsumerGroupMember#delete
        parameters:
            - $ref: '#/components/parameters/ConsumerGroupIdManageConsumers'
            - in: path
              name: ConsumerIdOrUsername
              required: true
              schema:
                type: string
    /consumer_groups/{ConsumerGroupId}/overrides/plugins/rate-limiting-advanced:
        delete:
            description: |
                Delete custom rate limiting settings for a consumer group. As of Kong Gateway 3.4, you can scope plugins to consumer groups using only the `/consumer_groups` endpoint. Using `overrides` is deprecated, and no longer recommended.
            operationId: delete-consumer_groups-group_name_or_id-overrides-plugins-rate-limiting-advanced
            responses:
                "204":
                    description: |
                        HTTP/1.1 204 No Content
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Delete the configurations for a consumer group
            tags:
                - Consumer Groups
        parameters:
            - $ref: '#/components/parameters/ConsumerGroupId'
        put:
            description: "Define custom rate limiting settings for a consumer group. This endpoint overrides the settings of the Rate Limiting Advanced plugin. As of Kong Gateway 3.4, you can scope plugins to consumer groups using only the `/consumer_groups` endpoint. Using `overrides` is deprecated, and no longer recommended.\n'401': \n  $ref: '#/components/responses/UnauthorizedRequest'\n"
            operationId: update-consumer_groups-group_name_or_id-overrides-plugins-rate-limiting-advanced
            requestBody:
                $ref: '#/components/requestBodies/consumerGroupsConfigResponse'
            responses:
                "201":
                    content:
                        application/json:
                            examples:
                                'Example ':
                                    value:
                                        config:
                                            limit:
                                                - 10
                                            retry_after_jitter_max: 0
                                            window_size:
                                                - 10
                                            window_type: sliding
                                        group: test-group
                                        plugin: rate-limiting-advanced
                            schema:
                                example:
                                    window_size 10:
                                        config:
                                            limit:
                                                - 10
                                            retry_after_jitter_max: 0
                                            window_size:
                                                - 10
                                            window_type: sliding
                                        group: test-group
                                        plugin: rate-limiting-advanced
                                properties:
                                    config:
                                        properties:
                                            limit:
                                                description: |
                                                    An array of one or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.
                                                items:
                                                    example: 10
                                                    type: integer
                                                type: array
                                            retry_after_jitter_max:
                                                description: |
                                                    The upper bound of a jitter (random delay) in seconds to be added to the Retry-After header of denied requests (status = 429) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is 0; in this case, the Retry-After header is equal to the RateLimit-Reset header.
                                                type: integer
                                            window_size:
                                                description: |
                                                    An array of one or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.
                                                items:
                                                    example: 10
                                                    type: integer
                                                type: array
                                            window_type:
                                                description: |
                                                    Set the time window type to either sliding (default) or fixed.
                                                example: sliding
                                                type: string
                                        type: object
                                    group:
                                        description: The consumer group
                                        example: test-group
                                        type: string
                                    plugin:
                                        description: The name of the plugin
                                        example: rate-limiting-advanced
                                        type: string
                                type: object
                    description: Created
            summary: Configure rate limiting for a consumer group.
            tags:
                - Consumer Groups
    /consumer_groups/{ConsumerGroupId}/plugins:
        get:
            description: List all Plugins associated with a Consumer Group
            operationId: list-plugin-with-consumer_group
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
            summary: List all Plugins associated with a Consumer Group
            tags:
                - Plugins
        post:
            description: Create a new Plugin associated with a Consumer Group
            operationId: create-plugin-with-consumer_group
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
            summary: Create a new Plugin associated with a Consumer Group
            tags:
                - Plugins
    /consumer_groups/{ConsumerGroupId}/plugins/{PluginId}:
        delete:
            description: Delete a a Plugin associated with a Consumer Group using ID.
            operationId: delete-plugin-with-consumer_group
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PluginId'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
            summary: Delete a a Plugin associated with a Consumer Group
            tags:
                - Plugins
        get:
            description: Get a Plugin associated with a Consumer Group using ID.
            operationId: get-plugin-with-consumer_group
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PluginId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin associated with a Consumer Group
            tags:
                - Plugins
        patch:
            description: Update a a Plugin associated with a Consumer Group using ID.
            operationId: update-plugin-with-consumer_group
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PluginId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "404":
                    description: Resource does not exist
            summary: Update a a Plugin associated with a Consumer Group
            tags:
                - Plugins
        put:
            description: Create or Update a Plugin associated with a Consumer Group using ID.
            operationId: upsert-plugin-with-consumer_group
            parameters:
                - $ref: '#/components/parameters/ConsumerGroupId'
                - $ref: '#/components/parameters/PluginId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
            summary: Upsert a Plugin associated with a Consumer Group
            tags:
                - Plugins
    /consumers:
        get:
            description: List all Consumers
            operationId: list-consumer
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Consumer'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Consumers
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Consumers
            tags:
                - Consumers
        post:
            description: Create a new Consumer
            operationId: create-consumer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Consumer'
                description: Description of the new Consumer for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Consumer'
                    description: Successfully created Consumer
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Consumer
            tags:
                - Consumers
    /consumers/{ConsumerIdForNestedEntities}/acls:
        get:
            description: List all ACLs associated with a Consumer
            operationId: list-acl-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/ACL'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing ACLs
            summary: List all ACLs associated with a Consumer
            tags:
                - ACLs
        post:
            description: Create a new ACL associated with a Consumer
            operationId: create-acl-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACLWithoutParents'
                description: Description of new ACL for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully created ACL
            summary: Create a new ACL associated with a Consumer
            tags:
                - ACLs
    /consumers/{ConsumerIdForNestedEntities}/acls/{ACLId}:
        delete:
            description: Delete a an ACL associated with a Consumer using ID.
            operationId: delete-acl-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/ACLId'
            responses:
                "204":
                    description: Successfully deleted ACL or the resource didn't exist
            summary: Delete a an ACL associated with a Consumer
            tags:
                - ACLs
        get:
            description: Get an ACL associated with a Consumer using ID.
            operationId: get-acl-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/ACLId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully fetched ACL
                "404":
                    description: Resource does not exist
            summary: Fetch an ACL associated with a Consumer
            tags:
                - ACLs
        patch:
            description: Update a an ACL associated with a Consumer using ID.
            operationId: update-acl-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/ACLId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACL'
                description: Fields of the ACL that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully updated ACL
                "404":
                    description: Resource does not exist
            summary: Update a an ACL associated with a Consumer
            tags:
                - ACLs
        put:
            description: Create or Update an ACL associated with a Consumer using ID.
            operationId: upsert-acl-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/ACLId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ACLWithoutParents'
                description: Description of the ACL
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ACL'
                    description: Successfully upserted ACL
            summary: Upsert an ACL associated with a Consumer
            tags:
                - ACLs
    /consumers/{ConsumerIdForNestedEntities}/basic-auth:
        get:
            description: List all Basic-auth credentials associated with a Consumer
            operationId: list-basic-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/BasicAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Basic-auth credentials
            summary: List all Basic-auth credentials associated with a Consumer
            tags:
                - Basic-auth credentials
        post:
            description: Create a new Basic-auth credential associated with a Consumer
            operationId: create-basic-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuthWithoutParents'
                description: Description of new Basic-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully created Basic-auth credential
            summary: Create a new Basic-auth credential associated with a Consumer
            tags:
                - Basic-auth credentials
    /consumers/{ConsumerIdForNestedEntities}/basic-auth/{BasicAuthId}:
        delete:
            description: Delete a a Basic-auth credential associated with a Consumer using ID.
            operationId: delete-basic-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/BasicAuthId'
            responses:
                "204":
                    description: Successfully deleted Basic-auth credential or the resource didn't exist
            summary: Delete a a Basic-auth credential associated with a Consumer
            tags:
                - Basic-auth credentials
        get:
            description: Get a Basic-auth credential associated with a Consumer using ID.
            operationId: get-basic-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/BasicAuthId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully fetched Basic-auth credential
                "404":
                    description: Resource does not exist
            summary: Fetch a Basic-auth credential associated with a Consumer
            tags:
                - Basic-auth credentials
        patch:
            description: Update a a Basic-auth credential associated with a Consumer using ID.
            operationId: update-basic-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/BasicAuthId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuth'
                description: Fields of the Basic-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully updated Basic-auth credential
                "404":
                    description: Resource does not exist
            summary: Update a a Basic-auth credential associated with a Consumer
            tags:
                - Basic-auth credentials
        put:
            description: Create or Update a Basic-auth credential associated with a Consumer using ID.
            operationId: upsert-basic-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/BasicAuthId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BasicAuthWithoutParents'
                description: Description of the Basic-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BasicAuth'
                    description: Successfully upserted Basic-auth credential
            summary: Upsert a Basic-auth credential associated with a Consumer
            tags:
                - Basic-auth credentials
    /consumers/{ConsumerIdForNestedEntities}/hmac-auth:
        get:
            description: List all HMAC-auth credentials associated with a Consumer
            operationId: list-hmac-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/HMACAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing HMAC-auth credentials
            summary: List all HMAC-auth credentials associated with a Consumer
            tags:
                - HMAC-auth credentials
        post:
            description: Create a new HMAC-auth credential associated with a Consumer
            operationId: create-hmac-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuthWithoutParents'
                description: Description of new HMAC-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully created HMAC-auth credential
            summary: Create a new HMAC-auth credential associated with a Consumer
            tags:
                - HMAC-auth credentials
    /consumers/{ConsumerIdForNestedEntities}/hmac-auth/{HMACAuthId}:
        delete:
            description: Delete a a HMAC-auth credential associated with a Consumer using ID.
            operationId: delete-hmac-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/HMACAuthId'
            responses:
                "204":
                    description: Successfully deleted HMAC-auth credential or the resource didn't exist
            summary: Delete a a HMAC-auth credential associated with a Consumer
            tags:
                - HMAC-auth credentials
        get:
            description: Get a HMAC-auth credential associated with a Consumer using ID.
            operationId: get-hmac-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/HMACAuthId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully fetched HMAC-auth credential
                "404":
                    description: Resource does not exist
            summary: Fetch a HMAC-auth credential associated with a Consumer
            tags:
                - HMAC-auth credentials
        patch:
            description: Update a a HMAC-auth credential associated with a Consumer using ID.
            operationId: update-hmac-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/HMACAuthId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuth'
                description: Fields of the HMAC-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully updated HMAC-auth credential
                "404":
                    description: Resource does not exist
            summary: Update a a HMAC-auth credential associated with a Consumer
            tags:
                - HMAC-auth credentials
        put:
            description: Create or Update a HMAC-auth credential associated with a Consumer using ID.
            operationId: upsert-hmac-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/HMACAuthId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuthWithoutParents'
                description: Description of the HMAC-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully upserted HMAC-auth credential
            summary: Upsert a HMAC-auth credential associated with a Consumer
            tags:
                - HMAC-auth credentials
    /consumers/{ConsumerIdForNestedEntities}/jwt:
        get:
            description: List all JWTs associated with a Consumer
            operationId: list-jwt-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/JWT'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing JWTs
            summary: List all JWTs associated with a Consumer
            tags:
                - JWTs
        post:
            description: Create a new JWT associated with a Consumer
            operationId: create-jwt-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWTWithoutParents'
                description: Description of new JWT for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully created JWT
            summary: Create a new JWT associated with a Consumer
            tags:
                - JWTs
    /consumers/{ConsumerIdForNestedEntities}/jwt/{JWTId}:
        delete:
            description: Delete a a JWT associated with a Consumer using ID.
            operationId: delete-jwt-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/JWTId'
            responses:
                "204":
                    description: Successfully deleted JWT or the resource didn't exist
            summary: Delete a a JWT associated with a Consumer
            tags:
                - JWTs
        get:
            description: Get a JWT associated with a Consumer using ID.
            operationId: get-jwt-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/JWTId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully fetched JWT
                "404":
                    description: Resource does not exist
            summary: Fetch a JWT associated with a Consumer
            tags:
                - JWTs
        patch:
            description: Update a a JWT associated with a Consumer using ID.
            operationId: update-jwt-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/JWTId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWT'
                description: Fields of the JWT that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully updated JWT
                "404":
                    description: Resource does not exist
            summary: Update a a JWT associated with a Consumer
            tags:
                - JWTs
        put:
            description: Create or Update a JWT associated with a Consumer using ID.
            operationId: upsert-jwt-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/JWTId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWTWithoutParents'
                description: Description of the JWT
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully upserted JWT
            summary: Upsert a JWT associated with a Consumer
            tags:
                - JWTs
    /consumers/{ConsumerIdForNestedEntities}/key-auth:
        get:
            description: List all API-keys associated with a Consumer
            operationId: list-key-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/KeyAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing API-keys
            summary: List all API-keys associated with a Consumer
            tags:
                - API-keys
        post:
            description: Create a new API-key associated with a Consumer
            operationId: create-key-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuthWithoutParents'
                description: Description of new API-key for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully created API-key
            summary: Create a new API-key associated with a Consumer
            tags:
                - API-keys
    /consumers/{ConsumerIdForNestedEntities}/key-auth/{KeyAuthId}:
        delete:
            description: Delete a an API-key associated with a Consumer using ID.
            operationId: delete-key-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/KeyAuthId'
            responses:
                "204":
                    description: Successfully deleted API-key or the resource didn't exist
            summary: Delete a an API-key associated with a Consumer
            tags:
                - API-keys
        get:
            description: Get an API-key associated with a Consumer using ID.
            operationId: get-key-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/KeyAuthId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully fetched API-key
                "404":
                    description: Resource does not exist
            summary: Fetch an API-key associated with a Consumer
            tags:
                - API-keys
        patch:
            description: Update a an API-key associated with a Consumer using ID.
            operationId: update-key-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/KeyAuthId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuth'
                description: Fields of the API-key that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully updated API-key
                "404":
                    description: Resource does not exist
            summary: Update a an API-key associated with a Consumer
            tags:
                - API-keys
        put:
            description: Create or Update an API-key associated with a Consumer using ID.
            operationId: upsert-key-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/KeyAuthId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuthWithoutParents'
                description: Description of the API-key
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully upserted API-key
            summary: Upsert an API-key associated with a Consumer
            tags:
                - API-keys
    /consumers/{ConsumerIdForNestedEntities}/mtls-auth:
        get:
            description: List all MTLS-auth credentials associated with a Consumer
            operationId: list-mtls-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/MTLSAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing MTLS-auth credentials
            summary: List all MTLS-auth credentials associated with a Consumer
            tags:
                - MTLS-auth credentials
        post:
            description: Create a new MTLS-auth credential associated with a Consumer
            operationId: create-mtls-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuthWithoutParents'
                description: Description of new MTLS-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully created MTLS-auth credential
            summary: Create a new MTLS-auth credential associated with a Consumer
            tags:
                - MTLS-auth credentials
    /consumers/{ConsumerIdForNestedEntities}/mtls-auth/{MTLSAuthId}:
        delete:
            description: Delete a a MTLS-auth credential associated with a Consumer using ID.
            operationId: delete-mtls-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/MTLSAuthId'
            responses:
                "204":
                    description: Successfully deleted MTLS-auth credential or the resource didn't exist
            summary: Delete a a MTLS-auth credential associated with a Consumer
            tags:
                - MTLS-auth credentials
        get:
            description: Get a MTLS-auth credential associated with a Consumer using ID.
            operationId: get-mtls-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/MTLSAuthId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully fetched MTLS-auth credential
                "404":
                    description: Resource does not exist
            summary: Fetch a MTLS-auth credential associated with a Consumer
            tags:
                - MTLS-auth credentials
        patch:
            description: Update a a MTLS-auth credential associated with a Consumer using ID.
            operationId: update-mtls-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/MTLSAuthId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuth'
                description: Fields of the MTLS-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully updated MTLS-auth credential
                "404":
                    description: Resource does not exist
            summary: Update a a MTLS-auth credential associated with a Consumer
            tags:
                - MTLS-auth credentials
        put:
            description: Create or Update a MTLS-auth credential associated with a Consumer using ID.
            operationId: upsert-mtls-auth-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/MTLSAuthId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuthWithoutParents'
                description: Description of the MTLS-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully upserted MTLS-auth credential
            summary: Upsert a MTLS-auth credential associated with a Consumer
            tags:
                - MTLS-auth credentials
    /consumers/{ConsumerIdForNestedEntities}/plugins:
        get:
            description: List all Plugins associated with a Consumer
            operationId: list-plugin-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
            summary: List all Plugins associated with a Consumer
            tags:
                - Plugins
        post:
            description: Create a new Plugin associated with a Consumer
            operationId: create-plugin-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
            summary: Create a new Plugin associated with a Consumer
            tags:
                - Plugins
    /consumers/{ConsumerIdForNestedEntities}/plugins/{PluginId}:
        delete:
            description: Delete a a Plugin associated with a Consumer using ID.
            operationId: delete-plugin-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PluginId'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
            summary: Delete a a Plugin associated with a Consumer
            tags:
                - Plugins
        get:
            description: Get a Plugin associated with a Consumer using ID.
            operationId: get-plugin-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PluginId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin associated with a Consumer
            tags:
                - Plugins
        patch:
            description: Update a a Plugin associated with a Consumer using ID.
            operationId: update-plugin-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PluginId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "404":
                    description: Resource does not exist
            summary: Update a a Plugin associated with a Consumer
            tags:
                - Plugins
        put:
            description: Create or Update a Plugin associated with a Consumer using ID.
            operationId: upsert-plugin-with-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdForNestedEntities'
                - $ref: '#/components/parameters/PluginId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
            summary: Upsert a Plugin associated with a Consumer
            tags:
                - Plugins
    /consumers/{ConsumerIdOrUsername}:
        delete:
            description: Delete a Consumer
            operationId: delete-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
            responses:
                "204":
                    description: Successfully deleted Consumer or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Consumer
            tags:
                - Consumers
        get:
            description: Get a Consumer using ID or username.
            operationId: get-consumer
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Consumer'
                    description: Successfully fetched Consumer
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Consumer
            tags:
                - Consumers
        parameters:
            - $ref: '#/components/parameters/ConsumerIdOrUsername'
        patch:
            description: Update a Consumer
            operationId: update-consumer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Consumer'
                description: Fields of the Consumer that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Consumer'
                    description: Successfully updated Consumer
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Consumer
            tags:
                - Consumers
        put:
            description: Create or Update Consumer using ID or username.
            operationId: upsert-consumer
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Consumer'
                description: Description of the Consumer
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Consumer'
                    description: Successfully upserted Consumer
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Consumer
            tags:
                - Consumers
    /consumers/{ConsumerIdOrUsername}/consumer_groups:
        delete:
            description: Removes a consumer from all Consumer Groups. This operation does not delete the consumer group.
            operationId: remove-consumer-from-all-consumer-groups
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
            responses:
                "204":
                    description: Consumer removed from all groups
                "404":
                    description: Consumer does not exist
            summary: Remove consumer from all consumer groups
            tags:
                - Consumers
        get:
            description: List all Consumer Groups a Consumer belongs to
            operationId: list-consumer-groups-for-consumer
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/ConsumerGroup'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Consumer Groups
            summary: List all Consumer Groups a Consumer belongs to
            tags:
                - Consumers
        post:
            description: Add a consumer to a consumer group
            operationId: add-consumer-to-specific-consumer-group
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                group:
                                    example: fedee695-2ae2-4e45-877a-776d9b2fc793
                                    type: string
                                    x-speakeasy-name-override: group
                            type: object
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                properties:
                                    consumer:
                                        $ref: '#/components/schemas/Consumer'
                                    consumer_groups:
                                        items:
                                            $ref: '#/components/schemas/ConsumerGroup'
                                        type: array
                                type: object
                    description: Consumer added to a specific group
            summary: Add consumer to a specific consumer group
            tags:
                - Consumers
    /consumers/{ConsumerIdOrUsername}/consumer_groups/{ConsumerGroupId}:
        delete:
            description: Removes a consumer from a Consumer Group. This operation does not delete the consumer group.
            operationId: remove-consumer-from-consumer-group
            parameters:
                - $ref: '#/components/parameters/ConsumerIdOrUsername'
                - $ref: '#/components/parameters/ConsumerGroupId'
            responses:
                "204":
                    description: Consumer removed from group
            summary: Remove consumer from consumer group
            tags:
                - Consumers
    /custom-plugins:
        get:
            description: List all CustomPlugins
            operationId: list-custom-plugin
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/CustomPlugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing CustomPlugins
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all CustomPlugins
            tags:
                - CustomPlugins
            x-unstable: true
        post:
            description: Create a new CustomPlugin
            operationId: create-custom-plugin
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CustomPlugin'
                description: Description of the new CustomPlugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomPlugin'
                    description: Successfully created CustomPlugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new CustomPlugin
            tags:
                - CustomPlugins
            x-unstable: true
    /custom-plugins/{CustomPluginIdOrName}:
        delete:
            description: Delete a CustomPlugin
            operationId: delete-custom-plugin
            parameters:
                - $ref: '#/components/parameters/CustomPluginIdOrName'
            responses:
                "204":
                    description: Successfully deleted CustomPlugin or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a CustomPlugin
            tags:
                - CustomPlugins
            x-unstable: true
        get:
            description: Get a CustomPlugin using ID or name.
            operationId: get-custom-plugin
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomPlugin'
                    description: Successfully fetched CustomPlugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a CustomPlugin
            tags:
                - CustomPlugins
            x-unstable: true
        parameters:
            - $ref: '#/components/parameters/CustomPluginIdOrName'
        patch:
            description: Update a CustomPlugin
            operationId: update-custom-plugin
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CustomPlugin'
                description: Fields of the CustomPlugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomPlugin'
                    description: Successfully updated CustomPlugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a CustomPlugin
            tags:
                - CustomPlugins
        put:
            description: Create or Update CustomPlugin using ID or name.
            operationId: upsert-custom-plugin
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CustomPlugin'
                description: Description of the CustomPlugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CustomPlugin'
                    description: Successfully upserted CustomPlugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a CustomPlugin
            tags:
                - CustomPlugins
            x-unstable: true
    /debug/cluster/control-planes-nodes/log-level/{logLevel}:
        parameters:
            - description: The log level
              in: path
              name: logLevel
              required: true
              schema:
                enum:
                    - debug
                    - info
                    - notice
                    - warn
                    - error
                    - crit
                type: string
        put:
            description: "Change the log level of all control plane nodes deployed in a hybrid (CP/DP) cluster.\nBe careful when changing the log level of a node to debug in a production environment because the disk could fill up quickly. As soon as the debug logging finishes, revert back to a higher level, such as notice.\nIt’s currently not possible to change the log level of data plane and DB-less nodes.\n\nThis endpoint can be protected with RBAC, and changes will be reflected in the audit logs. \nThe log level change is propagated to all Nginx workers of a node, including to newly spawned workers.\n\nLog levels are set in Kong’s configuration. Possible log levels in increasing order of severity: `debug`, `info`, `notice`, `warn`, `error`, and `crit`. For more information, review the [logging reference](https://developer.konghq.com/gateway/logs/).\n\nWhen a user dynamically changes the log level for the entire cluster, if a new node joins the cluster, the new node will run at the previous log level, not at the log level that was previously set dynamically for the entire cluster. To work around that, make sure the new node starts with the proper level by setting the startup `kong.conf` setting [`KONG_LOG_LEVEL`](https://developer.konghq.com/gateway/logs/)."
            operationId: create-debug-cluster-control-planes-nodes-log-level
            responses:
                "200":
                    description: Log level changed
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Set Node Log Level of All Control Plane Nodes
            tags:
                - Debug
    /debug/cluster/log-level/{logLevel}:
        parameters:
            - description: The log level
              in: path
              name: logLevel
              required: true
              schema:
                enum:
                    - debug
                    - info
                    - notice
                    - warn
                    - error
                    - crit
                type: string
        put:
            description: "Change the log level of all nodes in a cluster.\nBe careful when changing the log level of a node to debug in a production environment because the disk could fill up quickly. As soon as the debug logging finishes, revert back to a higher level, such as notice.\nIt’s currently not possible to change the log level of data plane and DB-less nodes.\n\nThis endpoint can be protected with RBAC, and changes will be reflected in the audit logs. \nThe log level change is propagated to all Nginx workers of a node, including to newly spawned workers.\n\nLog levels are set in Kong’s configuration. Possible log levels in increasing order of severity: `debug`, `info`, `notice`, `warn`, `error`, and `crit`. For more information, review the [logging reference](https://developer.konghq.com/gateway/logs/).\n\nCurrently, when a user dynamically changes the log level for the entire cluster, if a new node joins the cluster, the new node will run at the previous log level, not at the log level that was previously set dynamically for the entire cluster. To work around that, make sure the new node starts with the proper level by setting the startup `kong.conf` setting [`KONG_LOG_LEVEL`](https://developer.konghq.com/gateway/logs/)."
            operationId: update-debug-cluster-log-level
            responses:
                "200":
                    description: Log level changed
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Set Node Log Level of All Nodes
            tags:
                - Debug
    /debug/node/log-level:
        get:
            description: |
                Retrieve the current log level of a node.

                See the [Nginx Documentation](https://nginx.org/en/docs/ngx_core_module.html#error_log) for the list of possible return values.
            operationId: get-debug-node-log-level
            responses:
                "200":
                    $ref: '#/components/responses/GetNodeLogLevelResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Retrieve Node Log Level of A Node
            tags:
                - Debug
    /debug/node/log-level/{logLevel}:
        parameters:
            - description: The log level
              in: path
              name: logLevel
              required: true
              schema:
                enum:
                    - debug
                    - info
                    - notice
                    - warn
                    - error
                    - crit
                type: string
        put:
            description: |
                Change the log level of a node.
            operationId: get-debug-node-log-level-log_level
            responses:
                "200":
                    $ref: '#/components/responses/UpdateNodeLogLevelResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Set Log Level of A Single Node
            tags:
                - Debug
    /degraphql_routes:
        get:
            description: List all Degraphql_routes
            operationId: list-degraphql_route
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Degraphql_route'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Degraphql_routes
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Degraphql_routes
            tags:
                - Degraphql_routes
        post:
            description: Create a new Degraphql_route
            operationId: create-degraphql_route
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_route'
                description: Description of the new Degraphql_route for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully created Degraphql_route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Degraphql_route
            tags:
                - Degraphql_routes
    /degraphql_routes/{Degraphql_routeIdOrName}:
        delete:
            description: Delete a Degraphql_route
            operationId: delete-degraphql_route
            parameters:
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
            responses:
                "204":
                    description: Successfully deleted Degraphql_route or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Degraphql_route
            tags:
                - Degraphql_routes
        get:
            description: Get a Degraphql_route using ID or name.
            operationId: get-degraphql_route
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully fetched Degraphql_route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Degraphql_route
            tags:
                - Degraphql_routes
        parameters:
            - $ref: '#/components/parameters/Degraphql_routeIdOrName'
        patch:
            description: Update a Degraphql_route
            operationId: update-degraphql_route
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_route'
                description: Fields of the Degraphql_route that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully updated Degraphql_route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Degraphql_route
            tags:
                - Degraphql_routes
        put:
            description: Create or Update Degraphql_route using ID or name.
            operationId: upsert-degraphql_route
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_route'
                description: Description of the Degraphql_route
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully upserted Degraphql_route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Degraphql_route
            tags:
                - Degraphql_routes
    /endpoints:
        get:
            description: List all available endpoints provided by the Admin API.
            operationId: get-endpoints
            responses:
                "200":
                    $ref: '#/components/responses/GetEndpoints'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: List all endpoints
            tags:
                - Information
    /event-hooks:
        get:
            description: List all event hooks and return information about the event hooks.
            operationId: get-event-hooks
            responses:
                "200":
                    $ref: '#/components/responses/EventHooksResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: List all event hooks
            tags:
                - Event-hooks
        post:
            description: Add a webhook.
            operationId: create-event-hooks
            requestBody:
                $ref: '#/components/requestBodies/AddWebhook'
            responses:
                "200":
                    $ref: '#/components/responses/EventHooksResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Add a webhook
            tags:
                - Event-hooks
    /event-hooks/{eventHookId}:
        delete:
            description: Deletes a specific event hook by its ID.
            operationId: deleteEventHook
            parameters:
                - description: The ID of the event hook to delete.
                  in: path
                  name: eventHookId
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Event hook successfully deleted.
                "404":
                    description: Event hook not found.
            summary: Delete an event hook
            tags:
                - Event-hooks
    /event-hooks/{eventHookId}/ping:
        get:
            description: |
                Ping a webhook event hook.
            operationId: get-event-hooks-event-hook-id-ping
            parameters:
                - description: The ID of the event hook to delete.
                  in: path
                  name: eventHookId
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    $ref: '#/components/responses/EventHooksResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Ping a webhook event hook
            tags:
                - Event-hooks
    /event-hooks/{eventHookId}/test:
        parameters:
            - description: The event hook id
              in: path
              name: eventHookId
              required: true
              schema:
                type: string
        post:
            description: |-
                It’s useful to manually trigger an event hook without provoking the event to be triggered. For instance, you might want to test the integration, or see if your hook’s service is receiving a payload from Kong.

                POST any data to `/event-hooks/:id-of-hook/test`, and the `/test` endpoint executes the with the provided data as the event payload.
            operationId: post-event-hooks-event-hook-id-test
            responses:
                "200":
                    $ref: '#/components/responses/EventHooksResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Test an event hook
            tags:
                - Event-hooks
    /event-hooks/sources:
        get:
            description: |-
                Sources are the actions that trigger the event hook. The `/sources` JSON output follows the following pattern:

                * 1st level = The source, which is the action that triggers the event hook.
                * 2nd level = The event, which is the Kong entity the event hook listens to for events.
                * 3rd level = The available template parameters for use in `webhook-custom` payloads.
            operationId: get-event-hooks-sources
            responses:
                "200":
                    $ref: '#/components/responses/ListSourcesResponse'
            summary: List all sources
            tags:
                - Event-hooks
    /event-hooks/sources/{source}:
        get:
            description: Events are the Kong entities the event hook listens for events. With this endpoint, you can list all of the events associated with a particular source.
            operationId: get-event-hooks-sources-source
            responses:
                "200":
                    $ref: '#/components/responses/ListSourceEventsResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all events for a source
            tags:
                - Event-hooks
        parameters:
            - description: The source you want to list events from.
              in: path
              name: source
              required: true
              schema:
                type: string
    /fips-status:
        get:
            description: Retrieves the current FIPS mode status. This endpoint indicates whether FIPS mode is active and provides the version of the FIPS module.
            operationId: list-fips-status
            responses:
                "200":
                    $ref: '#/components/responses/FIPS-response'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: FIPS Mode Status
            tags:
                - Information
    /groups:
        get:
            description: Returns a list of groups.
            operationId: get-groups
            responses:
                "200":
                    $ref: '#/components/responses/GetGroupResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List Groups
            tags:
                - Groups
        post:
            description: Create a group to your organization.
            operationId: post-groups
            requestBody:
                content:
                    application/json:
                        examples:
                            Create a group:
                                value:
                                    comment: comment
                                    name: demo-group
                        schema:
                            properties:
                                name:
                                    description: The group's name
                                    example: my_group
                                    type: string
                            type: object
            responses:
                "200":
                    $ref: '#/components/responses/GetGroupResponse'
            summary: Create a new group
            tags:
                - Groups
    /groups/{GroupId}:
        delete:
            description: Delete a Group
            operationId: delete-group
            parameters:
                - $ref: '#/components/parameters/GroupId'
            responses:
                "204":
                    description: Successfully deleted Group or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Group
            tags:
                - Groups
        get:
            description: Get a Group using ID.
            operationId: get-group
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Group'
                    description: Successfully fetched Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Group
            tags:
                - Groups
        parameters:
            - $ref: '#/components/parameters/GroupId'
        patch:
            description: Update a Group
            operationId: update-group
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Group'
                description: Fields of the Group that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Group'
                    description: Successfully updated Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Group
            tags:
                - Groups
        put:
            description: Create or Update Group using ID.
            operationId: upsert-group
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Group'
                description: Description of the Group
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Group'
                    description: Successfully upserted Group
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Group
            tags:
                - Groups
    /groups/{GroupIdOrName}/roles:
        delete:
            description: Delete a group's roles.
            operationId: delete-groups-group_id_or_name-roles
            parameters:
                - description: ID of the role to remove from the group.
                  example: 12773c9a-7f7c-45f2-bcea-5285eb18fd2f
                  in: query
                  name: rbac_role_id
                  required: true
                  schema:
                    type: string
                - description: ID of the workspace where the role is assigned.
                  example: d107bce7-dd86-4124-93c8-667ecc34b32e
                  in: query
                  name: workspace_id
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Successfully deleted role.
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Delete a Group’s Role
            tags:
                - Groups
        get:
            description: List all roles related to a group.
            operationId: get-groups-group_id_or_name-roles
            responses:
                "200":
                    $ref: '#/components/responses/GetGroupRolesListResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: List a Group’s Roles
            tags:
                - Groups
        parameters:
            - $ref: '#/components/parameters/GroupIdOrName'
        post:
            description: Create roles for a specified group
            operationId: create-groups-group_id_or_name-roles
            requestBody:
                $ref: '#/components/requestBodies/GroupRoleRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateGroupRolesResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Create Group's Roles
            tags:
                - Groups
    /hmac-auths:
        get:
            description: List all HMAC-auth credentials
            operationId: list-hmac-auth
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/HMACAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing HMAC-auth credentials
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all HMAC-auth credentials
            tags:
                - HMAC-auth credentials
        post:
            description: Create a new HMAC-auth credential
            operationId: create-hmac-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuth'
                description: Description of the new HMAC-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully created HMAC-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new HMAC-auth credential
            tags:
                - HMAC-auth credentials
    /hmac-auths/{HMACAuthId}:
        delete:
            description: Delete a HMAC-auth credential
            operationId: delete-hmac-auth
            parameters:
                - $ref: '#/components/parameters/HMACAuthId'
            responses:
                "204":
                    description: Successfully deleted HMAC-auth credential or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a HMAC-auth credential
            tags:
                - HMAC-auth credentials
        get:
            description: Get a HMAC-auth credential using ID.
            operationId: get-hmac-auth
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully fetched HMAC-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a HMAC-auth credential
            tags:
                - HMAC-auth credentials
        parameters:
            - $ref: '#/components/parameters/HMACAuthId'
        patch:
            description: Update a HMAC-auth credential
            operationId: update-hmac-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuth'
                description: Fields of the HMAC-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully updated HMAC-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a HMAC-auth credential
            tags:
                - HMAC-auth credentials
        put:
            description: Create or Update HMAC-auth credential using ID.
            operationId: upsert-hmac-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/HMACAuth'
                description: Description of the HMAC-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/HMACAuth'
                    description: Successfully upserted HMAC-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a HMAC-auth credential
            tags:
                - HMAC-auth credentials
    /jwts:
        get:
            description: List all JWTs
            operationId: list-jwt
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/JWT'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing JWTs
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all JWTs
            tags:
                - JWTs
        post:
            description: Create a new JWT
            operationId: create-jwt
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWT'
                description: Description of the new JWT for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully created JWT
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new JWT
            tags:
                - JWTs
    /jwts/{JWTId}:
        delete:
            description: Delete a JWT
            operationId: delete-jwt
            parameters:
                - $ref: '#/components/parameters/JWTId'
            responses:
                "204":
                    description: Successfully deleted JWT or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a JWT
            tags:
                - JWTs
        get:
            description: Get a JWT using ID.
            operationId: get-jwt
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully fetched JWT
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a JWT
            tags:
                - JWTs
        parameters:
            - $ref: '#/components/parameters/JWTId'
        patch:
            description: Update a JWT
            operationId: update-jwt
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWT'
                description: Fields of the JWT that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully updated JWT
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a JWT
            tags:
                - JWTs
        put:
            description: Create or Update JWT using ID.
            operationId: upsert-jwt
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/JWT'
                description: Description of the JWT
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/JWT'
                    description: Successfully upserted JWT
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a JWT
            tags:
                - JWTs
    /key-auths:
        get:
            description: List all API-keys
            operationId: list-key-auth
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/KeyAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing API-keys
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all API-keys
            tags:
                - API-keys
        post:
            description: Create a new API-key
            operationId: create-key-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuth'
                description: Description of the new API-key for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully created API-key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new API-key
            tags:
                - API-keys
    /key-auths/{KeyAuthId}:
        delete:
            description: Delete an API-key
            operationId: delete-key-auth
            parameters:
                - $ref: '#/components/parameters/KeyAuthId'
            responses:
                "204":
                    description: Successfully deleted API-key or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an API-key
            tags:
                - API-keys
        get:
            description: Get an API-key using ID.
            operationId: get-key-auth
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully fetched API-key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an API-key
            tags:
                - API-keys
        parameters:
            - $ref: '#/components/parameters/KeyAuthId'
        patch:
            description: Update an API-key
            operationId: update-key-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuth'
                description: Fields of the API-key that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully updated API-key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an API-key
            tags:
                - API-keys
        put:
            description: Create or Update API-key using ID.
            operationId: upsert-key-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyAuth'
                description: Description of the API-key
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeyAuth'
                    description: Successfully upserted API-key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a API-key
            tags:
                - API-keys
    /key-sets:
        get:
            description: List all KeySets
            operationId: list-key-set
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/KeySet'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing KeySets
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all KeySets
            tags:
                - KeySets
        post:
            description: Create a new KeySet
            operationId: create-key-set
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeySet'
                description: Description of the new KeySet for creation
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeySet'
                    description: Successfully created KeySet
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new KeySet
            tags:
                - KeySets
    /key-sets/{KeySetIdOrName}:
        delete:
            description: Delete a KeySet
            operationId: delete-key-set
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
            responses:
                "204":
                    description: Successfully deleted KeySet or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a KeySet
            tags:
                - KeySets
        get:
            description: Get a KeySet using ID or name.
            operationId: get-key-set
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeySet'
                    description: Successfully fetched KeySet
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a KeySet
            tags:
                - KeySets
        parameters:
            - $ref: '#/components/parameters/KeySetIdOrName'
        patch:
            description: Update a KeySet
            operationId: update-key-set
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeySet'
                description: Fields of the KeySet that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeySet'
                    description: Successfully updated KeySet
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a KeySet
            tags:
                - KeySets
        put:
            description: Create or Update KeySet using ID or name.
            operationId: upsert-key-set
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeySet'
                description: Description of the KeySet
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/KeySet'
                    description: Successfully upserted KeySet
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a KeySet
            tags:
                - KeySets
    /key-sets/{KeySetIdOrName}/keys:
        get:
            description: List all Keys associated with a KeySet
            operationId: list-key-with-key-set
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Key'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Keys
            summary: List all Keys associated with a KeySet
            tags:
                - Keys
        post:
            description: Create a new Key associated with a KeySet
            operationId: create-key-with-key-set
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyWithoutParents'
                description: Description of new Key for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully created Key
            summary: Create a new Key associated with a KeySet
            tags:
                - Keys
    /key-sets/{KeySetIdOrName}/keys/{KeyIdOrName}:
        delete:
            description: Delete a a Key associated with a KeySet using ID or name.
            operationId: delete-key-with-key-set
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/KeyIdOrName'
            responses:
                "204":
                    description: Successfully deleted Key or the resource didn't exist
            summary: Delete a a Key associated with a KeySet
            tags:
                - Keys
        get:
            description: Get a Key associated with a KeySet using ID or name.
            operationId: get-key-with-key-set
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/KeyIdOrName'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully fetched Key
                "404":
                    description: Resource does not exist
            summary: Fetch a Key associated with a KeySet
            tags:
                - Keys
        patch:
            description: Update a a Key associated with a KeySet using ID or name.
            operationId: update-key-with-key-set
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/KeyIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
                description: Fields of the Key that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully updated Key
                "404":
                    description: Resource does not exist
            summary: Update a a Key associated with a KeySet
            tags:
                - Keys
        put:
            description: Create or Update a Key associated with a KeySet using ID or name.
            operationId: upsert-key-with-key-set
            parameters:
                - $ref: '#/components/parameters/KeySetIdOrName'
                - $ref: '#/components/parameters/KeyIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/KeyWithoutParents'
                description: Description of the Key
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully upserted Key
            summary: Upsert a Key associated with a KeySet
            tags:
                - Keys
    /keyring:
        get:
            description: Kong Gateway provides a mechanism to store sensitive data fields, such as consumer secrets, in an encrypted format within the database.This provides for encryption-at-rest security controls in a Kong cluster. For more information review the [keyring and data encryption documentation](https://developer.konghq.com/gateway/keyring/).
            operationId: get-keyring
            responses:
                "200":
                    $ref: '#/components/responses/KeyRingResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Fetch cluster Keyring
            tags:
                - Keyring
    /keyring/activate:
        post:
            description: Activate a key to be used for encrypting new data fields.
            operationId: create-keyring-activate
            requestBody:
                $ref: '#/components/requestBodies/KeyringRequest'
            responses:
                "204":
                    description: Key successfully activated.
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Activate Key
            tags:
                - Keyring
    /keyring/export:
        post:
            description: Export the keyring for disaster recovery.
            operationId: update-keyring-export
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Keyring'
                    description: Successfully exported keyring.
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Export Keyring
            tags:
                - Keyring
    /keyring/generate:
        post:
            description: Generate key material and add it to the keyring.
            operationId: create-keyring-generate
            requestBody:
                $ref: '#/components/requestBodies/KeyringRequest'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Keyring'
                    description: Successfully generated key.
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Generate Key
            tags:
                - Keyring
    /keyring/import:
        description: Import Keyring
        post:
            operationId: create-keyring-import
            requestBody:
                $ref: '#/components/requestBodies/CreateKeyringImportRequest'
            responses:
                "200":
                    $ref: '#/components/responses/CreateKeyringImportResponse'
            summary: Import Keyring
            tags:
                - Keyring
    /keyring/recover:
        post:
            description: Recover lost encryption keys using a previously stored recovery key.
            operationId: create-keyring-recover
            requestBody:
                $ref: '#/components/requestBodies/CreateKeyringRecoverRequest'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Keyring'
                    description: Successfully recovered keys.
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Recover Keyring
            tags:
                - Keyring
    /keyring/remove:
        post:
            description: Remove a key from the keyring.
            operationId: delete-keyring-remove
            requestBody:
                $ref: '#/components/requestBodies/KeyringRequest'
            responses:
                "204":
                    description: Key successfully removed.
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: Remove Key
            tags:
                - Keyring
    /keyring/vault/sync:
        post:
            description: Sync the keyring with Vault storage.
            operationId: update-keyring-vault-sync
            requestBody:
                $ref: '#/components/requestBodies/UpdateKeyringVaultSyncRequest'
            responses:
                "204":
                    description: Vault keyring successfully synchronized.
            summary: Synchronize Vault Keyring
            tags:
                - Keyring
    /keys:
        get:
            description: List all Keys
            operationId: list-key
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Key'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Keys
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Keys
            tags:
                - Keys
        post:
            description: Create a new Key
            operationId: create-key
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
                description: Description of the new Key for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully created Key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Key
            tags:
                - Keys
    /keys/{KeyIdOrName}:
        delete:
            description: Delete a Key
            operationId: delete-key
            parameters:
                - $ref: '#/components/parameters/KeyIdOrName'
            responses:
                "204":
                    description: Successfully deleted Key or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Key
            tags:
                - Keys
        get:
            description: Get a Key using ID or name.
            operationId: get-key
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully fetched Key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Key
            tags:
                - Keys
        parameters:
            - $ref: '#/components/parameters/KeyIdOrName'
        patch:
            description: Update a Key
            operationId: update-key
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
                description: Fields of the Key that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully updated Key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Key
            tags:
                - Keys
        put:
            description: Create or Update Key using ID or name.
            operationId: upsert-key
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Key'
                description: Description of the Key
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Key'
                    description: Successfully upserted Key
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Key
            tags:
                - Keys
    /license/report:
        get:
            description: |
                Generate a report on the Kong Gateway instance to gather monthly usage data.
            operationId: get-license-report
            responses:
                "200":
                    $ref: '#/components/responses/ReportResponse'
                "401":
                    $ref: '#/components/responses/LicenseHTTP401Error'
            summary: Generate a report
            tags:
                - Licenses
    /licenses:
        get:
            description: |
                List active licenses. The data planes use the most recent updated_at license.
            operationId: get-licenses
            responses:
                "200":
                    $ref: '#/components/responses/LicenseResponse'
                "401":
                    $ref: '#/components/responses/LicenseHTTP401Error'
            summary: List licenses
            tags:
                - Licenses
        post:
            description: |-
                Create a license using an auto-generated UUID. When using `POST`, if the request payload does contain a valid Kong Gateway license, the license will be added.

                If the request payload does not contain a valid licence, a `400 BAD REQUEST` will be returned.
            operationId: create-licenses
            requestBody:
                $ref: '#/components/requestBodies/LicenseRequest'
            responses:
                "201":
                    $ref: '#/components/responses/LicenseResponse'
                "400":
                    description: Bad Request
                "401":
                    $ref: '#/components/responses/LicenseHTTP401Error'
            summary: Add a license
            tags:
                - Licenses
    /licenses/{licenseId}:
        delete:
            description: Delete a license by passing the license ID as a path parameter.
            operationId: delete-licenses-license-id
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: '#/components/responses/LicenseHTTP401Error'
            summary: Delete a license
            tags:
                - Licenses
        get:
            description: Fetch a specific license using the license id parameter.
            operationId: get-licenses-license-id
            responses:
                "200":
                    $ref: '#/components/responses/LicenseResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Fetch a license
            tags:
                - Licenses
        parameters:
            - $ref: '#/components/parameters/licenseId'
        patch:
            description: |-
                When using `PATCH`, if the request payload does contain an entity's primary key (`id` for licenses), the license will be replaced with the given payload attribute.

                If the request payload does not contain an entity's primary key (`id` for licenses), a `404 NOT FOUND` will be returned or if the request payload contains an invalid license, a `400 BAD REQUEST` will be returned.
            operationId: update-a-license
            requestBody:
                $ref: '#/components/requestBodies/LicenseRequest'
            responses:
                "200":
                    $ref: '#/components/responses/LicenseResponse'
                "401":
                    $ref: '#/components/responses/LicenseHTTP401Error'
            summary: Update a license
            tags:
                - Licenses
        put:
            description: |-
                When using `PUT`, if the request payload does not contain an entity's primary key (`id` for licenses), the license will be added and assigned the given ID.

                If the request payload does contain an entity's primary key (id for Licenses), the license will be replaced with the given payload attribute. If the ID is not a valid UUID, a `400 BAD REQUEST` will be returned. If the ID is omitted, a `405 NOT ALLOWED` will be returned.
            operationId: update-licenses-license-id
            requestBody:
                $ref: '#/components/requestBodies/LicenseRequest'
            responses:
                "200":
                    $ref: '#/components/responses/LicenseResponse'
                "400":
                    description: Bad Request
                "401":
                    $ref: '#/components/responses/LicenseHTTP401Error'
                "405":
                    description: Method Not Allowed
            summary: Update or add a license
            tags:
                - Licenses
    /mtls-auths:
        get:
            description: List all MTLS-auth credentials
            operationId: list-mtls-auth
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/MTLSAuth'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing MTLS-auth credentials
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all MTLS-auth credentials
            tags:
                - MTLS-auth credentials
        post:
            description: Create a new MTLS-auth credential
            operationId: create-mtls-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuth'
                description: Description of the new MTLS-auth credential for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully created MTLS-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new MTLS-auth credential
            tags:
                - MTLS-auth credentials
    /mtls-auths/{MTLSAuthId}:
        delete:
            description: Delete a MTLS-auth credential
            operationId: delete-mtls-auth
            parameters:
                - $ref: '#/components/parameters/MTLSAuthId'
            responses:
                "204":
                    description: Successfully deleted MTLS-auth credential or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a MTLS-auth credential
            tags:
                - MTLS-auth credentials
        get:
            description: Get a MTLS-auth credential using ID.
            operationId: get-mtls-auth
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully fetched MTLS-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a MTLS-auth credential
            tags:
                - MTLS-auth credentials
        parameters:
            - $ref: '#/components/parameters/MTLSAuthId'
        patch:
            description: Update a MTLS-auth credential
            operationId: update-mtls-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuth'
                description: Fields of the MTLS-auth credential that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully updated MTLS-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a MTLS-auth credential
            tags:
                - MTLS-auth credentials
        put:
            description: Create or Update MTLS-auth credential using ID.
            operationId: upsert-mtls-auth
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/MTLSAuth'
                description: Description of the MTLS-auth credential
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/MTLSAuth'
                    description: Successfully upserted MTLS-auth credential
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a MTLS-auth credential
            tags:
                - MTLS-auth credentials
    /oic_jwks:
        get:
            description: List all OIDC JWKs
            operationId: list-oic_jwk
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/OidcJwk'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing OIDC JWKs
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all OIDC JWKs
            tags:
                - OIDC JWKs
        post:
            description: Create a new OIDC JWK
            operationId: create-oic_jwk
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OidcJwk'
                description: Description of the new OIDC JWK for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcJwk'
                    description: Successfully created OIDC JWK
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new OIDC JWK
            tags:
                - OIDC JWKs
    /oic_jwks/{OidcJwkId}:
        delete:
            description: Delete an OIDC JWK
            operationId: delete-oic_jwk
            parameters:
                - $ref: '#/components/parameters/OidcJwkId'
            responses:
                "204":
                    description: Successfully deleted OIDC JWK or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an OIDC JWK
            tags:
                - OIDC JWKs
        get:
            description: Get an OIDC JWK using ID.
            operationId: get-oic_jwk
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcJwk'
                    description: Successfully fetched OIDC JWK
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an OIDC JWK
            tags:
                - OIDC JWKs
        parameters:
            - $ref: '#/components/parameters/OidcJwkId'
        patch:
            description: Update an OIDC JWK
            operationId: update-oic_jwk
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OidcJwk'
                description: Fields of the OIDC JWK that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcJwk'
                    description: Successfully updated OIDC JWK
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an OIDC JWK
            tags:
                - OIDC JWKs
        put:
            description: Create or Update OIDC JWK using ID.
            operationId: upsert-oic_jwk
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/OidcJwk'
                description: Description of the OIDC JWK
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/OidcJwk'
                    description: Successfully upserted OIDC JWK
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a OIDC JWK
            tags:
                - OIDC JWKs
    /partials:
        get:
            description: List all Partials
            operationId: list-partial
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Partial'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Partials
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Partials
            tags:
                - Partials
        post:
            description: Create a new Partial
            operationId: create-partial
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Partial'
                description: Description of the new Partial for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Partial'
                    description: Successfully created Partial
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Partial
            tags:
                - Partials
    /partials/{PartialId}:
        delete:
            description: Delete a Partial
            operationId: delete-partial
            parameters:
                - $ref: '#/components/parameters/PartialId'
            responses:
                "204":
                    description: Successfully deleted Partial or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Partial
            tags:
                - Partials
        get:
            description: Get a Partial using ID.
            operationId: get-partial
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Partial'
                    description: Successfully fetched Partial
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Partial
            tags:
                - Partials
        parameters:
            - $ref: '#/components/parameters/PartialId'
        patch:
            description: Update a Partial
            operationId: update-partial
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Partial'
                description: Fields of the Partial that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Partial'
                    description: Successfully updated Partial
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Partial
            tags:
                - Partials
        put:
            description: Create or Update Partial using ID.
            operationId: upsert-partial
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Partial'
                description: Description of the Partial
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Partial'
                    description: Successfully upserted Partial
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Partial
            tags:
                - Partials
    /partials/{PartialId}/links:
        get:
            description: List all plugins linked to the partial
            operationId: list-partial-link
            parameters:
                - $ref: '#/components/parameters/PartialId'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    count:
                                        description: The total number of plugins linked to the partial
                                        example: 10
                                        type: integer
                                    data:
                                        items:
                                            $ref: '#/components/schemas/PartialLink'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: The plugins linked to the partial
            summary: List partial links
            tags:
                - Partial Links
    /plugins:
        get:
            description: List all Plugins
            operationId: list-plugin
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Plugins
            tags:
                - Plugins
        post:
            description: Create a new Plugin
            operationId: create-plugin
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Description of the new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Plugin
            tags:
                - Plugins
    /plugins/{PluginId}:
        delete:
            description: Delete a Plugin
            operationId: delete-plugin
            parameters:
                - $ref: '#/components/parameters/PluginId'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Plugin
            tags:
                - Plugins
        get:
            description: Get a Plugin using ID.
            operationId: get-plugin
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin
            tags:
                - Plugins
        parameters:
            - $ref: '#/components/parameters/PluginId'
        patch:
            description: Update a Plugin
            operationId: update-plugin
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Plugin
            tags:
                - Plugins
        put:
            description: Create or Update Plugin using ID.
            operationId: upsert-plugin
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Plugin
            tags:
                - Plugins
    /rbac/roles:
        get:
            description: List all roles.
            operationId: get-rbac-roles
            responses:
                "200":
                    $ref: '#/components/responses/GetRbacResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: List Roles
            tags:
                - RBAC
            x-workspaceable: true
        post:
            description: Add a role.
            operationId: create-rbac-roles
            requestBody:
                $ref: '#/components/requestBodies/RBACRequest'
            responses:
                "201":
                    $ref: '#/components/responses/GetRbacResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Add a Role
            tags:
                - RBAC
            x-workspaceable: true
    /rbac/roles/{rbacNameOrId}:
        delete:
            description: Delete a role.
            operationId: delete-rbac-roles-name_or_id
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Delete a Role
            tags:
                - RBAC
        get:
            description: Retrieve a role by passing the name or UUID as a path parameter.
            operationId: get-rbac-roles-name_or_id
            responses:
                "200":
                    $ref: '#/components/responses/GetRbacResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Retrieve a Role
            tags:
                - RBAC
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
        patch:
            description: Updates a role.
            operationId: update-rbac-roles-name_or_id
            requestBody:
                $ref: '#/components/requestBodies/RBACRequest'
            responses:
                "200":
                    $ref: '#/components/responses/GetRbacResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Update a Role
            tags:
                - RBAC
        put:
            description: |
                If the entity exists, it updates the role with the new payload.
                If not, it creates a new role with the provided data.
            operationId: create-rbac-roles-name_or_id
            requestBody:
                $ref: '#/components/requestBodies/RBACRequest'
            responses:
                "200":
                    $ref: '#/components/responses/GetRbacResponse'
                "201":
                    description: Created
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Update or Create a Role
            tags:
                - RBAC
    /rbac/roles/{rbacNameOrId}/endpoints:
        get:
            description: Lists all of a role's associated endpoint permissions.
            operationId: get-rbac-roles-name_or_id-endpoints
            responses:
                "200":
                    $ref: '#/components/responses/CreateRoleEndpointPermissionResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: List Role Endpoint Permissions
            tags:
                - RBAC
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
        post:
            description: |
                Add a role endpoint permission for the specified endpoint. Permissions can use exact matches or wildcards (`*`), which can represent one segment of a path.
            operationId: create-rbac-roles-name_or_id-endpoints
            requestBody:
                $ref: '#/components/requestBodies/CreateRoleEndpointPermissionRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateRoleEndpointPermissionResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Add a Role Endpoint Permission
            tags:
                - RBAC
    /rbac/roles/{rbacNameOrId}/endpoints/{workspaceNameOrId}/{endpoint}':
        delete:
            description: |
                Delete a Role Endpoint Permission
            operationId: delete-rbac-roles-name_or_id-endpoints-workspace_name_or_id-endpoint
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Role Endpoint Permission
            tags:
                - RBAC
        get:
            description: |
                Retrieve a Role Endpoint Permission
            operationId: get-rbac-roles-name_or_id-endpoints-workspace_name_or_id-endpoint
            responses:
                "200":
                    $ref: '#/components/responses/GetRoleEndpointPermissionResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Retrieve a Role Endpoint Permission
            tags:
                - RBAC
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
            - $ref: '#/components/parameters/WorkspaceNameOrId'
            - $ref: '#/components/parameters/Endpoint'
        patch:
            description: |
                Update a Role Endpoint Permission
            operationId: patch-rbac-roles-name_or_id-endpoints-workspace_name_or_id-endpoint
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                actions:
                                    description: |
                                        One or more actions associated with this permission.
                                    type: string
                                negative:
                                    description: |
                                        If true, explicitly disallow the actions associated with the permissions tied to this resource. By default this value is false.
                                    type: string
                            type: object
            responses:
                "200":
                    $ref: '#/components/responses/GetRoleEndpointPermissionResponse'
            summary: Update a Role Endpoint Permission
            tags:
                - RBAC
    /rbac/roles/{rbacNameOrId}/entities:
        get:
            description: |
                Add a Role Entity Permission
            operationId: get-rbac-roles-name_or_id-entities
            responses:
                "200":
                    $ref: '#/components/responses/GetRoleEntityPermissionsResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List Entity Permissions
            tags:
                - RBAC
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
        post:
            description: The `entity_id` must be the ID of an entity in Kong. If you provide the ID of a workspace, the permission applies to all entities in that workspace. Future entities belonging to that workspace will get the same permissions. A wildcard (`*`) will be interpreted as all entities in the system.
            operationId: post-rbac-roles-name_or_id-entities
            requestBody:
                $ref: '#/components/requestBodies/CreateRoleEntityPermissionRequest'
            responses:
                "200":
                    $ref: '#/components/responses/GetRoleEntityPermissionsResponse'
            summary: Add a Role Entity Permission
            tags:
                - RBAC
    /rbac/roles/{rbacNameOrId}/entities/{entityId}:
        delete:
            description: |
                Delete an Entity Permission
            operationId: delete-rbac-roles-name_or_id-entities-entity_id
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an Entity Permission
            tags:
                - RBAC
        get:
            description: |
                Retrieve a Role Entity Permission
            operationId: get-rbac-roles-name_or_id-entities-entity_id
            responses:
                "200":
                    $ref: '#/components/responses/GetRoleEntityPermissionResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List a Role Entity Permission
            tags:
                - RBAC
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
            - description: ID of the entity associated with this permission.
              example: cf4c7e60-11db-49dd-b300-7c7e5f0f7e6b
              in: path
              name: entityId
              required: true
              schema:
                type: string
        patch:
            description: Update an Entity Permission
            operationId: patch-rbac-roles-name_or_id-entities-entity_id
            requestBody:
                $ref: '#/components/requestBodies/UpdateRoleEntityPermissionRequest'
            responses:
                "200":
                    $ref: '#/components/responses/GetRoleEntityPermissionResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Update an Entity Permission
            tags:
                - RBAC
    /rbac/roles/{rbacNameOrId}/permissions:
        get:
            description: List Role Permissions
            operationId: get-rbac-roles-name_or_id-permissions
            responses:
                "200":
                    $ref: '#/components/responses/GetRolePermissionsResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List Role Permissions
            tags:
                - RBAC
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
    /rbac/roles/{role}/endpoints/{endpoint}/':
        get:
            operationId: getRoleSpecificEndpointPermissions
            parameters:
                - description: The RBAC role ID.
                  example: service_reader
                  in: path
                  name: role
                  required: true
                  schema:
                    type: string
                - $ref: '#/components/parameters/Endpoint'
            responses:
                "200":
                    $ref: '#/components/responses/GetRoleSpecificEndpointResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Get role-specific permissions for an endpoint within a workspace
            tags:
                - RBAC
            x-workspaceable: true
    /rbac/users:
        get:
            description: |-
                List all users.

                Note: RBAC users associated with admins aren't listed with `GET /rbac/users`. Instead, use `GET /admins` to list all admins.
            operationId: get-rbac-users
            responses:
                "200":
                    $ref: '#/components/responses/GetRBACUserResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: List Users
            tags:
                - RBAC
        post:
            description: Add a User
            operationId: create-rbac-users
            requestBody:
                $ref: '#/components/requestBodies/RBACRequest'
            responses:
                "200":
                    $ref: '#/components/responses/GetRBACUserResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Add a User
            tags:
                - RBAC
    /rbac/users/{rbacNameOrId}:
        delete:
            description: Delete a user.
            operationId: delete-rbac-users-name_or_id
            responses:
                "204":
                    description: No Content
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Delete a User
            tags:
                - RBAC
        get:
            description: Retrieve a user by passing a name or ID in the path.
            operationId: get-rbac-users-name_or_id
            responses:
                "200":
                    $ref: '#/components/responses/GetRBACUserResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Retrieve a User
            tags:
                - RBAC
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
        patch:
            description: Update a user. Users are unable to update their own roles.
            operationId: update-rbac-users-name_or_id
            requestBody:
                $ref: '#/components/requestBodies/RBACRequest'
            responses:
                "200":
                    $ref: '#/components/responses/GetRBACUserResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Update a User
            tags:
                - RBAC
    /rbac/users/{rbacNameOrId}/permissions:
        get:
            description: |
                List a User’s Permissions
            operationId: get-rbac-users-name_or_id-permissions
            responses:
                "200":
                    $ref: '#/components/responses/GetUserPermissionsResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List a User’s Permissions
            tags:
                - RBAC
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
    /rbac/users/{rbacNameOrId}/roles:
        delete:
            description: Delete a Role from a User
            operationId: delete-rbac-users-name_or_id-roles
            responses:
                "204":
                    description: No Content
            summary: Delete a Role from a User
            tags:
                - RBAC
        get:
            description: |
                Add a User to a Role
            operationId: get-rbac-users-name_or_id-roles
            responses:
                "200":
                    $ref: '#/components/responses/GetUserRolesResponse'
            summary: List a User’s Roles
            tags:
                - RBAC
            x-workspaceable: true
        parameters:
            - $ref: '#/components/parameters/RbacNameOrId'
        post:
            description: |
                Add a User to a Role
            operationId: post-rbac-users-name_or_id-roles
            requestBody:
                $ref: '#/components/requestBodies/CreateUserRoleAssignmentRequest'
            responses:
                "201":
                    $ref: '#/components/responses/GetRBACUserResponse'
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Add a User to a Role
            tags:
                - RBAC
            x-workspaceable: true
    /routes:
        get:
            description: List all Routes
            operationId: list-route
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Route'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Routes
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Routes
            tags:
                - Routes
        post:
            description: Create a new Route
            operationId: create-route
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Route'
                description: Description of the new Route for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully created Route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Route
            tags:
                - Routes
    /routes/{RouteIdOrName}:
        delete:
            description: Delete a Route
            operationId: delete-route
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
            responses:
                "204":
                    description: Successfully deleted Route or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Route
            tags:
                - Routes
        get:
            description: Get a Route using ID or name.
            operationId: get-route
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully fetched Route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Route
            tags:
                - Routes
        parameters:
            - $ref: '#/components/parameters/RouteIdOrName'
        patch:
            description: Update a Route
            operationId: update-route
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Route'
                description: Fields of the Route that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully updated Route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Route
            tags:
                - Routes
        put:
            description: Create or Update Route using ID or name.
            operationId: upsert-route
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Route'
                description: Description of the Route
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully upserted Route
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Route
            tags:
                - Routes
    /routes/{RouteIdOrName}/plugins:
        get:
            description: List all Plugins associated with a Route
            operationId: list-plugin-with-route
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
            summary: List all Plugins associated with a Route
            tags:
                - Plugins
        post:
            description: Create a new Plugin associated with a Route
            operationId: create-plugin-with-route
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
            summary: Create a new Plugin associated with a Route
            tags:
                - Plugins
    /routes/{RouteIdOrName}/plugins/{PluginId}:
        delete:
            description: Delete a a Plugin associated with a Route using ID.
            operationId: delete-plugin-with-route
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PluginId'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
            summary: Delete a a Plugin associated with a Route
            tags:
                - Plugins
        get:
            description: Get a Plugin associated with a Route using ID.
            operationId: get-plugin-with-route
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PluginId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin associated with a Route
            tags:
                - Plugins
        patch:
            description: Update a a Plugin associated with a Route using ID.
            operationId: update-plugin-with-route
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PluginId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "404":
                    description: Resource does not exist
            summary: Update a a Plugin associated with a Route
            tags:
                - Plugins
        put:
            description: Create or Update a Plugin associated with a Route using ID.
            operationId: upsert-plugin-with-route
            parameters:
                - $ref: '#/components/parameters/RouteIdOrName'
                - $ref: '#/components/parameters/PluginId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
            summary: Upsert a Plugin associated with a Route
            tags:
                - Plugins
    /schemas/{entityName}/validate:
        parameters:
            - description: The name of the entity
              in: path
              name: entityName
              required: true
              schema:
                type: string
        post:
            description: Validate schema for an entity
            operationId: validate-entity-schema
            requestBody:
                content:
                    application/json:
                        schema:
                            additionalProperties: true
                            type: object
                description: Request body of a Koko entity to validate against its schema
            responses:
                "200":
                    $ref: '#/components/responses/ValidateEntityResponse'
            summary: Validate entity schema
            tags:
                - Schemas
    /schemas/partials/{partialType}:
        get:
            description: Get the schema for a partial
            operationId: fetch-partial-schema
            responses:
                "200":
                    $ref: '#/components/responses/GetPartialSchemaResponse'
            summary: Fetch partial schema
            tags:
                - Schemas
        parameters:
            - description: The type of a partial
              in: path
              name: partialType
              required: true
              schema:
                type: string
    /schemas/plugins/{pluginName}:
        get:
            description: Get the schema for a plugin
            operationId: fetch-plugin-schema
            responses:
                "200":
                    $ref: '#/components/responses/GetPluginSchemaResponse'
            summary: Fetch plugin schema
            tags:
                - Plugins
        parameters:
            - description: The name of the plugin
              in: path
              name: pluginName
              required: true
              schema:
                type: string
    /services:
        get:
            description: List all Services
            operationId: list-service
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Service'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Services
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Services
            tags:
                - Services
        post:
            description: Create a new Service
            operationId: create-service
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Service'
                description: Description of the new Service for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully created Service
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Service
            tags:
                - Services
    /services/{ServiceIdOrName}:
        delete:
            description: Delete a Service
            operationId: delete-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
            responses:
                "204":
                    description: Successfully deleted Service or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Service
            tags:
                - Services
        get:
            description: Get a Service using ID or name.
            operationId: get-service
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully fetched Service
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Service
            tags:
                - Services
        parameters:
            - $ref: '#/components/parameters/ServiceIdOrName'
        patch:
            description: Update a Service
            operationId: update-service
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Service'
                description: Fields of the Service that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully updated Service
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Service
            tags:
                - Services
        put:
            description: Create or Update Service using ID or name.
            operationId: upsert-service
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Service'
                description: Description of the Service
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Service'
                    description: Successfully upserted Service
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Service
            tags:
                - Services
    /services/{ServiceIdOrName}/degraphql/routes:
        get:
            description: List all Degraphql_routes associated with a Service
            operationId: list-degraphql_route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Degraphql_route'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Degraphql_routes
            summary: List all Degraphql_routes associated with a Service
            tags:
                - Degraphql_routes
        post:
            description: Create a new Degraphql_route associated with a Service
            operationId: create-degraphql_route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_routeWithoutParents'
                description: Description of new Degraphql_route for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully created Degraphql_route
            summary: Create a new Degraphql_route associated with a Service
            tags:
                - Degraphql_routes
    /services/{ServiceIdOrName}/degraphql/routes/{Degraphql_routeIdOrName}:
        delete:
            description: Delete a a Degraphql_route associated with a Service using ID or name.
            operationId: delete-degraphql_route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
            responses:
                "204":
                    description: Successfully deleted Degraphql_route or the resource didn't exist
            summary: Delete a a Degraphql_route associated with a Service
            tags:
                - Degraphql_routes
        get:
            description: Get a Degraphql_route associated with a Service using ID or name.
            operationId: get-degraphql_route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully fetched Degraphql_route
                "404":
                    description: Resource does not exist
            summary: Fetch a Degraphql_route associated with a Service
            tags:
                - Degraphql_routes
        patch:
            description: Update a a Degraphql_route associated with a Service using ID or name.
            operationId: update-degraphql_route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_route'
                description: Fields of the Degraphql_route that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully updated Degraphql_route
                "404":
                    description: Resource does not exist
            summary: Update a a Degraphql_route associated with a Service
            tags:
                - Degraphql_routes
        put:
            description: Create or Update a Degraphql_route associated with a Service using ID or name.
            operationId: upsert-degraphql_route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/Degraphql_routeIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Degraphql_routeWithoutParents'
                description: Description of the Degraphql_route
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Degraphql_route'
                    description: Successfully upserted Degraphql_route
            summary: Upsert a Degraphql_route associated with a Service
            tags:
                - Degraphql_routes
    /services/{ServiceIdOrName}/plugins:
        get:
            description: List all Plugins associated with a Service
            operationId: list-plugin-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Plugin'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Plugins
            summary: List all Plugins associated with a Service
            tags:
                - Plugins
        post:
            description: Create a new Plugin associated with a Service
            operationId: create-plugin-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of new Plugin for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully created Plugin
            summary: Create a new Plugin associated with a Service
            tags:
                - Plugins
    /services/{ServiceIdOrName}/plugins/{PluginId}:
        delete:
            description: Delete a a Plugin associated with a Service using ID.
            operationId: delete-plugin-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PluginId'
            responses:
                "204":
                    description: Successfully deleted Plugin or the resource didn't exist
            summary: Delete a a Plugin associated with a Service
            tags:
                - Plugins
        get:
            description: Get a Plugin associated with a Service using ID.
            operationId: get-plugin-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PluginId'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully fetched Plugin
                "404":
                    description: Resource does not exist
            summary: Fetch a Plugin associated with a Service
            tags:
                - Plugins
        patch:
            description: Update a a Plugin associated with a Service using ID.
            operationId: update-plugin-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PluginId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plugin'
                description: Fields of the Plugin that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully updated Plugin
                "404":
                    description: Resource does not exist
            summary: Update a a Plugin associated with a Service
            tags:
                - Plugins
        put:
            description: Create or Update a Plugin associated with a Service using ID.
            operationId: upsert-plugin-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PluginId'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PluginWithoutParents'
                description: Description of the Plugin
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plugin'
                    description: Successfully upserted Plugin
            summary: Upsert a Plugin associated with a Service
            tags:
                - Plugins
    /services/{ServiceIdOrName}/routes:
        get:
            description: List all Routes associated with a Service
            operationId: list-route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Route'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Routes
            summary: List all Routes associated with a Service
            tags:
                - Routes
        post:
            description: Create a new Route associated with a Service
            operationId: create-route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RouteWithoutParents'
                description: Description of new Route for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully created Route
            summary: Create a new Route associated with a Service
            tags:
                - Routes
    /services/{ServiceIdOrName}/routes/{RouteIdOrName}:
        delete:
            description: Delete a a Route associated with a Service using ID or name.
            operationId: delete-route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/RouteIdOrName'
            responses:
                "204":
                    description: Successfully deleted Route or the resource didn't exist
            summary: Delete a a Route associated with a Service
            tags:
                - Routes
        get:
            description: Get a Route associated with a Service using ID or name.
            operationId: get-route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/RouteIdOrName'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully fetched Route
                "404":
                    description: Resource does not exist
            summary: Fetch a Route associated with a Service
            tags:
                - Routes
        patch:
            description: Update a a Route associated with a Service using ID or name.
            operationId: update-route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/RouteIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Route'
                description: Fields of the Route that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully updated Route
                "404":
                    description: Resource does not exist
            summary: Update a a Route associated with a Service
            tags:
                - Routes
        put:
            description: Create or Update a Route associated with a Service using ID or name.
            operationId: upsert-route-with-service
            parameters:
                - $ref: '#/components/parameters/ServiceIdOrName'
                - $ref: '#/components/parameters/RouteIdOrName'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RouteWithoutParents'
                description: Description of the Route
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Route'
                    description: Successfully upserted Route
            summary: Upsert a Route associated with a Service
            tags:
                - Routes
    /snis:
        get:
            description: List all SNIs
            operationId: list-sni
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/SNI'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing SNIs
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all SNIs
            tags:
                - SNIs
        post:
            description: Create a new SNI
            operationId: create-sni
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNI'
                description: Description of the new SNI for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully created SNI
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new SNI
            tags:
                - SNIs
    /snis/{SNIIdOrName}:
        delete:
            description: Delete an SNI
            operationId: delete-sni
            parameters:
                - $ref: '#/components/parameters/SNIIdOrName'
            responses:
                "204":
                    description: Successfully deleted SNI or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an SNI
            tags:
                - SNIs
        get:
            description: Get an SNI using ID or name.
            operationId: get-sni
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully fetched SNI
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an SNI
            tags:
                - SNIs
        parameters:
            - $ref: '#/components/parameters/SNIIdOrName'
        patch:
            description: Update an SNI
            operationId: update-sni
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNI'
                description: Fields of the SNI that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully updated SNI
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an SNI
            tags:
                - SNIs
        put:
            description: Create or Update SNI using ID or name.
            operationId: upsert-sni
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SNI'
                description: Description of the SNI
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SNI'
                    description: Successfully upserted SNI
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a SNI
            tags:
                - SNIs
    /status:
        get:
            description: |-
                Retrieve usage information about a node, with some basic information about the connections being processed by the underlying nginx process, the status of the database connection, and node's memory usage.

                `status_listen` listens on port `8007` by default, however `8001` can be used for status checks as well. The status endpoint provides detailed metrics regarding memory usage, worker process stats, database connection status, and server connection metrics.

                If you want to monitor the Kong process, since Kong is built on top of nginx, every existing nginx monitoring tool or agent can be used.
            operationId: get-status
            responses:
                "200":
                    $ref: '#/components/responses/GetNodeStatusResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Health Routes
            tags:
                - Information
    /status/dns:
        get:
            description: Retrieve DNS worker and stats information. If the legacy DNS client is in use, it returns a 501 status with a message.
            operationId: get-dns-status
            responses:
                "200":
                    $ref: '#/components/responses/GetDNSStatusResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
                "501":
                    content:
                        application/json:
                            schema:
                                properties:
                                    message:
                                        description: Message for legacy DNS client.
                                        type: string
                                type: object
                    description: Legacy DNS client in use
            summary: DNS Status
            tags:
                - Information
    /tags:
        get:
            description: |-
                Returns a paginated list of all the tags in the system.

                The list of entities isn't restricted to a single entity type. All entities tagged with tags are present in this list.

                If an entity is tagged with more than one tag, the `entity_id` for that entity appears more than once in the resulting list. Similarly, if several entities have been tagged with the same tag, the tag appears in multiple items in this list.
            operationId: get-tags
            responses:
                "200":
                    $ref: '#/components/responses/TagsResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: List all tags
            tags:
                - Tags
    /tags/{tag}:
        get:
            description: |-
                Returns the entities that have been tagged with the specified tag.

                The list of entities isn't restricted to a single entity type. All entities tagged with the specified tag are present in this list.
            operationId: get-tags-tag
            responses:
                "200":
                    $ref: '#/components/responses/TagsResponse'
                "401":
                    $ref: '#/components/responses/UnauthorizedRequest'
            summary: List entities by tag
            tags:
                - Tags
        parameters:
            - $ref: '#/components/parameters/Tag'
    /timers:
        get:
            description: |
                Retrieve runtime stats data from [lua-resty-timer-ng](https://github.com/Kong/lua-resty-timer-ng).
            operationId: get-timers
            responses:
                "200":
                    $ref: '#/components/responses/GetTimersDebugInfoResponse'
                "401":
                    $ref: '#/components/responses/InvalidAuthCredError'
            summary: Retrieve Runtime Debugging Info of Kong's Timers
            tags:
                - Information
    /upstreams:
        get:
            description: List all Upstreams
            operationId: list-upstream
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Upstream'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Upstreams
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Upstreams
            tags:
                - Upstreams
        post:
            description: Create a new Upstream
            operationId: create-upstream
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Upstream'
                description: Description of the new Upstream for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Upstream'
                    description: Successfully created Upstream
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Upstream
            tags:
                - Upstreams
    /upstreams/{UpstreamIdForTarget}/targets:
        get:
            description: List all Targets associated with an Upstream
            operationId: list-target-with-upstream
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Target'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Targets
            summary: List all Targets associated with an Upstream
            tags:
                - Targets
        post:
            description: Create a new Target associated with an Upstream
            operationId: create-target-with-upstream
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TargetWithoutParents'
                description: Description of new Target for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Target'
                    description: Successfully created Target
            summary: Create a new Target associated with an Upstream
            tags:
                - Targets
    /upstreams/{UpstreamIdForTarget}/targets/{TargetIdOrTarget}:
        delete:
            description: Delete a a Target associated with an Upstream using ID or target.
            operationId: delete-target-with-upstream
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/TargetIdOrTarget'
            responses:
                "204":
                    description: Successfully deleted Target or the resource didn't exist
            summary: Delete a a Target associated with an Upstream
            tags:
                - Targets
        get:
            description: Get a Target associated with an Upstream using ID or target.
            operationId: get-target-with-upstream
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/TargetIdOrTarget'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Target'
                    description: Successfully fetched Target
                "404":
                    description: Resource does not exist
            summary: Fetch a Target associated with an Upstream
            tags:
                - Targets
        patch:
            description: Update a a Target associated with an Upstream using ID or target.
            operationId: update-target-with-upstream
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/TargetIdOrTarget'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Target'
                description: Fields of the Target that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Target'
                    description: Successfully updated Target
                "404":
                    description: Resource does not exist
            summary: Update a a Target associated with an Upstream
            tags:
                - Targets
        put:
            description: Create or Update a Target associated with an Upstream using ID or target.
            operationId: upsert-target-with-upstream
            parameters:
                - $ref: '#/components/parameters/UpstreamIdForTarget'
                - $ref: '#/components/parameters/TargetIdOrTarget'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TargetWithoutParents'
                description: Description of the Target
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Target'
                    description: Successfully upserted Target
            summary: Upsert a Target associated with an Upstream
            tags:
                - Targets
    /upstreams/{UpstreamIdOrName}:
        delete:
            description: Delete an Upstream
            operationId: delete-upstream
            parameters:
                - $ref: '#/components/parameters/UpstreamIdOrName'
            responses:
                "204":
                    description: Successfully deleted Upstream or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete an Upstream
            tags:
                - Upstreams
        get:
            description: Get an Upstream using ID or name.
            operationId: get-upstream
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Upstream'
                    description: Successfully fetched Upstream
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch an Upstream
            tags:
                - Upstreams
        parameters:
            - $ref: '#/components/parameters/UpstreamIdOrName'
        patch:
            description: Update an Upstream
            operationId: update-upstream
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Upstream'
                description: Fields of the Upstream that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Upstream'
                    description: Successfully updated Upstream
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update an Upstream
            tags:
                - Upstreams
        put:
            description: Create or Update Upstream using ID or name.
            operationId: upsert-upstream
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Upstream'
                description: Description of the Upstream
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Upstream'
                    description: Successfully upserted Upstream
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Upstream
            tags:
                - Upstreams
    /vaults:
        get:
            description: List all Vaults
            operationId: list-vault
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Vault'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Vaults
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Vaults
            tags:
                - Vaults
        post:
            description: Create a new Vault
            operationId: create-vault
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Vault'
                description: Description of the new Vault for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Vault'
                    description: Successfully created Vault
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Vault
            tags:
                - Vaults
    /vaults/{VaultIdOrPrefix}:
        delete:
            description: Delete a Vault
            operationId: delete-vault
            parameters:
                - $ref: '#/components/parameters/VaultIdOrPrefix'
            responses:
                "204":
                    description: Successfully deleted Vault or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Vault
            tags:
                - Vaults
        get:
            description: Get a Vault using ID or prefix.
            operationId: get-vault
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Vault'
                    description: Successfully fetched Vault
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Vault
            tags:
                - Vaults
        parameters:
            - $ref: '#/components/parameters/VaultIdOrPrefix'
        patch:
            description: Update a Vault
            operationId: update-vault
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Vault'
                description: Fields of the Vault that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Vault'
                    description: Successfully updated Vault
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Vault
            tags:
                - Vaults
        put:
            description: Create or Update Vault using ID or prefix.
            operationId: upsert-vault
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Vault'
                description: Description of the Vault
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Vault'
                    description: Successfully upserted Vault
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Vault
            tags:
                - Vaults
    /workspace_/groups:
        get:
            operationId: list-groups
            responses:
                "200":
                    $ref: '#/components/responses/ListAllGroups'
            summary: Retrieve a list of all groups
            tags:
                - Workspaces
        post:
            operationId: create-group-in-workspace
            requestBody:
                $ref: '#/components/requestBodies/UpdateGroupsRequest'
            responses:
                "201":
                    $ref: '#/components/responses/CreateGroupsResponse'
            summary: Create a new group
            tags:
                - Workspaces
    /workspace_/groups/{groups}:
        parameters:
            - in: path
              name: groups
              required: true
              schema:
                type: string
        patch:
            operationId: update-workspace-group
            requestBody:
                $ref: '#/components/requestBodies/UpdateGroupsRequest'
            responses:
                "200":
                    description: Successfully updated the group
            summary: Update details of a specific group
            tags:
                - Workspaces
    /workspace_/groups/{groups}/roles:
        delete:
            operationId: delete-role-from-group
            parameters:
                - in: query
                  name: rbac_role_id
                  required: true
                  schema:
                    type: string
                - in: query
                  name: workspace_id
                  required: true
                  schema:
                    type: string
            responses:
                "204":
                    description: Successfully removed the role association
            summary: Remove a role association from a group
            tags:
                - Workspaces
        get:
            operationId: list-group-roles
            responses:
                "200":
                    $ref: '#/components/responses/GetRolesResponse'
            summary: Retrieve roles associated with a specific group
            tags:
                - Workspaces
        parameters:
            - in: path
              name: groups
              required: true
              schema:
                type: string
        post:
            operationId: create-role-to-group
            requestBody:
                $ref: '#/components/requestBodies/GroupRoleRequest'
            responses:
                "201":
                    $ref: '#/components/responses/GroupRoleAssociationCreated'
            summary: Associate a role with a group
            tags:
                - Workspaces
    /workspaces:
        get:
            description: List all Workspaces
            operationId: list-workspace
            parameters:
                - $ref: '#/components/parameters/PaginationSize'
                - $ref: '#/components/parameters/PaginationOffset'
                - $ref: '#/components/parameters/PaginationTagsFilter'
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                properties:
                                    data:
                                        items:
                                            $ref: '#/components/schemas/Workspace'
                                        type: array
                                    next:
                                        $ref: '#/components/schemas/PaginationNextResponse'
                                    offset:
                                        $ref: '#/components/schemas/PaginationOffsetResponse'
                                type: object
                    description: A successful response listing Workspaces
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: List all Workspaces
            tags:
                - Workspaces
        post:
            description: Create a new Workspace
            operationId: create-workspace
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Workspace'
                description: Description of the new Workspace for creation
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Workspace'
                    description: Successfully created Workspace
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Create a new Workspace
            tags:
                - Workspaces
    /workspaces/{WorkspaceIdOrName}:
        delete:
            description: Delete a Workspace
            operationId: delete-workspace
            parameters:
                - $ref: '#/components/parameters/WorkspaceIdOrName'
            responses:
                "204":
                    description: Successfully deleted Workspace or the resource didn't exist
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Delete a Workspace
            tags:
                - Workspaces
        get:
            description: Get a Workspace using ID or name.
            operationId: get-workspace
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Workspace'
                    description: Successfully fetched Workspace
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Fetch a Workspace
            tags:
                - Workspaces
        parameters:
            - $ref: '#/components/parameters/WorkspaceIdOrName'
        patch:
            description: Update a Workspace
            operationId: update-workspace
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Workspace'
                description: Fields of the Workspace that need to be updated
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Workspace'
                    description: Successfully updated Workspace
                "401":
                    $ref: '#/components/responses/HTTP401Error'
                "404":
                    description: Resource does not exist
            summary: Update a Workspace
            tags:
                - Workspaces
        put:
            description: Create or Update Workspace using ID or name.
            operationId: upsert-workspace
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Workspace'
                description: Description of the Workspace
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Workspace'
                    description: Successfully upserted Workspace
                "401":
                    $ref: '#/components/responses/HTTP401Error'
            summary: Upsert a Workspace
            tags:
                - Workspaces
servers:
    - description: Default Admin API URL
      url: '{protocol}://{hostname}:{port}{path}'
      variables:
        hostname:
            default: localhost
            description: Hostname for Kong's Admin API
        path:
            default: /
            description: Base path for Kong's Admin API
        port:
            default: "8001"
            description: Port for Kong's Admin API
        protocol:
            default: http
            description: Protocol for requests to Kong's Admin API
            enum:
                - http
                - https
tags:
    - name: ACLs
    - name: API-keys
    - description: Admin routes
      name: Admins
    - description: |-
        You can access request and database audit logs through the Admin API. The default order of audit log is by request timestamp - latest to oldest.
        <br><br>
      name: Audit Logs
    - name: Basic-auth credentials
    - description: |-
        A CA certificate object represents a trusted certificate authority.
        These objects are used by Kong Gateway to verify the validity of a client or server certificate.
      name: CA Certificates
    - description: Querying and managing cache entries.
      name: Cache
    - description: |
        A certificate object represents a public certificate, and can be optionally paired with the corresponding private key. These objects are used by Kong Gateway to handle SSL/TLS termination for encrypted requests, or for use as a trusted CA store when validating peer certificate of client/service.
        <br><br>
        Certificates are optionally associated with SNI objects to tie a cert/key pair to one or more hostnames.
        <br><br>
        If intermediate certificates are required in addition to the main certificate, they should be concatenated together into one string.
      name: Certificates
    - description: |
        Retrieve information about the status of data planes when Kong Gateway is running in hybrid mode.
      name: Clustering
    - description: |
        Apply and retrieve declarative configuration when using DB-less mode.
      name: Config
    - description: |-
        Consumer groups enable the organization and categorization of consumers (users or applications) within an API ecosystem.
        By grouping consumers together, you eliminate the need to manage them individually, providing a scalable, efficient approach to managing configurations.
      name: Consumer Groups
    - description: |
        The consumer object represents a consumer - or a user - of a service.
        You can either rely on Kong Gateway as the primary datastore, or you can map the consumer list with your database to keep consistency between Kong Gateway and your existing primary datastore.
      name: Consumers
    - name: CustomPlugins
    - description: Debug Routes
      name: Debug
    - name: Degraphql_routes
    - description: |-
        Event hooks are outbound calls from Kong Gateway. With event hooks, the Kong Gateway can communicate with target services or resources, letting the target know that an event was triggered. When an event is triggered in Kong, it calls a URL with information about that event. Event hooks add a layer of configuration for subscribing to worker events using the admin interface. Worker events are integrated into Kong Gateway to communicate within the gateway context. For example, when an entity is created, the Kong Gateway fires an event with information about the entity. Parts of the Kong Gateway codebase can subscribe to these events, then process the events using callbacks.
        <br><br>
        Depending on the protocol, one of the following attributes must be set:
        <br>
        - `webhook`: Makes a JSON POST request to a provided URL with the event data as a payload. Useful for building a middle tier integration (your own webhook that receives Kong hooks). Specific headers can be configured for the request.
        - `webhook-custom`: Fully configurable request. Useful for building a direct integration with a service (for example, a Slack webhook). Because it’s fully configurable, it’s more complex to configure. It supports templating on a configurable body, a configurable form payload, and headers.
        -  `log`: This handler, which requires no configuration, logs the event and the content of the payload into the Kong Gateway logs. If using hybrid mode, the crud and dao:crud sources will log on the control plane logs and the balancer and rate-limiting-advanced sources will log on the data plane logs.
        - `lambda`: This handler runs specified Lua code after an event is triggered.
        <br><br>
        Event hooks do not work with Konnect yet.
        <br><br>
      name: Event-hooks
    - description: Group routes
      name: Groups
    - name: HMAC-auth credentials
    - description: |
        Information routes
      name: Information
    - name: JWTs
    - description: |
        A JSON Web key set. Key sets are the preferred way to expose keys to plugins because they tell the plugin where to look for keys or have a scoping mechanism to restrict plugins to specific keys.
      name: KeySets
    - description: Keyring is the mechanism for storing sensitive data fields, such as consumer secrets, in an encrypted format within the database. This provides for encryption-at-rest security controls in a Kong Gateway cluster.
      name: Keyring
    - description: |
        A key object holds a representation of asymmetric keys in various formats. When Kong Gateway or a Kong plugin requires a specific public or private key to perform certain operations, it can use this entity.
      name: Keys
    - description: "A license entity lets you configure a license in your Kong Gateway cluster, in both traditional and hybrid mode deployments. \nIn hybrid mode deployments, the control plane sends licenses configured through the `/licenses` endpoint to all data planes in the cluster.\nThe data planes use the most recent `updated_at` license."
      name: Licenses
    - name: MTLS-auth credentials
    - name: OIDC JWKs
    - name: Partial Links
    - description: Some entities in Kong Gateway share common configuration settings that often need to be repeated. For example, multiple plugins that connect to Redis may require the same connection settings. Without Partials, you would need to replicate this configuration across all plugins. If the settings change, you would need to update each plugin individually.
      name: Partials
    - description: |-
        A plugin entity represents a plugin configuration that will be executed during the HTTP request/response lifecycle. Plugins let you add functionality to services that run behind a Kong Gateway instance, like authentication or rate limiting.
        You can find more information about available plugins and which values each plugin accepts at the [Plugin Hub](https://developer.konghq.com/plugins/).
        <br><br>
        When adding a plugin configuration to a service, the plugin will run on every request made by a client to that service. If a plugin needs to be tuned to different values for some specific consumers, you can do so by creating a separate plugin instance that specifies both the service and the consumer, through the service and consumer fields.
      name: Plugins
    - description: "Kong Gateway's RBAC feature is configurable through Kong's Admin API or using Kong Manager.\n<br><br>\nThere are four basic entities involving RBAC:\n<br><br>\n- User: The entity interacting with the system. Can be associated with zero, one, or more roles. For example: The user `bob` has the token `1234`.\n- Role: Set of permissions (`role_endpoint` and `role_entity`). Has a name and can be associated with zero, one, or more permissions. For example: The user `bob` is associated with the role `developer`.\n- `role_source`: The origin of the RBAC user role. Specifies where the user role is defined, either locally or through an identity provider (IdP).\n- `role_endpoint`: A set of enabled or disabled actions. For example: The role `developer` has one `role_endpoint` and reads and writes to `/routes`.\n- `role_entity`: A set of enabled or disabled actions. For example: The role `developer` has one `role_entity` attached to a UUID.\nFor the admin role in the default workspace, CRUD actions on /groups and /groups/* endpoints are disallowed. \nFor the workspace-admin role in non-default workspaces, CRUD actions on /groups and /groups/* endpoints are disallowed.\n"
      name: RBAC
    - description: |
        Route entities define rules to match client requests. Each route is associated with a service, and a service may have multiple routes associated to it. Every request matching a given route will be proxied to the associated service. You need at least one matching rule that applies to the protocol being matched by the route.
        <br><br>
        The combination of routes and services, and the separation of concerns between them, offers a powerful routing mechanism with which it is possible to define fine-grained entrypoints in Kong Gateway leading to different upstream services of your infrastructure.
        <br><br>
        Depending on the protocol, one of the following attributes must be set:
        <br>

        - `http`: At least one of `methods`, `hosts`, `headers`, or `paths`
        - `https`: At least one of `methods`, `hosts`, `headers`, `paths`, or `snis`
        - `tcp`: At least one of `sources` or `destinations`
        - `tls`: at least one of `sources`, `destinations`, or `snis`
        - `tls_passthrough`: set `snis`
        - `grpc`: At least one of `hosts`, `headers`, or `paths`
        - `grpcs`: At least one of `hosts`, `headers`, `paths`, or `snis`
        - `ws`: At least one of `hosts`, `headers`, or `paths`
        - `wss`: At least one of `hosts`, `headers`, `paths`, or `snis`
          <br>
          A route can't have both `tls` and `tls_passthrough` protocols at same time.
          <br><br>
          Learn more about the router:
        - [Configure routes using expressions](https://developer.konghq.com/gateway/routing/expressions/)
      name: Routes
    - description: |-
        An SNI object represents a many-to-one mapping of hostnames to a certificate.
        <br><br>
        A certificate object can have many hostnames associated with it. When Kong Gateway receives an SSL request, it uses the SNI field in the Client Hello to look up the certificate object based on the SNI associated with the certificate.
      name: SNIs
    - name: Schemas
    - description: |
        Service entities are abstractions of your microservice interfaces or formal APIs. For example, a service could be a data transformation microservice or a billing API.
        <br><br>
        The main attribute of a service is the destination URL for proxying traffic. This URL can be set as a single string or by specifying its protocol, host, port and path individually.
        <br><br>
        Services are associated to routes, and a single service can have many routes associated with it. Routes are entrypoints in Kong Gateway which define rules to match client requests. Once a route is matched, Kong Gateway proxies the request to its associated service. See the [Route documentation](https://developer.konghq.com/gateway/entities/route/) for a detailed explanation of how Kong proxies traffic.
        <br><br>
        Services can be both [tagged and filtered by tags](https://developer.konghq.com/admin-api/).
      name: Services
    - name: Tags
    - description: |
        A target is an IP address or hostname with a port that identifies an instance of a backend service. Every upstream can have many targets, and the targets can be dynamically added, modified, or deleted. Changes take effect on the fly.
        <br><br>
        To disable a target, post a new one with `weight=0`, or use the `DELETE` method to accomplish the same.
      name: Targets
    - description: |-
        The upstream object represents a virtual hostname and can be used to load balance incoming requests over multiple services (targets).
        <br><br>
        An upstream also includes a [health checker](https://developer.konghq.com/gateway/traffic-control/health-checks-circuit-breakers/), which can enable and disable targets based on their ability or inability to serve requests.
        The configuration for the health checker is stored in the upstream object, and applies to all of its targets.
      name: Upstreams
    - description: |
        Vault objects are used to configure different vault connectors for [managing secrets](https://developer.konghq.com/gateway/secrets-management/).
        Configuring a vault lets you reference secrets from other entities.
        This allows for a proper separation of secrets and configuration and prevents secret sprawl.
        <br><br>
        For example, you could store a certificate and a key in a vault, then reference them from a certificate entity. This way, the certificate and key are not stored in the entity directly and are more secure.
        <br><br>
        Secrets rotation can be managed using [TTLs](https://developer.konghq.com/gateway/entities/vault/).
      name: Vaults
    - description: |
        The workspace object describes the workspace entity, which has an ID and a name.
        <br><br>
        Workspaces provide a way to segment Kong Gateway entities. Entities in a workspace are isolated from those in other workspaces.
      name: Workspaces

# frozen_string_literal: true

module Jekyll
  module ReferencePages
    module AutoGenerated
      class Generator # rubocop:disable Style/Documentation
        def self.run(site)
          new(site).run
        end

        def initialize(site)
          @site = site
          @references = Hash.new { |h, k| h[k] = [] }
          @canonicals = {}
        end

        def run
          generate_pages!
          generate_canonicals!
          set_release_info!
          set_canonicals!
        end

        private

        def generate_pages!
          @site.collections['references'].docs.each do |doc|
            page = Page.new(doc).to_jekyll_page
            @references[page.data['base_url']] << page

            @site.pages << page
          end
        end

        def generate_canonicals!
          @references.each do |base_url, pages|
            candidate = pages.max_by { |p| Gem::Version.new(p.data['release']) }
            canonical_page = find_or_create_canonical_for(candidate)
            @canonicals[base_url] = canonical_page
          end
        end

        def set_canonicals!
          @references.each do |base_url, pages|
            pages.map do |page|
              page.data['canonical_url'] = @canonicals[base_url].url
            end
          end
        end

        def set_release_info!
          @references.each do |base_url, pages|
            releases = pages.map { |p| p.data['release'] }
            releases_dropdown = Drops::ReleasesDropdown.new(base_url:, releases:)

            [*pages, @canonicals[base_url]].each do |p|
              p.data.merge!(
                'releases' => releases,
                'releases_dropdown' => releases_dropdown
              )
            end
          end
        end

        def find_or_create_canonical_for(page)
          return page unless page.data['release'].latest?

          canonical = Canonical.new(page)
          @site.pages << canonical

          canonical
        end
      end
    end
  end
end

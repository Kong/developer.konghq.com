metadata:
  title: decK
  content_type: landing_page
  description: This page is an introduction to decK, a command line tool for API Lifecycle Automation.
  tools:
    - deck
  tags:
    - declarative-config
  breadcrumbs:
    - /tools/
rows:
  - header:
      type: h1
      text: "decK"
      sub_text: Kong's command line tool for API Lifecycle Automation

  - header:
    columns:
      - header:
          type: h2
          text: What is the decK?
        blocks:
        - type: text
          config: |
            decK is a command line tool that facilitates API Lifecycle Automation (APIOps) 
            by offering a comprehensive toolkit of commands designed to orchestrate and automate the 
            entire process of API delivery. 
            APIOps involves leveraging automation frameworks to streamline and enforce best practices 
            throughout the API lifecycle. 
            This enables developers and operations teams to manage APIs from development through deployment, 
            ensuring consistency, reliability, and speed in API integrations.

            decK is one of the many tools you can use to manage {{site.base_gateway}} and {{site.konnect_short_name}}. 
            To learn about other tools, review our [tools page](/tools/).
      - header:
          type: h2
          text: When should I use decK?
        blocks:
        - type: text
          config: |
            You should use decK if one or more of the following is true:
            - You want to manage Gateway entity configuration with declarative, file-based, GitOps-style API configuration and automation
            - You don't use Kubernetes or Terraform already
            - You're running {{site.base_gateway}} in traditional or hybrid mode, or in {{site.konnect_short_name}}

  - header:
      type: h2
      text: "Install decK"
    columns:
      - blocks:
        - type: tabs
          tab_group: install-on-os
          config:
            - title: MacOS
              include_content: tools/deck/install/osx
            - title: Windows
              include_content: tools/deck/install/windows
            - title: Linux
              include_content: tools/deck/install/linux
            - title: Docker
              include_content: tools/deck/install/docker
            - title: GitHub Actions
              include_content: tools/deck/install/github-actions
            - title: Mise
              include_content: tools/deck/install/mise

  - header:
    columns:
      - header:
          type: h2
          text: "How does decK work?"
        blocks:
        - type: text
          config:
            decK is a tool that works with state files, which describe the configuration of {{site.base_gateway}}. These state files store {{site.base_gateway}}'s configuration in a clear, declarative format,
            allowing you to manage Services, Routes, Consumers, plugins, and other entities that define how requests are processed and routed through the Gateway.
            decK communicates with {{site.base_gateway}} via the [Admin API](/api/gateway/admin-ee/).
        - type: text
          config:
            decK is one of several [tools](/tools/) available for managing {{site.base_gateway}}.

      - header:
          type: h2
          text: Other tools
        blocks:
          - type: structured_text
            config:
              blocks:
              - type: unordered_list
                items:
                    - "**[Terraform](/terraform/)**: Manage infrastructure as code and automated deployments to streamline setup and configuration of {{site.konnect_short_name}} and {{site.base_gateway}}"
                    - "**[KIC](/kubernetes-ingress-controller/)**: Manage ingress traffic and routing rules for your services"
                    - "**[{{site.base_gateway}} Admin API](/api/gateway/admin-ee/)**: Manage on-prem {{site.base_gateway}} entities via an API"
                    - "**[Control Plane Config API](/api/konnect/control-planes-config/)**: Manage {{site.base_gateway}} entities within {{site.konnect_short_name}} Control Planes via an API"

  - header:
      text: "What can decK do?"
      type: h2
    columns:
      - blocks:
        - type: x_with_y
          config:
              border: true
              type: h2
              headers:
                - Commonly used decK Gateway commands

              items:
                - text: |
                    Export your current settings from {{site.base_gateway}}
                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - gateway
                        - dump
                        - -o
                        - kong.yaml

                - text: |
                    Diff a state file with the configuration in {{site.base_gateway}}
                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - gateway
                        - diff
                        - kong.yaml

                - text: |
                    Sync a state file with the configuration in {{site.base_gateway}}
                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - gateway
                        - sync
                        - kong.yaml

                - text: |
                    Check the connection to {{site.base_gateway}}
                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - gateway
                        - ping
                - text: |
                    Self-validate its own configuration
                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - gateway
                        - validate
                - text: |
                    Sync Gateway configs to {{site.konnect_short_name}}

                    _Tip: You can add {{site.konnect_short_name}} flags to any decK command
                    to target a {{site.konnect_short_name}} Control Plane instead of a self-managed {{site.base_gateway}}._

                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - gateway
                        - sync
                        - kong.yaml
                        - --konnect-control-plane-name
                        - staging
                - text: |
                    Generate completion scripts for bash, zsh, fish, and PowerShell.
                    
                    
                    _Tip: For shell specific instructions, run `deck completion --help`_
                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - completion
                        - [bash|zsh|fish|powershell] 
  - columns:
    - blocks:
       - type: text
         config: |
          [View all decK gateway commands and options &rarr;](/index/deck/#gateway)

  - columns:
      - blocks:
        - type: x_with_y
          config:
              border: true
              type: h2
              headers:
                - Commonly used decK file commands for APIOps

              items:
                - text: |
                    Generate a {{site.base_gateway}} configuration file from an API spec
                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - file
                        - openapi2kong
                        - -s
                        - oas.yaml
                        - -o
                        - httpbin.yaml
                - text: |
                    Merge two configuration files into one
                  action:
                    type: command
                    config:
                      cmd: deck
                      args:
                        - file
                        - merge
                        - httpbin.yaml
                        - another-httpbin.yaml
                        - -o merged-kong.yaml

  - columns:
    - blocks:
       - type: text
         config: |
          [View all decK file commands and options &rarr;](/index/deck/#file-manipulation)

  - columns:
    - blocks:
      - type: card
        config:
          title: Get started
          description: Learn how to install decK and use it to configure {{ site.base_gateway }}.
          cta:
            text: Get started
            url: /deck/get-started/
            align: end
    - blocks:
      - type: card
        config:
          title: APIOps
          description: Learn how to manage {{ site.base_gateway }} configuration in a federated environment.
          cta:
            text: Manage {{ site.base_gateway }} declaratively
            url: /deck/apiops/
            align: end
    - blocks:
      - type: card
        config:
          title: Changelog
          description: Running list of release notes for decK.
          cta:
            text: decK changelog
            url: https://github.com/kong/deck/blob/main/CHANGELOG.md/
            align: end


  - header:
      text: "Frequently asked questions"
      type: h2
    columns:
      - blocks:
        - type: faqs
          config:
            - q: I use Terraform to configure {{site.base_gateway}}, why should I care about decK?
              a: |
                If you are using Terraform and are happy with it, you should continue to use it. decK covers all the problems that Terraform solves and goes beyond it:

                * With Terraform, you have to track and maintain Terraform files (*.tf) and the Terraform state (likely using a cloud storage solution). With decK, the entire configuration is stored in the YAML/JSON file(s) only. There is no separate state that needs to be tracked.
                * decK can export and back up your existing {{site.base_gateway}}'s configuration, meaning, you can take an existing {{site.base_gateway}} installation, and have a backup, as well as a declarative configuration for it. With Terraform, you will have to import each and every entity in {{site.base_gateway}} into Terraform’s state.
                * decK can check if a configuration file is valid or not (validate sub-command).
                * decK can quickly [reset](/deck/gateway/reset/) your {{site.base_gateway}}'s configuration when needed.
                * decK works out of the box with {{site.base_gateway}} features like Workspaces and RBAC.
            - q: Can I run multiple decK processes at the same time?
              a: |
                The two processes will step on each other and might corrupt {{site.base_gateway}}'s configuration. You should ensure that there is only one instance of decK running at any point in time.
            - q: |
               {{site.base_gateway}} already has built-in declarative configuration, do I still need decK?
              a: |
                {{site.base_gateway}} has an official declarative configuration format. {{site.base_gateway}} can generate such a file with the `kong config db_export` command,
                which exports most of {{site.base_gateway}}'s database into a file.

                You can use a file in this format to configure {{site.base_gateway}} when it is running in a DB-less or in-memory mode.
                If you're using {{site.base_gateway}} in DB-less mode, you can't use decK for any sync, dump, or similar operations, as they require write access to the Admin API.

                If you are using {{site.base_gateway}} alongside a database, you need decK because:

                * {{site.base_gateway}}'s `kong config db_import` command isn't sufficient in the following situations:
                  * The command is used to initialize a {{site.base_gateway}} database,
                  but we don't recommended using it if there are existing {{site.base_gateway}} nodes running,
                  as the cache in these nodes won't be invalidated when entities are changed or added.
                  In that case, you would need to manually restart all existing {{site.base_gateway}} nodes.
                  decK performs all the changes via Kong's Admin API, meaning the changes are always propagated to all nodes.
                  * The command can only add and update entities in the database.
                    It won't remove the entities that are present in the database but aren't present in the configuration file.
                  * The command needs direct access to {{site.base_gateway}}'s database, which may not be possible in your production networking environment.
                * decK can easily perform detect drifts in configuration.
                For example, it can verify if the configuration stored inside {{site.base_gateway}}'s database and the configuration inside the config file is the same.
                This feature is designed for integrating decK with a CI system or a cronjob which periodically checks for drifts and alerts a team if needed.
                * `deck gateway dump` outputs a more human-readable configuration file compared to {{site.base_gateway}}'s `db_import`.

                However, decK has the following limitations which may affect your use case:

                * If you have a very large installation, it can take some time for decK to sync up the configuration to {{site.base_gateway}}.
                This can be mitigated by adopting distributed configuration for your {{site.base_gateway}} installation and tweaking the `--parallelism` value.
                {{site.base_gateway}}`s `db_import` will usually be faster by orders of magnitude.
                * decK can't export and re-import fields that are hashed in the database.
                This means that fields like the password of the `basic-auth` credential can't be correctly re-imported by decK. This
                happens because {{site.base_gateway}}'s Admin API call to sync the configuration will rehash the already hashed password.
            - q: I'm a {{site.base_gateway}} user, can I use decK?
              a: |
                decK is designed to be compatible with open-source and enterprise versions of {{site.base_gateway}}.
            - q: I'm a {{site.konnect_short_name}} user, can I use decK?
              a: |
                Yes, decK is compatible with {{site.konnect_short_name}}.

                {{site.konnect_short_name}} requires decK v1.40.0 or above. Versions below this will see inconsistent `deck gateway diff` and `sync` results.
            - q: I use Cassandra as a data store for {{site.base_gateway}}, can I use decK?
              a: |
                As of {{site.base_gateway}} 3.4, you can't use Cassandra as a data store, as it is no longer supported by {{site.base_gateway}}.
                You can use decK with earlier versions of {{site.base_gateway}} backed by Cassandra. However, if you observe errors during a sync process, you will have to tweak decK's settings and make a few adjustments.

                decK heavily parallelizes its operations, which can induce a lot of load onto your Cassandra cluster. You should consider:

                * decK is read-intensive for most parts, meaning it will perform read-intensive queries on your Cassandra cluster, so make sure you tune your Cassandra cluster accordingly.
                * decK talks to the same {{site.base_gateway}} node that talks to the same Cassandra node in your cluster.
                Use the `--parallelism 1` flag to ensure that there is only request being processed at a time. This will slow down sync process and should be used as a last resort.
            - q: Is there a JSON Schema for decK?
              a:  |
                Yes. The decK team maintains a JSON schema that you can use to validate YAML files on Github. You can use the schema with a text editor to provide JIT YAML validation. For example, to use the JSON schema with VS Code:
                1. Install the Red Hat YAML extension:

                        code --install-extension redhat.vscode-yaml
                2. Edit the plugin settings in VS Code:

                        "yaml.schemas": {
                          "https://json.schemastore.org/kong_json_schema.json": [
                              "kong.yml",
                              "kong.yaml"
                          ]
                        }
                3. Verify that it works by opening your existing `kong.yml` or `kong.yaml` file.
            - q: What Admin API endpoints does decK use?
              a:  |
                decK uses Kong's Admin API to communicate with {{site.base_gateway}}.
                If you have RBAC enabled, you need to give decK permissions to perform operations, or use an admin account that has these permissions.

                Here are some common endpoints hit by decK for normal operations:

                * `GET, POST, PATCH, PUT, DELETE /{entityType}` or `GET, POST, PATCH, PUT, DELETE /{workspace}/{entityType}`: Perform read and write operations on entities.

                  If you are running {{site.ee_product_name}}, then decK interacts with entities inside workspaces.
                  See the [Entities managed by decK](/deck/reference/entities/) reference for the full list.

                  Note that decK also performs operations on entities enabled by plugins, such as `/basic-auths`, `/jwts`, and so on.
                * `GET /`: Get the {{site.base_gateway}} version.
                * `GET /{workspace}/kong`: Get entities in a workspace.
                * `GET /{workspace}/workspaces/{entityType}`: Check whether the workspace or other entity exists or not.
                * `GET /{workspace}/schemas/{entityType}`: Retrieves the schema for a specified entity type within a workspace and applies default settings.
                * `GET /{workspace}/schemas/plugins/{pluginName}`: Retrieves the schema for a specified plugin within a workspace and applies default settings.
                * `POST /workspaces`: Create missing workspaces.

                To find out which endpoints your instance of decK is hitting, execute any decK command with the `--verbose 1` flag.
                This outputs all of the queries being made. For example, here's a snippet from `deck gateway dump --verbose 1`:

  - header:
      type: h2
      text: "Related resources"
    columns:
      - blocks:
        - type: related_resources
          config:
            - text: "Declarative Configuration and Drift Detection for Kong: The motivation behind decK"
              type: video
              url: https://www.youtube.com/watch?v=fzpNC5vWE3g
            - text: decK on GitHub
              type: github
              url: https://github.com/Kong/deck
            - text: decK changelog
              type: github
              url: https://github.com/kong/deck/blob/main/CHANGELOG.md

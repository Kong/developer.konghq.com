metadata:
  title: "{{site.base_gateway}} traffic control and routing"
  product: gateway
  content_type: landing_page
  description: Learn how {{site.base_gateway}} listens for, routes, and proxies traffic.
  breadcrumbs:
    - /gateway/
rows:
  - header:
      type: h1
      text: "How does {{site.base_gateway}} proxy traffic?"
      sub_text: "As an API gateway, one of {{site.base_gateway}}'s main roles is to listen for, route, and proxy traffic."

  - columns:
      - blocks:
          - type: structured_text
            config:
              blocks:
                - type: text
                  text: |
                    {{site.base_gateway}} handles traffic in the following order:

                    1. {{site.base_gateway}} listens for HTTP traffic on its configured
                    proxy ports.
                    1. {{site.base_gateway}} evaluates any incoming HTTP request or L4 connection against the Routes you have configured and tries to find a matching one. 
                    1. If multiple Routes match, the {{site.base_gateway}} router then orders all defined Routes by their priority and uses the highest priority matching Route to handle a request.
                    1. {{site.base_gateway}} implements load balancing capabilities to distribute proxied
                    requests across a pool of instances of an upstream service.
                    1. Once {{site.base_gateway}} has executed all the necessary logic (including plugins), it is ready to forward the request to your upstream service. 
                    1. {{site.base_gateway}} receives the response from the upstream service and sends it back to the
                    downstream client in a streaming fashion. 

                    {{site.base_gateway}} runs [plugins](/gateway/entities/plugin/) between several of these phases.
      - blocks:
          - type: mermaid
            config:
              diagram: |
                sequenceDiagram
                participant Gateway as Kong Gateway
                participant Router
                participant LoadBalancer as Load balancer
                participant UpstreamService as Upstream service

                Gateway->>Router: Evaluates incoming request against Routes
                Router->>Router: Orders Routes by priority
                Router->>Gateway: Returns highest priority matching Route
                Gateway->>LoadBalancer: Implements load balancing capabilities
                LoadBalancer->>LoadBalancer: Distributes request across upstream service instances
                LoadBalancer->>UpstreamService: Forwards request to selected instance
                UpstreamService->>Gateway: Sends response
    
  - columns:
      - blocks:
          - type: structured_text
            config:
              header:
                text: "Listeners"
              blocks:
                - type: text
                  text: | 
                    From a high-level perspective, {{site.base_gateway}} listens for HTTP traffic on its [configured
                    proxy ports](/gateway/network-ports-firewall/#proxy-ports) (`8000` and `8443` by default) and L4 traffic on explicitly configured
                    [`stream_listen`](/gateway/configuration/#stream-listen) ports. {{site.base_gateway}} will evaluate any incoming
                    HTTP request or L4 connection against the routes you have configured and try to find a matching
                    one. {{site.base_gateway}} also listens for L7 traffic. 
  - columns:
      - blocks:
          - type: card
            config:
              title: "`proxy_listen`"
              description: |
                Defines a list of addresses/ports on which {{site.base_gateway}} will accept public HTTP (gRPC, WebSocket, etc) traffic from clients and proxy it to your upstream services (`8000` by default).
              cta:
                text: Learn more about `proxy_listen` &rarr;
                url: /gateway/configuration/#proxy-listen
      - blocks:
          - type: card
            config:
              title: "`admin_listen`"
              description: |
                Defines a list of addresses and ports, but those
                should be restricted to only be accessed by administrators, as they expose
                {{site.base_gateway}}'s configuration capabilities via the Admin API (`8001` by default).
              cta:
                text: Learn more about `admin_listen` &rarr;
                url: /gateway/configuration/#stream-listen
      - blocks:
          - type: card
            config:
              title: "`stream_listen`"
              description: |
                Similar to `proxy_listen`, but for Layer 4 (TCP, TLS) generic proxy. This is disabled by default.
              cta:
                text: Learn more about `stream_listen` &rarr;
                url: /gateway/configuration/#stream-listen
  - columns:
      - blocks:
          - type: structured_text
            config:
              header:
                text: "Routing"
              blocks:
                - type: text
                  text: | 
                    Once the listeners pick up a request, {{site.base_gateway}} searches for a matching [Route](/gateway/entities/route/).

                    For a request to match a Route:

                    - The request **must** include **all** of the configured fields
                    - The values of the fields in the request **must** match at least one of the
                      configured values (While the field configurations accepts one or more values,
                      a request needs only one of the values to be considered a match) 

                    Routing criteria depend on the type of router that you're using: traditional or expressions.
  
  - columns:
      - blocks:
          - type: card
            config:
              title: Routing
              description: |
                Routing is the process of {{site.base_gateway}} routers using various criteria to determine which Routes match a request.
              cta:
                text: Learn more about routing &rarr;
                url: /gateway/entities/route/#how-routing-works
      - blocks:
          - type: card
            config:
              title: Expressions router
              description: |
                The expressions router provides a Domain Specific Language (DSL) that allows for complex routing rule definition. 
                The expressions router ensures good runtime matching performance by providing specific routing comparisons such as non-regex equality checks that are not available in the traditional router.
              cta:
                text: Learn more about the expressions router &rarr;
                url: /gateway/routing/expressions/
      - blocks:
          - type: card
            config:
              title: Traditional router
              description: |
                {{ site.base_gateway }}'s original routing configuration format. It uses JSON to provide a list of routing criteria, including `host`, `path`, and `headers`.
              cta:
                text: Learn more about the traditional router &rarr;
                url: /gateway/routing/traditional/#routing-criteria
  
  - columns:
      - blocks:
          - type: structured_text
            config:
              header:
                text: "Proxying"
              blocks:
                - type: text
                  text: | 
                    Once a request is matched to a Route, {{site.base_gateway}} then proxies the request.
                    How the request is handled depends on the load balancer you're using as well as the plugins you've configured.
  
  - columns:
      - blocks:
          - type: card
            config:
              title: Load balancing
              description: |
                {{site.base_gateway}} implements load balancing capabilities to distribute proxied requests across a pool of instances of an upstream service.
              cta:
                text: Learn more about load balancing options &rarr;
                url: /gateway/traffic-control/load-balancing-reference/
      - blocks:
          - type: card
            config:
              title: Plugin execution phases
              description: |
                Plugins can execute during several phases of the request lifecycle. 
              cta:
                text: Learn more about plugin phases &rarr;
                url: /gateway/entities/plugin/#plugin-contexts
      - blocks:
          - type: card
            config:
              title: Upstream timeouts
              description: |
                Once {{site.base_gateway}} has executed all the necessary logic (including plugins), it is ready
                to forward the request to your upstream service. 
              cta:
                text: Learn more about upstream timeouts &rarr;
                url: /gateway/traffic-control/proxying/#proxying-and-upstream-timeouts
  - columns:
      - blocks:
          - type: card
            config:
              title: Response
              description: |
                {{site.base_gateway}} receives the response from the upstream service and sends it back to the downstream client in a streaming fashion. 
                At this point, {{site.base_gateway}} executes subsequent plugins added to the Route and/or Service that implement a hook in the `header_filter` phase.
              cta:
                text: Learn more about the response phase &rarr;
                url: /gateway/traffic-control/proxying/#response
      - blocks:
          - type: card
            config:
              title: Errors and retries
              description: |
                Whenever an error occurs during proxying, {{site.base_gateway}} uses the underlying Nginx retries mechanism to pass the request on to the next upstream.  
              cta:
                text: Learn more about the retries mechanism &rarr;
                url: /gateway/traffic-control/proxying/#errors-and-retries



  
  
metadata:
  title: "Secrets management with {{site.base_gateway}}"
  short_title: "Secrets management"
  content_type: landing_page
  description: Learn about storing, using, and rotating secrets with {{site.base_gateway}}.
  breadcrums:
    - /gateway/
  tags:
    - security
    - secrets-management
    - secrets
  search_aliases:
    - Amazon
    - HCV
    - GCP
  breadcrumbs:
    - /gateway/
  products:
    - gateway
  works_on:
  - on-prem
  - konnect
rows:
  - header:
      type: h1
      text: "Secrets management"
  - columns:
      - blocks:
        - type: structured_text
          config:
            header:
              text: "What is secrets management?"
            blocks:
              - type: text
                text: |
                  A secret is any sensitive piece of information required for API gateway operations. 
              - type: text
                text: |
                  Secrets can be information like the following:
              - type: unordered_list
                items:
                  - TLS certificates
                  - Credentials and API keys (to access databases, identity providers, and other services)
                  - Cryptographic keys (for digital signing and encryption)
              - type: text
                text: |
                  By storing these values as secrets, you ensure that they aren't visible in plain text in logs, the UI, `kong.conf`, or decK files. 
                  Once a secret is stored, you can use the secret reference instead of the sensitive information. For example, a secret stored in an environment variable called `MY_SECRET_POSTGRES_PASSWORD` would be referenced with `{vault://env/my-secret-postgres-password}`. 
                  
                  You can reference secrets in the following {{site.base_gateway}} configuration: 
              - type: unordered_list
                items:
                  - Any field in the [`kong.conf`](/gateway/configuration/)
                  - Referenceable fields in Kong plugins
                  - Configuration associated with APIs serviced by {{site.base_gateway}}

  - columns:
      - blocks:
        - type: structured_text
          config:
            header:
              text: "How can I manage secrets in {{site.base_gateway}}?"
            blocks:
              - type: text
                text: |
                  Secret management options vary depending on which {{site.base_gateway}} tier you have. {{site.base_gateway}} OSS users can only manage secrets by storing them in [environment variables](/gateway/entities/vault/#store-secrets-as-environment-variables). 
                  {{site.base_gateway}} Enterprise users can use environment variables as well as Vaults. The [Vaults entity](/gateway/entities/vault/) allows you to store and reference secrets from an external, third-party vault or {{site.konnect_short_name}} Config Store. 
  - columns:
      - blocks:
        - type: card
          config:
            title: Environment variables
            description: |
              Store secrets as environment variables and reference them in any field that supports Vault references.
              
            icon: /assets/icons/code.svg
            ctas:
              - text: Configuration
                url: "/gateway/entities/vault/?tab=env-var#vault-provider-specific-configuration-parameters"
              - text: With {{ site.base_gateway }}
                url: "/gateway/entities/vault/#store-secrets-as-environment-variables"
      - blocks:
        - type: card
          config:
            title: "{{site.konnect_short_name}} Config Store"
            description: |
              Use {{site.konnect_short_name}} as a Vault backend using a Config Store.
            icon: /assets/icons/gateway.svg
            ctas:
              - text: Configuration
                url: "/api/konnect/control-planes-config/v2/#/operations/create-config-store/"
              - text: With {{ site.konnect_short_name }}
                url: "/how-to/configure-the-konnect-config-store/"
      - blocks:
        - type: card
          config:
            title: Azure Key Vaults
            description: |
              Connect your Azure Key Vaults to {{site.base_gateway}} to reference secrets.
              
            icon: /assets/icons/azure.svg
            ctas:
              - text: Configuration
                url: "/gateway/entities/vault/?tab=azure#vault-provider-specific-configuration-parameters"
              - text: With {{ site.base_gateway }}
                url: "/how-to/configure-azure-key-vaults-as-a-vault-backend-with-vault-entity/"

  - columns:
      - blocks:
        - type: card
          config:
            title: HashiCorp Vault
            description: |
              Connect HashiCorp Vault to {{site.base_gateway}} to reference secrets.
            icon: /assets/icons/hashicorp.svg
            ctas:
              - text: Configuration
                url: "/gateway/entities/vault/?tab=hashicorp#vault-provider-specific-configuration-parameters"
              - text: With {{ site.base_gateway }}
                url: "/how-to/configure-hashicorp-vault-as-a-vault-backend/"
              - text: With {{ site.kic_product_name }}
                url: "/kubernetes-ingress-controller/vault/hashicorp/"
      - blocks:
        - type: card
          config:
            title: AWS Secrets Manager
            description: |
              Connect your AWS Secrets Manager to {{site.base_gateway}} to reference secrets.
              
            icon: /assets/icons/aws.svg
            ctas:
              - text: Configuration
                url: "/gateway/entities/vault/?tab=aws#vault-provider-specific-configuration-parameters"
              - text: With {{ site.base_gateway }}
                url: "/how-to/configure-aws-secrets-manager-as-a-vault-backend-with-vault-entity/"
              - text: With {{ site.kic_product_name }}
                url: "/kubernetes-ingress-controller/vault/aws/"
      - blocks:
        - type: card
          config:
            title: Google Cloud Platform Secret Manager
            description: |
              Connect Google Cloud Platform Secret Manager to {{site.base_gateway}} to reference secrets.
              
            icon: /assets/icons/google-cloud.svg
            ctas:
              - text: Configuration
                url: "/gateway/entities/vault/?tab=google-cloud#vault-provider-specific-configuration-parameters"
              - text: With {{ site.base_gateway }}
                url: "/how-to/configure-google-cloud-secret-as-a-vault-backend/"
              - text: With {{ site.kic_product_name }}
                url: "/kubernetes-ingress-controller/vault/gcp/"
  - header:
      text: Secrets rotation
      type: h2
    columns:
      - blocks:
        - type: structured_text
          config:
            blocks:
              - type: text
                text: |
                  Secret rotation is a process that periodically updates secrets.
                  Secret rotation is important for the following reasons:
              - type: unordered_list
                items:
                  - Reducing the impact of compromised secrets
                  - Enhancing resilience against brute-force attacks
                  - Complying with security regulations
                  - Maintaining separation of duties
                  - Adapting to evolving threats
                  - Mitigating the effects of insider threats
  - header:
      text: How can I rotate secrets in {{site.base_gateway}}?
      type: h2
    columns:
      - blocks:
        - type: structured_text
          config:
            blocks:
              - type: text
                text: |
                  If you have secrets rotation configured in your third-party vault settings, {{site.base_gateway}} can retrieve rotated secrets on a schedule.
                  {{site.base_gateway}} can be configured to check for rotated secrets in the following ways:
              - type: unordered_list
                items:
                  - Check periodically using TTLs (for example, check for new TLS certificates once per day). This can be configured in the [Vault entity](/gateway/entities/vault/) configuration.
                  - Check on failure (for example, on database authentication failure, check if the secrets were updated, and try again). You must write code in {{site.base_gateway}} to configure this, so support is limited to PostgreSQL credentials for now. 
  - columns:
      - blocks:
        - type: card
          config:
            title: Google Cloud Platform Secret Manager
            description: |
              Rotate secrets in Google Cloud Platform Secret Manager by configuring {{site.base_gateway}} Vault TTLs.
              
            icon: /assets/icons/google-cloud.svg
            cta:
              url: "/how-to/rotate-secrets-in-google-cloud-secret/"
      - blocks:
        - type: card
          config:
            title: Kong PDK API
            description: |
              Check for rotated secrets on failure using the experimental `kong.vault.try`.
            icon: /assets/icons/gateway.svg
            cta:
              url: "/gateway/pdk/reference/kong.vault/#kong-vault-try-callback-options"
  - header:
      text: "Frequently Asked Questions"
      type: h2
    columns:
      - blocks:
        - type: faqs
          config:
            - q: I have a secret with multiple versions, how do I specify an earlier version when I'm referencing the secret?
              a: |
                If you have a secret with multiple versions, you can access the current version or any previous version of the secret by specifying a version in the reference.

                In the following AWS example, `AWSCURRENT` refers to the latest secret version and `AWSPREVIOUS` refers to an older version:
                ```sh
                # For AWSCURRENT, not specifying version
                {vault://aws/secret-name/foo}

                # For AWSCURRENT, specifying version == 1
                {vault://aws/secret-name/foo#1}

                # For AWSPREVIOUS, specifying version == 2
                {vault://aws/secret-name/foo#2}
                ```
                This applies to all providers with versioned secrets.
            - q: My secret in AWS Secret Manager has a `/` backslash in the secret name. How do I reference this secret in {{site.base_gateway}}?
              a: |
                The slash symbol (`/`) is a valid character for the secret name in AWS Secrets Manager. If you want to reference a secret name that starts with a slash or has two consecutive slashes, transform one of the slashes in the name into URL-encoded format. For example:
                * A secret named `/secret/key` should be referenced as `{vault://aws/%2Fsecret/key}`
                * A secret named `secret/path//aaa/key` should be referenced as `{vault://aws/secret/path/%2Faaa/key}`
                
                Since {{site.base_gateway}} tries to resolve the secret reference as a valid URL, using a slash instead of a URL-encoded slash will result in unexpected secret name fetching.
            - q: I have secrets stored in multiple AWS Secret Manager regions, how do I reference those secrets in {{site.base_gateway}}?
              a: |
                You can create multiple Vault entities, one per region with the `config.region` parameter. You'd then reference the secret by the name of the Vault:
                ```sh
                {vault://aws-eu-central-vault/secret-name/foo}
                {vault://aws-us-west-vault/secret-name/snip}
                ```
            - q: I'm using Google Workload Identity, how do I configure a Vault?
              a: |
                To use GCP Secret Manager with
                [Workload Identity](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity)
                on a GKE cluster, update your pod spec so that the service account (`GCP_SERVICE_ACCOUNT`) is
                attached to the pod. For configuration information, read the [Workload
                Identity configuration
                documentation](https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity#authenticating_to).

                {:.info}
                > **Notes:**
                > * With Workload Identity, setting the `GCP_SERVICE_ACCOUNT` isn't necessary.
                > * When using GCP Vault as a backend, make sure you have configured `system` as part of the
                > [`lua_ssl_trusted_certificate` configuration directive](/gateway/configuration/#lua-ssl-trusted-certificate)
                so that the SSL certificates used by the official GCP API can be trusted by {{site.base_gateway}}.
            - q: How does {{site.base_gateway}} retrieve secrets from HashiCorp Vault?
              a: |
                {{site.base_gateway}} retrieves secrets from HashiCorp Vault's HTTP API through a two-step process: authentication and secret retrieval.

                **Step 1: Authentication**

                Depending on the authentication method defined in `config.auth_method`, {{site.base_gateway}} authenticates to HashiCorp Vault using one of the following methods:

                - If you're using the `token` auth method, {{site.base_gateway}} uses the `config.token` as the client token.
                - If you're using the `kubernetes` auth method, {{site.base_gateway}} uses the service account JWT token mounted in the pod (path defined in the `config.kube_api_token_file`) to call the login API for the Kubernetes auth path on the HashiCorp Vault server and retrieve a client token.
                - {% new_in 3.4 %} If you're using the `approle` auth method, {{site.base_gateway}} uses the AppRole credentials to retrieve a client token. The AppRole role ID is configured by field `config.approle_role_id`, and the secret ID is configured by field `config.approle_secret_id` or `config.approle_secret_id_file`. 
                  - If you set `config.approle_response_wrapping` to `true`, then the secret ID configured by
                  `config.approle_secret_id` or `config.approle_secret_id_file` will be a response wrapping token, 
                  and {{site.base_gateway}} will call the unwrap API `/v1/sys/wrapping/unwrap` to unwrap the response wrapping token to fetch 
                  the real secret ID. {{site.base_gateway}} will use the AppRole role ID and secret ID to call the login API for the AppRole auth path
                  on the HashiCorp Vault server and retrieve a client token.
                
                By calling the login API, {{site.base_gateway}} will retrieve a client token and then use it in the next step as the value of `X-Vault-Token` header to retrieve a secret.

                **Step 2: Retrieving the secret**

                {{site.base_gateway}} uses the client token retrieved in the authentication step to call the Read Secret API and retrieve the secret value. The request varies depending on the secrets engine version you're using.
                {{site.base_gateway}} will parse the response of the read secret API automatically and return the secret value.


  
  - header:
      text: How-to Guides
      type: h2
    columns:
      - blocks:
          - type: how_to_list
            config:
              tags:
                - security
                - secrets-management
              products:
                - gateway
              quantity: 5

metadata:
  title: "Metrics and monitoring with {{site.base_gateway}}"
  short_title: "Monitoring"
  content_type: landing_page
  description: Learn about how you can monitor {{site.base_gateway}} metrics.
  tags:
    - metrics
    - analytics
    - monitoring
  search_aliases:
    - Datadog
    - Prometheus
    - StatsD
  breadcrumbs:
    - /gateway/
  products:
    - gateway
  works_on:
  - on-prem
  - konnect
rows:
  - header:
      type: h1
      text: "Metrics and monitoring"

  - header:
      type: h2
      text: "How does {{site.base_gateway}} expose metrics?"
    columns:
      - blocks:
          - type: structured_text
            config:
              blocks:
                - type: text
                  text: |
                    {{site.base_gateway}} can expose metrics using either of the following:
                    * [**Admin API**](https://developer.konghq.com/api/gateway/admin-ee/): Available at the `/metrics` endpoint and is enabled by default for {{site.base_gateway}} on-prem. 
                    * [**Status API**](https://developer.konghq.com/api/gateway/status/v1/#/paths/metrics/get): Available at the `/metrics` endpoint and is disabled by default. 
                      You must enable [`status_listen`](/gateway/configuration/#status-listen) to use the Status API. 
                      If you're using {{site.konnect_short_name}}, you must use the Status API.
                    
                    {{site.base_gateway}} will report system wide performance metrics by default. 
                    You can use Kong monitoring plugins to scrape the metrics.
                    When a monitoring plugin has been installed and traffic is being proxied, it will record additional metrics across Gateway Service, Route, and Upstream dimensions.
                    
  
                     
  - header:
      type: h2
      text: "How do I monitor {{site.base_gateway}} metrics?"
    columns:
      - blocks:
          - type: structured_text
            config:
              blocks:
                - type: text
                  text: |
                    API gateways isolate your applications from the outside world and provide critical path
                    protection for your upstream services. Understanding the state of your API gateway
                    system is critical to providing reliable API-based systems.

                    There are many monitoring and alerting systems available, and {{site.base_gateway}} integrates with 
                    multiple solutions:
  - columns:
      - blocks:
        - type: card
          config:
            title: Prometheus
            description: |
              Prometheus is an open-source systems monitoring and alerting toolkit.
              Prometheus provides a multi-dimensional time series data model and query language.
            icon: /assets/icons/prometheus.svg
            ctas:
              - text: Prometheus plugin
                url: "/plugins/prometheus/"
              - text: Collect metrics with {{site.base_gateway}}
                url: "/how-to/collect-metrics-with-prometheus/"
              - text: Collect metrics with Datadog
                url: /how-to/collect-metrics-with-datadog-and-prometheus-plugin/
              - text: Monitor metrics with KIC
                url: "/kubernetes-ingress-controller/observability/prometheus-grafana/"
      - blocks:
        - type: card
          config:
            title: Datadog
            description: |
              Datadog is a popular cloud based infrastructure and application monitoring service.
            icon: /assets/icons/datadog.svg
            ctas:
              - text: Datadog plugin
                url: "/plugins/datadog/"
              - text: Set up Dynatrace with OpenTelemetry
                url: "/how-to/set-up-dynatrace-with-otel/"
      - blocks:
        - type: card
          config:
            title: StatsD
            description: |
              StatsD is a lightweight network daemon that listens for application metrics on UDP or TCP and sends aggregated values to one or more backend services. 
              {{site.base_gateway}} directly supports StatsD with the StatsD plugin.
            icon: /assets/icons/statsd.svg
            ctas:
              - text: StatsD plugin
                url: "/plugins/statsd/"
              - text: Collect metrics with StatsD
                url: "/how-to/collect-metrics-statsd/"
      - blocks:
        - type: card
          config:
            title: Node readiness endpoint
            description: |
              Use the built-in Node Readiness endpoint for monitoring when {{site.base_gateway}} is ready to accept requests.
            icon: /assets/icons/api.svg
            ctas:
              - text: Enable the endpoint
                url: "/gateway/traffic-control/health-check-probes/#enable-the-node-readiness-endpoint"
  
  - header:
      type: h2
      text: "What is health checking?"
    columns:
      - blocks:
          - type: structured_text
            config:
              blocks:
                - type: text
                  text: |
                    Health checking is an activity performed by infrastructure components (that is, load balancers) to monitor the health of a {{site.base_gateway}} node.
                    This helps determine if a {{site.base_gateway}} node is operational and ready to process incoming requests. 
                    You can learn more about health checks (also known as "probes") in the [Health check probes](/gateway/traffic-control/health-check-probes/) guide.
  
  - header:
      type: h2
      text: "Monitoring best practices"
    columns:
      - blocks:
          - type: structured_text
            config:
              blocks:
                - type: text
                  text: |
                    While infrastructure environments can vary widely, we encourage you to follow these general recommendations:

                    * Enable the [`status_listen`](/gateway/configuration/#status-listen) configuration parameter.
                    * Always health check {{site.base_gateway}} and track the health in monitoring dashboards such as Datadog, Grafana, AppDynamics, and so on.
                    * Configure the load balancer or other components immediately fronting {{site.base_gateway}} to use the [readiness probe](/gateway/traffic-control/health-check-probes/).
                    * In the case of Kubernetes, configure both [liveness and readiness probes](/gateway/traffic-control/health-check-probes/) for {{site.base_gateway}}, ensuring a load balancer uses the correct [Kubernetes endpoints](https://kubernetes.io/docs/concepts/services-networking/service/#endpoints) to forward traffic to {{site.base_gateway}} pods. 
                      Don't expect the {{site.base_gateway}} readiness endpoint to respond with a `200 OK` immediately after startup, as it always takes a short time for {{site.base_gateway}} to load the first configuration and build all the necessary data structures before it can successfully proxy traffic.
                    * Set up alerting based on responses to the health checks to be proactive in case of an incident.
                    * Don't use the [`kong health`](/gateway/cli/reference/#kong-health) CLI command to validate the overall health of the {{site.base_gateway}}, as this command only ensures that the {{site.base_gateway}} process is running and doesn't ensure the ability or validity of the configuration.
                    * Ensure that all nodes in a cluster are monitored. For example, checking only one Data Plane node in a cluster can't offer reliable insight into the health of other Data Plane nodes in the same cluster.

  - header:
      type: h2
      text: "Related resources"
  - column_count: 3
    columns:
      - blocks:
        - type: card
          config:
            title: Advanced Analytics 
            description: |
              Advanced Analytics is a real-time, highly contextual analytics platform that provides deep insights into API health, performance, and usage.
            icon: /assets/icons/analytics.svg
            cta:
              text: Explore analytics
              url: /advanced-analytics/
              align: end
      - blocks:
        - type: card
          config:
            title: Tracing
            description: |
              {{site.base_gateway}} has OpenTelemetry tracing capabilities. 
              You can use plugins to collect traces.
            icon: /assets/icons/codeblock.svg
            cta:
              text: See reference
              url: /gateway/tracing/
              align: end
            

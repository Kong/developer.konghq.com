metadata:
  title: Kong Ingress Controller
  content_type: landing_page
  description: |
    Configure {{ site.base_gateway }} using Kubernetes CRDs with {{ site.kic_product_name }}
  tags:
    - kubernetes
  tools:
    - kic
  products:
    - kic

rows:
  - header:
      type: h1
      text: "{{site.kic_product_name}} (KIC)"
      sub_text: "Configure {{ site.base_gateway }} using Kubernetes CRDs with {{ site.kic_product_name }}"

  - header:
      type: h2
      text: What is the {{site.kic_product_name}}?
    columns:
      - blocks:
          - type: text
            config: |
              {{ site.kic_product_name }} allows you to run {{ site.base_gateway }} as a Kubernetes Ingress to handle inbound requests for a Kubernetes cluster.

              {{ site.kic_product_name }} takes Kubernetes resources such as `Ingress` and `HTTPRoute` and converts them into a valid {{ site.base_gateway }} configuration. It enables you to configure all the [features](/gateway/#learn) of {{ site.base_gateway }} using Kubernetes CRDs.

              KIC supports all [{{ site.base_gateway }} entities](/gateway/entities/), and can be deployed multiple times within a single cluster to provide [traffic splitting](/kubernetes-ingress-controller/split-traffic/).
          
              ### When should I use KIC?
              You should use KIC if one or more of the following is true:
              - You're running {{site.base_gateway}} in a Kubernetes environment
              - You want Kubernetes-native API Gateway management
          
          - type: button
            config:
              text: Get started with {{ site.kic_product_name }}
              url: "/kubernetes-ingress-controller/install/"

      - blocks:
          - type: mermaid
            config:
              diagram: |
                flowchart TB
                   A(<img src="/assets/icons/git.svg" style="max-height:25px; display:block; margin:0 auto;" /> Cluster Operator)
                   B(<img src="/assets/icons/kubernetes.svg" style="max-width:25px; display:block; margin:0 auto;" /> API server)
                   C(<img src="/assets/icons/KogoBlue.svg" style="max-width:25px; display:block; margin:0 auto;" /> Kong Ingress Controller)

                   D@{ shape: processes, label: "<img src='/assets/icons/KogoBlue.svg' style='max-width:25px; display:block; margin:0 auto;' /> Kong Gateways"}

                    A -->|kubectl apply| B
                    C <-->|Reads configuration| B
                    C -->|POST /config| D

  - header:
      type: h2
      text: Gateway API support
    columns:
      - blocks:
          - type: text
            config: |
              Kong is proud to be a driving force behind the Kubernetes Gateway API standard. With multiple contributors in maintainer and reviewer roles, Kong is all-in on Gateway API as the future of Kubernetes networking.

              {{ site.kic_product_name }} was the first submitted conformance report, and is 100% compliant with the core conformance tests, and many other additional extended tests. Kong has implemented the Gateway API resources as first-class citizens, converting them directly in to {{ site.base_gateway }} configuration rather than using intermediate CRDs. This makes the Gateway API CRDs a native language for {{ site.kic_product_name }}.
              
              [Learn more about the Gateway API &rarr;](/kubernetes-ingress-controller/gateway-api/)
          
  - header:
      type: h3
      text: "Deployment topologies"
    columns:
      - blocks:
        - type: card
          config:
            icon: /assets/icons/mesh.svg
            title: Gateway Discovery
            description: |
              Kong's recommended deployment topology. Use one {{ site.kic_product_name }} instance to configure multiple {{ site.base_gateway }} instances
            featured: true
            cta:
              url: /kubernetes-ingress-controller/deployment-topologies/gateway-discovery/

      - blocks:
        - type: card
          config:
            icon: /assets/icons/database.svg
            title: DB-Backed
            description: |
              Use {{ site.kic_product_name }} to configure a {{ site.base_gateway }} Control Plane that is attached to a PostgreSQL database.
            cta:
              url: /kubernetes-ingress-controller/deployment-topologies/db-backed/

      - blocks:
        - type: card
          config:
            icon: /assets/icons/self-hosted.svg
            title: Sidecar (Traditional)
            description: |
              Deploy {{ site.kic_product_name }} and {{ site.base_gateway }} as containers within the same Pod. This topology is deprecated.
            cta:
              url: /kubernetes-ingress-controller/deployment-topologies/sidecar/

  - columns:
    - blocks:
        - type: structured_text
          config:
            header:
              text: "Common use cases"
            blocks:
              - type: text
                text: |
                  Many {{ site.kic_product_name }} users have the same questions when adding an ingress controller to their cluster:

                  * How do I expose my service on a specific path?
                  * How do I protect the service with rate limiting?
                  * How do I cache responses for a period of time to reduce load?
                  * How do I add authentication to my service?

                  Follow our [getting started guide](/kubernetes-ingress-controller/install/) which takes you through all of these in under 10 minutes, step-by-step. Each page contains copy/paste instructions, and links to additional documentation if you want to learn more.
    - blocks:
        - type: structured_text
          config:
            header:
              text: "Troubleshooting"
            blocks:
              - type: text
                text: |
                  If {{ site.kic_product_name }} is not working for you the following pages may help:

                  * [Troubleshooting](/index/kubernetes-ingress-controller/#troubleshooting): Common issues that people encounter when running {{ site.kic_product_name }}.
                  * [FAQ](/index/kubernetes-ingress-controller/#faqs): Specific questions about routing behavior, plugin compatibility and more.
                  * [Feature gates](/kubernetes-ingress-controller/reference/feature-gates/): If something isn't working as expected, ensure that you have the correct feature gates enabled
                  * [Create a GitHub issue](https://github.com/Kong/kubernetes-ingress-controller/issues/new/choose): Report a bug or make a feature request for {{ site.kic_product_name }}.
                  * [Join the Kong Slack community](https://konghq.com/community#64fe8580b1a2f3c3804230f1): Get help from the team

  - header:
      type: h2
      text: KIC feature support and deployment models
    columns:
      - blocks:
          - type: text
            config: |
              {{ site.kic_product_name }} integrates  {{ site.base_gateway }} with Kubernetes by translating Kubernetes resources into {{ site.base_gateway }} configuration.
              Feature support differs depending on the operational model:
              - **Standalone (KIC only)**: You provision and manage  {{ site.base_gateway }} yourself, and {{ site.kic_product_name }} applies configuration using Kubernetes resources.
              - **With Kong Gateway Operator (KO/KGO)**: The Operator provisions and manages {{ site.base_gateway }} deployments declaratively, while {{ site.kic_product_name }} handles configuration. 
              
              To compare feature support in each model, use the following table:
              
              {% table %}
              columns:
                - title: Feature
                  key: feature
                - title: KIC-only Model
                  key: kic
                - title: KO/KGO Hybrid Model
                  key: hybrid
              rows:
                - feature: "**Configuration**"
                  kic: "Configure all {{ site.base_gateway }} entities with CRDs directly. For example, Services, Routes, Consumers, Plugins, Certificates, CA Certificates, Vaults."
                  hybrid: "Same configuration scope, however gateways are provisioned and reconciled automatically by the Operator."
                - feature: "**{{ site.base_gateway }} API**" 
                  kic: "Supports `Ingress`, `HTTPRoute`, `TCPRoute`, and `UDPRoute`. From KIC 3.5 onward, compliant with Gateway API v1.3."
                  hybrid: "Supports `GatewayClass`, `Gateway`, and `GRPCRoute`, in addition to `HTTPRoute`, `TCPRoute`, and `UDPRoute`."
                - feature: "**Feature Gates**"  
                  kic:
                    "Enable advanced or experimental behavior: `FillIDs`, `RewriteURIs`, `CombinedServicesFromDifferentHTTPRoutes`.
                    - `FillIDs` can cause UUID collisions across workspaces with identical Consumers.
                    - Disable `CombinedRoutes` if per-route plugin configuration is required."
                  hybrid: "Identical feature gate support and constraints. No change between models."
                - feature: "**Fallback configuration**"
                  kic: "Applies valid configuration while skipping invalid objects to maintain cluster stability."
                  hybrid: "Identical fallback behavior. No change between models."
                - feature: "**Last Known Good Config**"
                  kic:
                    "Retains the last accepted configuration in memory and reapplies it after restart.
                    - Does not reload automatically if only the Kong proxy container restarts; use `CONTROLLER_ENABLE_REVERSE_SYNC=true` to force reloads."
                  hybrid: "Identical last-known-good behavior and limitation. No change between models."
                - feature: "**Path Rewriting**" 
                  kic: "Rewrite request paths using the `konghq.com/rewrite` annotation."
                  hybrid: "Identical path rewriting support. No change between models."
                - feature: "**{{site.konnect_short_name}} integration**"
                  kic: |
                    KIC-managed resources appear as read-only in {{site.konnect_short_name}} UI/Admin API.
                    - Route and service names longer than 512 characters may block sync.
                  hybrid: "Same {{site.konnect_short_name}} behavior and restriction. No change between models"
                - feature: "**Hybrid mode plugins**"
                  kic: "Not applicable — Standalone mode does not use Hybrid Gateway."
                  hybrid:
                    "When {{ site.base_gateway }} runs in hybrid mode:
                    - Rate Limiting, Rate Limiting Advanced, Response Rate Limiting, AI Rate Limiting Advanced, and Service Protection cannot use the `cluster` strategy (use `local` or Redis).
                    - GraphQL Rate Limiting Advanced requires Redis.
                    - OAuth 2.0 Authentication not supported.
                    - Key Auth Encrypted TTL not supported.
                    - Custom plugins must be installed on both CP and DPs."
                - feature: "**Licensing**"
                  kic: "Enterprise license must be valid. In DB-less deployments, expired licenses block new nodes and restarts."
                  hybrid: "Enterprise license must be valid. Operator adds declarative license management with the `KongLicense` CRD or environment variables."                   
              {% endtable %}

              {:.info}
              > All other {{ site.base_gateway }} features that can be configured through CRDs are supported equally in both models. For example, plugins, health checks, or load balancing.

  - header:
      type: h3
      text: "Supported entities"
    columns:
    - blocks:
      - type: entity_card
        config:
          entity: service
          additional_url: "?tab=kic#set-up-a-gateway-service"
    - blocks:
      - type: entity_card
        config:
          entity: route
          additional_url: "?tab=kic#set-up-a-route"
    - blocks:
      - type: entity_card
        config:
          entity: consumer
          additional_url: "?tab=kic#set-up-a-consumer"
    - blocks:
      - type: entity_card
        config:
          entity: consumer-group
          additional_url: "?tab=kic#set-up-a-consumer-group"
  - columns:
    - blocks:
      - type: entity_card
        config:
          entity: plugin
          additional_url: "?tab=kic#set-up-a-plugin"
    - blocks:
      - type: entity_card
        config:
          entity: certificate
          additional_url: "?tab=kic#set-up-a-certificate"
    - blocks:
      - type: entity_card
        config:
          entity: ca_certificate
          additional_url: "?tab=kic#set-up-a-ca-certificate"
    - blocks:
      - type: entity_card
        config:
          entity: vault
          additional_url: "?tab=kic#set-up-a-vault"
  
  - header:
      type: h2
      text: "Frequently asked questions"
    columns:
      - blocks:
          - type: faqs
            config:
              - q: I'm using AWS CDK, can I manage Kong resources with CDK instead of {{ site.kic_product_name }}?
                a: |
                  Currently, you can't manage Kong resources via AWS CDK. 
                  We recommend managing Kong configurations by [deploying decK](/deck/) or custom automation (for example, Lambda functions) through CDK that interact with the [Admin API](/admin-api/).